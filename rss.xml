<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log</title><link>https://mnod.github.io/</link><description>tech log</description><atom:link href="https://mnod.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Wed, 23 Nov 2022 08:33:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>build a test labo for cisco certificate</title><link>https://mnod.github.io/posts/20221120.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;I like cli environment, so I prefer to use dynagen with dynamips.&lt;/p&gt;
&lt;p&gt;The last version of debian which offer dynagen deb package is debian10 buster, so I select it.&lt;/p&gt;
&lt;p&gt;Install related packages.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version=0.2.22
sed -i.bak 's/ main$/ main contrib non-free/' /etc/apt/sources.list \
&amp;amp;&amp;amp; apt update &amp;amp;&amp;amp; apt upgrade -y \
&amp;amp;&amp;amp; DEBIAN_FRONTEND noninteractive apt install -y \
 vpcs \
 openvswitch-switch \
 snmp snmptrapd \
 freeradius \
 postfix mailutils \
 tcpdump \
 telnet \
 tmux \
&amp;amp;&amp;amp; curl -fsSL https://toolbelt.treasuredata.com/sh/install-debian-buster-td-agent4.sh | sudo sh \
&amp;amp;&amp;amp; wget https://github.com/GNS3/dynamips/archive/refs/tags/v${version}.tar.gz \
&amp;amp;&amp;amp; tar zxf v${version}.tar.gz \
&amp;amp;&amp;amp; rm v${version}.tar.gz \
&amp;amp;&amp;amp; cd dynamips-${version} \
&amp;amp;&amp;amp; apt install -y gcc cmake libelf-dev libpcap-dev make musl-dev linux-headers-amd64 \
&amp;amp;&amp;amp; mkdir -p dynamips-${version}/build \
&amp;amp;&amp;amp; cd dynamips-${version}/build \
&amp;amp;&amp;amp; cmake .. \
&amp;amp;&amp;amp; make \
&amp;amp;&amp;amp; make install \
&amp;amp;&amp;amp; rm -rf dynamips-${version} \
&amp;amp;&amp;amp; apt remove -y gcc cmake make musl-dev linux-headers \
&amp;amp;&amp;amp; apt autoremove -y \
&amp;amp;&amp;amp; apt install -y dynagen
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;openvswitch&lt;/h3&gt;
&lt;p&gt;create openvswitch virtual bridge and tap device.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl show
sudo ovs-vsctl add-br br0

sudo ip link set br0 up
ip link show br0

sudo ip address add 10.2.0.1/24 brd + dev br0
ip address show br0

sudo ip tuntap add dev tap0 mode tap
sudo ovs-vsctl add-port br0 tap0
sudo ip link set tap0 up
sudo ip route add 10.2.0.0/16 dev br0
ip link show tap0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;everytime you restart the computer, you have to add tap device to the bridge &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo ovs-vsctl show
sudo ip address add 10.2.0.1/24 brd + dev br0
sudo ip tuntap add dev tap0 mode tap
sudo ip link set tap0 up
sudo ip link set br0 up
sudo ip route add 10.2.0.0/16 dev br0
ip link show tap0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you have to start dynamips by root user to connect to tap device.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dynamips -H 127.0.0.1:7200
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can start dynagen by your own user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dynagen labo.net
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you can connect tap device to dynamips labo with dynagen using &lt;code&gt;NIO_tap:tap0&lt;/code&gt; like below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NIO_tap:tap0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;vpcs&lt;/h3&gt;
&lt;p&gt;you can connect vpcs to dynagen using NIO_udp device like below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;NIO_udp:30000:127.0.0.1:20000
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;rsyslog&lt;/h3&gt;
&lt;p&gt;change rsyslog config to receive syslog message.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp -pi /etc/rsyslog.conf{,.000}
$ sudo vi /etc/rsyslog.conf
$ diff -u /etc/rsyslog.conf{,.000}
@@ -13,8 +13,8 @@
 #module(load="immark")  # provides --MARK-- message capability

 # provides UDP syslog reception
-module(load="imudp")
-input(type="imudp" port="514")
+#module(load="imudp")
+#input(type="imudp" port="514")

 # provides TCP syslog reception
 #module(load="imtcp")
@@ -90,7 +90,3 @@
 # Emergencies are sent to everybody logged in.
 #
 *.emerg                                :omusrmsg:*
-
-
-
-local0.*                       -/var/log/local0.log

$ sudo touch /var/log/local0.log
$ sudo systemctl restart rsyslog
$ tail -f /var/log/local0.log

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;chronyd&lt;/h3&gt;
&lt;p&gt;change chronyd config to serve ntp clock to labo network.&lt;/p&gt;
&lt;p&gt;In this example, 10.2.0.0/16 is labo network address range&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp -pi /etc/chrony/chrony.conf{,.000}
$ sudo vi /etc/chrony/chrony.conf
$ diff -u /etc/chrony/chrony.conf{,.000}
@@ -29,5 +29,3 @@
 # Step the system clock instead of slewing it if the adjustment is larger than
 # one second, but only in the first three clock updates.
 makestep 1 3
-
-allow 10.2.0.0/16

$ sudo systemctl restart chrony
$ chronyc sources
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;snmp&lt;/h3&gt;
&lt;p&gt;on cisco device&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# snmp-server community cisco ro
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ snmpwalk -v 1 10.2.0.254 -c cisco 1.3.6.1.2.1.2.2.1.10
$ snmpwalk -v 1 10.2.0.254 -c cisco 1.3.6.1.2.1.2.2.1.16
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;snmptrap&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp -pi /etc/snmp/snmptrapd.conf{,.000}
$ sudo vi /etc/snmp/snmptrapd.conf

$ diff -u /etc/snmp/snmptrapd.conf{,.000}
@@ -16,7 +16,6 @@
 #
 #authCommunity log,execute,net private　
 #authCommunity log,execute,net public
-authCommunity log cisco
 #
 ## send mail when get any events
 #traphandle default /usr/bin/traptoemail -s smtp.example.org foobar@example.org

$ sudo systemctl start snmptrapd.service
$ tail -f /var/log/messages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;on cisco device&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# snmp-server host address traps version 1 cisco 
# snmp-server enable traps
# int fa0/0
# no shut
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;freeradius&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp -pi  /etc/freeradius/3.0/clients.conf{,.000}
$ sudo vi  /etc/freeradius/3.0/clients.conf
$ sudo diff -u /etc/freeradius/3.0/clients.conf{,.000}
@@ -266,8 +266,3 @@
 #              secret = testing123
 #      }
 #}
-client ciscolabo {
-       ipaddr = 10.2.0.0/16
-       secret = radiussecret
-}
-
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ sudo ls -l /etc/freeradius/3.0/mods-config/files/authorize{,.000}
$ sudo vi /etc/freeradius/3.0/mods-config/files/authorize
$ sudo diff -u /etc/freeradius/3.0/mods-config/files/authorize{,.000}
--- /etc/freeradius/3.0/mods-config/files/authorize     2022-11-19 20:50:54.008631636 +0900
+++ /etc/freeradius/3.0/mods-config/files/authorize.000 2022-08-28 04:29:38.000000000 +0900
@@ -1,4 +1,3 @@
-cisco1 Cleartext-Password := "cisco1pass"
 #
 #      Configuration file for the rlm_files module.
 #      Please see rlm_files(5) manpage for more information.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restart freeradius and test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo systemctl restart freeradius
$ sudo apt install -y freeradius-utils
$ radtest cisco1 cisco1pass 127.0.0.1 1812 testing123
$ radtest cisco1 cisco1pass 10.2.0.1 1812 radiussecret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;on cisco device &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conf t
aaa new-model
radius-server host 10.2.0.1 auth-port 1812 key radiussecret
aaa group server radius freeradius
server 10.2.0.1 auth-port 1812
exit
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test aaa group freeradius cisco1 cisco1pass port 1812 new-code
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;config vty settings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conf t
aaa authentication login freeradius group radius
line vty 0 15
login authentication freeradius
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;telnet from server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;telnet 10.2.1.254
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;td-agent&lt;/h3&gt;
&lt;p&gt;install fluent-plugin-netflow and change configuration &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo td-agent-gem install fluent-plugin-netflow
sudo cp -pi /etc/td-agent/td-agent.conf{,.000}
sudo vi /etc/td-agent/td-agent.conf
diff -u /etc/td-agent/td-agent.conf{,.000}
@@ -126,15 +126,3 @@
 #    path /var/log/td-agent/td-%Y-%m-%d/%H.log
 #  &amp;lt;/store&amp;gt;
 #&amp;lt;/match&amp;gt;
-
-&amp;lt;match netflow.*&amp;gt;
-  @type stdout
-&amp;lt;/match&amp;gt;
-
-&amp;lt;source&amp;gt;
-  @type netflow
-  tag netflow.event
-  port 5141
-  versions [5, 9]
-&amp;lt;/source&amp;gt;
-
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test configuration and restart td-agent service&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo td-agent --dry-run
sudo systemctl restart td-agent.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;on cisco device&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conf t
int fa0/0
ip flow ingress
ip flow egress
exit
ip flow-export version 5
ip flow-export destination 10.2.0.1 5141 udp
ip flow-export source fa0/0
end
show ip cache flow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after a while confirm td-agent log file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tail -f /var/log/td-agent/td-agent.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;postfix&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo cp -pi /etc/postfix/main.cf{,.000}
$ sudo vi /etc/postfix/main.cf
$ diff -u /etc/postfix/main.cf{,.000}
@@ -37,11 +37,12 @@
 myhostname = ip-10-0-0-73.ap-northeast-1.compute.internal
 alias_maps = hash:/etc/aliases
 alias_database = hash:/etc/aliases
-myorigin = /etc/mailname
-mydestination = $myhostname, ip-10-0-0-73.ap-northeast-1.compute.internal, localhost.ap-northeast-1.compute.internal, , localhost
+mydestination = localdomain, $myhostname, ip-10-0-0-73.ap-northeast-1.compute.internal, localhost.ap-northeast-1.compute.internal, localhost
 relayhost = 
-mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
+mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128 10.2.0.0/16
 mailbox_size_limit = 0
 recipient_delimiter = +
-inet_interfaces = all
+inet_interfaces = 127.0.0.1, [::1], 10.2.0.1
+default_transport = error
+relay_transport = error
 inet_protocols = all

$ sudo systemctl restart postfix
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; END | mail -s 'test subject' admin
&amp;gt; test body
&amp;gt; .
&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test from cisco device&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;track 1 interface FastEthernet1/0 line-protocol
event manager applet eemtest
event track 1 state down
action 1.0 cli command "enable"
action 2.0 cli command "show int fa1/0"
action 3.0 mail server "10.2.0.1" to "admin" from "labo@example.com" subject "interface down" body "$_cli_result"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;tcpdump&lt;/h3&gt;
&lt;p&gt;Of courese, Dynagen has capture function, if you prefer it, try local SPAN on cisco device&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conf t
int fa1/0
no shut
int fa1/15
no shut
exit
monitor session 1 source interface FastEthernet 1/0
monitor session 1 destination interface FastEthernet 1/15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;capture stream and save it to file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo tcpdump -i br0 -w capture.dump
sudo tcpdump -r capture.dump -n -e -v -x | less
&lt;/code&gt;&lt;/pre&gt;</description><category>cisco</category><category>dynamips</category><category>linux</category><guid>https://mnod.github.io/posts/20221120.html</guid><pubDate>Sun, 20 Nov 2022 00:00:00 GMT</pubDate></item><item><title>EFS and ECS</title><link>https://mnod.github.io/posts/20221119.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;efs.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
  KeyWord:
    Type: String
  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup::Id
  Subnet1:
    #Type: List&amp;lt;AWS::EC2::Subnet::Id&amp;gt;
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id

Resources:
  SecurityGroupEFS:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${KeyWord}_SecurityGroupEFS
      GroupDescription: 'efs-filesystem securitygroup'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref SecurityGroupWeb
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_SecurityGroupEFS

  ElasticFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: DISABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub ${KeyWord}_test_efs
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
            Principal:
              # AWS: !GetAtt RoleECS.Arn
              AWS: '*'
      PerformanceMode: 'generalPurpose'
      ThroughputMode: 'bursting'

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SubnetId: !Ref Subnet1
      SecurityGroups:
        - !Ref SecurityGroupEFS

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SubnetId: !Ref Subnet2
      SecurityGroups:
        - !Ref SecurityGroupEFS

  AccessPointResource:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "0755"
        Path: "/efs/accesspoint1"

Outputs:
  SecurityGroupEFS:
    Value: !Ref SecurityGroupEFS
  ElasticFileSystem:
    Value: !Ref ElasticFileSystem
  AccessPointResource:
    Value: !Ref AccessPointResource
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ecs.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyWord:
    Type: String
  ElasticFileSystem:
    Type: String
  SecurityGroup1:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  AccessPointResource:
    Type: String

Resources:
  RoleECS:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'

  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub ecs-cluster-${KeyWord}
      CapacityProviders:
        - FARGATE
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_ecs_cluster

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Sub ${KeyWord}_taskdefinition
          Image: "nginx"
          PortMappings:
            - ContainerPort: 80
          MountPoints:
            - SourceVolume: 'efs-filesystem'
              ContainerPath: '/usr/share/nginx/html'
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt RoleECS.Arn
      Volumes:
        - Name: 'efs-filesystem'
          EFSVolumeConfiguration:
            AuthorizationConfig:
              AccessPointId: !Ref AccessPointResource
              IAM: 'ENABLED'
            FilesystemId: !Ref ElasticFileSystem
            TransitEncryption: 'ENABLED'
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_ecs_taskdefinition

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup1
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_ecs_service

Outputs:
  RoleECS:
    Value: !Ref RoleECS
  ECSCluster:
    Value: !Ref ECSCluster
  ECSServiceName:
    Value: !GetAtt ECSService.Name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;parent_efs.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  KeyWord:
    Default: nestedstacktest
    Type: String

Resources:
  EFS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: efs.yml
      Parameters:
        KeyWord : !Ref KeyWord
        VPC: !ImportValue mystack-Vpc
        Subnet1: !ImportValue mystack-PublicSubnet1
        Subnet2: !ImportValue mystack-PublicSubnet2
        SecurityGroupWeb: !ImportValue mystack-SecurityGroupPub

  ECS:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ecs.yml
      Parameters:
        KeyWord : !Ref KeyWord
        Subnet1: !ImportValue mystack-PublicSubnet1
        Subnet2: !ImportValue mystack-PublicSubnet2
        SecurityGroup1: !ImportValue mystack-SecurityGroupPub
        AccessPointResource: !GetAtt EFS.Outputs.AccessPointResource
        ElasticFileSystem: !GetAtt EFS.Outputs.ElasticFileSystem

Outputs:
  SecurityGroupEFS:
    Value: !GetAtt EFS.Outputs.SecurityGroupEFS
  ElasticFileSystem:
    Value: !GetAtt EFS.Outputs.ElasticFileSystem
  RoleECS:
    Value: !GetAtt ECS.Outputs.RoleECS
  ECSCluster:
    Value: !GetAtt ECS.Outputs.ECSCluster
  ECSServiceName:
    Value: !GetAtt ECS.Outputs.ECSServiceName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Makefile.efs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template_file=parent_efs.yml
package_file=parent_efs_packaged.yml
bucket_name=mybucketname
stack_name=testefs

validate:
    aws cloudformation validate-template --template-body file://efs.yml
    aws cloudformation validate-template --template-body file://ecs.yml
    aws cloudformation validate-template --template-body file://parent_efs.yml

$(package_file):
    aws cloudformation package --template-file $(template_file) --s3-bucket $(bucket_name) --output-template-file $(package_file)

package: $(package_file)

build: $(package_file)
    aws cloudformation deploy --template-file $(package_file) --stack-name $(stack_name) --tags Name=testnestedstack --capabilities CAPABILITY_IAM

events:
    aws cloudformation describe-stack-events --stack-name $(stack_name)

describe:
    aws cloudformation describe-stacks --stack-name $(stack_name)

delete:
    aws cloudformation delete-stack --stack-name $(stack_name)

clean:
    rm $(package_file)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm filesystem and acccess points&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws efs describe-file-systems
$ aws efs describe-access-points --file-system-id fs-xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install efs-utils on debian EC2 instance&lt;/p&gt;
&lt;p&gt;for detail see https://docs.aws.amazon.com/ja_jp/efs/latest/ug/installing-amazon-efs-utils.html&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt update -y &amp;amp;&amp;amp; sudo apt install -y git binutils
$ git clone https://github.com/aws/efs-utils
$ cd efs-utils
$ ./build-deb.sh
$ sudo apt install ./build/amazon-efs-utils-*_all.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mount and test&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount -t efs -o tls,accesspoint=fsap-xxxx fs-xxxx:/ /mnt
or sudo mount -t efs -o tls fs-xxxx:/ /mnt

$ echo hellow world /mnt/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update desired count using AWS CLI&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-clusters
$ aws ecs describe-clusters --cluster xxxx
$ aws ecs list-services --cluster xxxx
$ aws ecs describe-services --cluster xxxx --services testefs-ECS-xxxx
$ aws ecs update-service --cluster xxxx --service testefs-ECS-xxxx  --desired-count 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm Public IP address&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-tasks --cluster xxxx
$ aws ecs describe-tasks --cluster xxxx --task xxxx
$ aws ec2 describe-network-interfaces --network-interface-ids eni-xxxx
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20221119.html</guid><pubDate>Sat, 19 Nov 2022 00:00:00 GMT</pubDate></item><item><title>EC2 spot instance</title><link>https://mnod.github.io/posts/20221113.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;sample launch template
In some instance type and OS, we are able to stop or hybernate the EC2 spot instances, and restart or resume them when we want to do so.
While stop or hybernate the instances, we must pay for EBS and Elastic IP etc...&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: spot-instance-template
      LaunchTemplateData:
        InstanceType: "t3.nano"
        CreditSpecification:
          CpuCredits: "standard"
        InstanceInitiatedShutdownBehavior: stop
        KeyName: "mykeyname"
        NetworkInterfaces:
          - DeviceIndex: "0"
            AssociatePublicIpAddress: "true"
            Groups:
              - Ref: mysecuritygroup
            SubnetId:
              Ref: mysubnet
        InstanceMarketOptions:
          MarketType: spot
          SpotOptions:
            InstanceInterruptionBehavior: stop
            SpotInstanceType: persistent
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              DeleteOnTermination: true
              VolumeType: gp3
              VolumeSize: 8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after create or update the stack, confirm the launch template you've just created&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 describe-launch-templates
aws ec2 describe-launch-template-versions --launch-template-id lt-xxxx --versions x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create spot instance with the launch template.
this example override image id, instance type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 run-instances --image-id ami-xxxx --instance-type t2.medium --launch-template 'LaunchTemplateId=lt-xxxx,Version=x' --dry-run
$ aws ec2 run-instances --image-id ami-xxxx --instance-type t2.medium --launch-template 'LaunchTemplateId=lt-xxxx,Version=x'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm spot instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-spot-instance-requests --query 'SpotInstanceRequests[].{"SpotInstanceRequestId":SpotInstanceRequestId, "InstanceId":InstanceId, "Status":Status, "State":State}'  
4 aws ec2 describe-instances --filter 'Name=spot-instance-request-id,Values=sir-xxxx' --query 'Reservations[].Instances[].{"State":State, "InstanceId":InstanceId}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;temporary stop instance and restart it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 stop-instances --instance-id i-xxxx
$ aws ec2 start-instances --instance-id i-xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cancel spot instance request and terminate spot instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 cancel-spot-instance-requests --spot-instance-request-ids sir-xxxx
$ aws ec2 terminate-instances --instance-id i-xxxx
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20221113.html</guid><pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate></item><item><title>FSx for Windows</title><link>https://mnod.github.io/posts/20221030.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;cloudformation template &lt;code&gt;microsoftad.yml&lt;/code&gt; for AWS managed AD&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  KeyWord:
    Type: String
  DirectoryName:
    Type: String
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id
  VPC:
    Type: AWS::EC2::VPC::Id

Resources:
  MicrosoftAD: 
    Type: AWS::DirectoryService::MicrosoftAD
    Properties: 
      Name: !Ref DirectoryName
      Edition: Standard
      Password: '{{resolve:ssm-secure:test-directory-password:1}}'
      VpcSettings: 
        SubnetIds: 
          - !Ref Subnet1
          - !Ref Subnet2
        VpcId: !Ref VPC

Outputs:
  MicrosoftAD:
    Value: !Ref MicrosoftAD
  MicrosoftADDns:
    Value: !Join
      - ','
      - !GetAtt MicrosoftAD.DnsIpAddresses
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cloudformation template &lt;code&gt;fsx.yml&lt;/code&gt; for FSx for Windows&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  KeyWord:
    Type: String
  MicrosoftAD:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Type: AWS::EC2::Subnet::Id
  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  SecurityGroupFSx:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupName: !Sub ${KeyWord}_SecurityGroupFSx
      GroupDescription: 'FSx for windows securitygroup'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          SourceSecurityGroupId: !Ref SecurityGroupWeb
        - IpProtocol: tcp
          FromPort: 5985
          ToPort: 5985
          SourceSecurityGroupId: !Ref SecurityGroupWeb
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_SecurityGroupFSx

  FSxForWindows:
    Type: 'AWS::FSx::FileSystem'
    Properties:
      FileSystemType: WINDOWS
      StorageCapacity: 32
      StorageType: SSD
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroupIds:
        - !Ref SecurityGroupFSx
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_FSx_for_windows
      WindowsConfiguration:
        ActiveDirectoryId: !Ref MicrosoftAD
        DeploymentType: MULTI_AZ_1
        PreferredSubnetId: !Ref Subnet1
        ThroughputCapacity: 8

Outputs:
  FSxForWindows:
    Value: !Ref FSxForWindows
  SecurityGroupFSx:
    Value: !Ref SecurityGroupFSx
  FSxForWindowsDNSName:
    Value: !GetAtt FSxForWindows.DNSName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cloudformation parent template &lt;code&gt;parent_fsx.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  KeyWord:
    Default: nestedstacktest
    Type: String
  DirectoryName:
    Default: mydirectory.example.com
    Type: String

Resources:
  MicrosoftAD:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: microsoftad.yml
      Parameters:
        KeyWord : !Ref KeyWord
        VPC: !ImportValue mystack-Vpc
        Subnet1: !ImportValue mystack-PublicSubnet1
        Subnet2: !ImportValue mystack-PublicSubnet2
        DirectoryName: !Ref DirectoryName

  FSx:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: fsx.yml
      Parameters:
        KeyWord : !Ref KeyWord
        VPC: !ImportValue mystack-Vpc
        Subnet1: !ImportValue mystack-PublicSubnet1
        Subnet2: !ImportValue mystack-PublicSubnet2
        SecurityGroupWeb: !ImportValue mystack-SecurityGroupPub
        MicrosoftAD: !GetAtt MicrosoftAD.Outputs.MicrosoftAD

Outputs:
  MicrosoftAD:
    Value: !GetAtt MicrosoftAD.Outputs.MicrosoftAD
  MicrosoftADDns:
    Value: !GetAtt MicrosoftAD.Outputs.MicrosoftADDns
  SecurityGroupFSx:
    Value: !GetAtt FSx.Outputs.SecurityGroupFSx
  FSxForWindows:
    Value: !GetAtt FSx.Outputs.FSxForWindows
  FSxForWindowsDNSName:
    Value: !GetAtt FSx.Outputs.FSxForWindowsDNSName
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Makefile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;template_file=parent_fsx.yml
package_file=parent_fsx_packaged.yml
stack_name=testfsx
bucket_name=mybucketname

validate:
    aws cloudformation validate-template --template-body file://microsoftad.yml
    aws cloudformation validate-template --template-body file://fsx.yml
    aws cloudformation validate-template --template-body file://parent_fsx.yml

$(package_file):
    aws cloudformation package --template-file $(template_file) --s3-bucket $(bucket_name) --output-template-file $(package_file)

package: $(package_file)

build: $(package_file)
    aws cloudformation deploy --template-file $(package_file) --stack-name $(stack_name) --tags Name=testnestedstack --capabilities CAPABILITY_IAM

events:
    aws cloudformation describe-stack-events --stack-name $(stack_name)

describe:
    aws cloudformation describe-stacks --stack-name $(stack_name)

delete:
    aws cloudformation delete-stack --stack-name $(stack_name)

clean:
    rm $(package_file)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;mount FSx for Windows on ubuntu server&lt;/h3&gt;
&lt;p&gt;we can check address for mount point ip address&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dig &amp;lt;access point dns name&amp;gt; +short @&amp;lt;dns of your directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;check whether you can mount your file system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt update &amp;amp;&amp;amp; sudo apt install -y cifs-utils
$ sudo mount -t cifs -o vers=3.0,sec=ntlmsspi,user=&amp;lt;your username&amp;gt;@&amp;lt;your domain&amp;gt; //10.0.0.xxx/share /mountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create credential file and test it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo chmod 600 /root/smb.cred
$ sudo cat /root/smb.cred
username=&amp;lt;your username&amp;gt;
password=&amp;lt;your password&amp;gt;
domain=&amp;lt;your domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;sudo mount -t cifs -o vers=3.0,sec=ntlmsspi,credentials=/root/smb.cred //10.0.0.xxx/share /mountpoint
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;write fstab entry and test it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo grep /mnt /etc/fstab
//10.0.0.xxx/share      /mnt    cifs    vers=3.0,sec=ntlmsspi,credentials=/root/smb.cred        0 0      
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount /mountpoint
$ df /mountpoint
$ sudo umount /mountpoint
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20221030.html</guid><pubDate>Sun, 30 Oct 2022 00:00:00 GMT</pubDate></item><item><title>SSM Automation</title><link>https://mnod.github.io/posts/20220920.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;auto stop EC2 instances using AWS System Manager and Cloudwath Events&lt;/p&gt;
&lt;h3&gt;auto stop ec2 instances with instance id&lt;/h3&gt;
&lt;p&gt;stop specified ec2 instances&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;jq . parameters.json 
[
  {
    "ParameterKey": "KeyWord",
    "ParameterValue": "SomeKeyword"
  },
  {
    "ParameterKey": "InstanceIds",
    "ParameterValue": "[¥"i-xxxx¥",¥"i-yyyy¥"]"
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  RoleAutoStop:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -  Effect: Allow
             Principal:
               Service: events.amazonaws.com
             Action: sts:AssumeRole
      RoleName: !Sub ${KeyWord}_Role_AutoStop
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Tags:
        - Key: Name
          Value: !Sub ${KeyWord}_Role_AutoStop

  EvnetRuleAutoStop:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule to stop instances automatically
      Name: !Sub ${KeyWord}-AutoStopInstances
      ScheduleExpression: cron(0 11 * * ? *)
      #RoleArn: !GetAtt  RoleAutoStop.Arn
      State: ENABLED
      Targets:
        - Arn: 'arn:aws:ssm:ap-northeast-1::automation-definition/AWS-StopEC2Instance:$DEFAULT'
          Id: StopEc2
          RoleArn: !GetAtt RoleAutoStop.Arn
          Input: !Sub '{"InstanceId": ${InstanceIds}}'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;auto stop ec2 instances with tag&lt;/h3&gt;
&lt;p&gt;stop ec2 instances with StopTime tag&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   AllowTagGetResources:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: !Sub ${KeyWord}_allow_tag_getresources
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - tag:GetResources
            Resource: '*'
      Roles:
        - !Ref RoleAutoStop

  StopEC2InstancesWithTag:
    Type: AWS::SSM::Document
    Properties:
      DocumentFormat: YAML
      DocumentType: Automation
      Tags: 
        - Key: Name
          Value: !Sub ${KeyWord}_StopEC2InstancesWithTag
      Content:
        description: StopEC2Instances Using Tags:StopTime
        schemaVersion: "0.3"
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          StopTime:
            type: String
            default: 6pm
            description: (Required) 6pm,7pm,8pm
            allowedValues:
              - 6pm
              - 7pm
              - 8pm
          AutomationAssumeRole:
            type: String
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            default: ""
        mainSteps:
          - name: StopEC2Instances
            action: aws:executeAwsApi
            inputs:
              Service: ssm
              Api: StartAutomationExecution
              DocumentName: AWS-StopEC2Instance
              TargetParameterName: "InstanceId"
              Targets:
                - Key: tag:StopTime
                  Values:
                    - "{{ StopTime }}"

  EvnetRuleAutoStopWithTag:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule to stop instances automatically with tag
      Name: !Sub ${KeyWord}-AutoStopInstances-with-tag
      ScheduleExpression: cron(0 10 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:ssm:ap-northeast-1::automation-definition/${StopEC2InstancesWithTag}:$DEFAULT
          Id: StopEc2
          RoleArn: !GetAtt RoleAutoStop.Arn
          Input: !Sub '{"StopTime": ["7pm"]}'
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220920.html</guid><pubDate>Tue, 20 Sep 2022 00:00:00 GMT</pubDate></item><item><title>acm</title><link>https://mnod.github.io/posts/20220918.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;request certificate&lt;/h3&gt;
&lt;p&gt;This sample will create certificate in us-east-1 region.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;myregion=us-east-1
myfqdn=www.example.com
aws acm list-certificates --region ${myregion}
aws acm request-certificate --region ${myregion} --domain-name ${myfqdn} --validation-method DNS
CertificateArn=$(aws acm list-certificates --region ${myregion} --query 'CertificateSummaryList[?DomainName == `'${myfqdn}'`].CertificateArn' --output text)
aws acm describe-certificate --region ${myregion} --certificate-arn ${CertificateArn}
aws acm describe-certificate --region ${myregion} --certificate-arn ${CertificateArn} --query 'Certificate.DomainValidationOptions[].ResourceRecord'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;add Route53 entry&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;myodmain=exapmle.com
id=$(aws route53 list-hosted-zones --query 'HostedZones[?Name == `'${mydomain}.'`].Id' --output text)
aws route53 get-hosted-zone --id ${id}
aws route53 list-resource-record-sets --hosted-zone-id ${id}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create change batch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . change-batch.json 
{
  "Changes": [
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "xxxxxx.example.com.",
        "Type": "CNAME",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxxx.acm-validations.aws."
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws route53 change-resource-record-sets --hosted-zone-id ${id} --change-batch file://change-batch.json
aws route53 get-change --id /change/xxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;confirm the result&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws acm describe-certificate --region ${myregion} --certificate-arn ${CertificateArn}
aws acm get-certificate --region ${myregion} --certificate-arn ${CertificateArn}
aws acm get-certificate --region ${myregion} --certificate-arn ${CertificateArn} --query 'Certificate' --output text | openssl x509 -noout -text
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220918.html</guid><pubDate>Sun, 18 Sep 2022 00:00:00 GMT</pubDate></item><item><title>nested cloudformation stack</title><link>https://mnod.github.io/posts/20220820.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;create sub stack vpc.yml&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ cat vpc.yml 
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  CidrBlock:
    Type: String
    Default: "10.0.0.0/16"
  NameTag :
    Type: String
    Default: "nested stack"

Resources:
  VPC:

    Properties:
      CidrBlock: !Ref CidrBlock
      Tags:
      - Key: Name
        Value: !Ref NameTag

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref NameTag

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: 
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

Outputs:
  VpcId: 
    Value: !Ref VPC
  IgwId:
    Value: !Ref InternetGateway
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://vpc.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create another sub stack subnet.yml&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ cat subnet.yml                                                                                                                                                [5/1860]
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  NameTag:
    Type: String
    Default: "subnetnesting"
  VPC:
    Type: AWS::EC2::VPC::Id
  CidrBlock1:
    Type: String
    Default: "10.0.0.0/24"
  CidrBlock2:
    Type: String
    Default: "10.0.1.0/24"

Resources:
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrBlock1
      AvailabilityZone:
         Fn::Select:
         - '0'
         - Fn::GetAZs:
             Ref: AWS::Region

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrBlock2
      AvailabilityZone:
         Fn::Select:
         - '1'
         - Fn::GetAZs:
             Ref: AWS::Region

Outputs:
  SubnetId1:
    Value: !Ref Subnet1
  SubnetAz1:
    Value: !GetAtt Subnet1.AvailabilityZone
  SubnetId2:
    Value: !Ref Subnet2
  SubnetAz2:
    Value: !GetAtt Subnet2.AvailabilityZone
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://subnet.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create parent stack parent.yml&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ cat parent.yml 
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  NameTag:
    Default: nested stack test
    Type: String
  CidrBlock:
    Default: 10.1.0.0/16
    Type: String
  CidrBlock1:
    Default: 10.1.0.0/24
    Type: String
  CidrBlock2:
    Default: 10.1.1.0/24
    Type: String

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: vpc.yml
      Parameters:
        NameTag : !Ref NameTag
        CidrBlock: !Ref CidrBlock

  SUBNET:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: subnet.yml
      Parameters:
        NameTag : !Ref NameTag
        VPC: !GetAtt VPC.Outputs.VpcId
        CidrBlock1: !Ref CidrBlock1
        CidrBlock2: !Ref CidrBlock2

Outputs:
  VpcId:
    Value: !GetAtt VPC.Outputs.VpcId
  SubnetId1:
    Value: !GetAtt SUBNET.Outputs.SubnetId1
  SubnetId2:
    Value: !GetAtt SUBNET.Outputs.SubnetId2
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://parent.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create or update stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation package --template-file parent.yml --s3-bucket your-s3bucket-name --output-template-file parent_packaged.yml
aws cloudformation deploy --template-file parent_packaged.yml --stack-name nestedstack --tags Name=testnestedstack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;confirm&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation describe-stacks --query 'Stacks[?Tags[?Key == `Name` &amp;amp;&amp;amp; Value == `testnestedstack`]]' | less

$ aws cloudformation describe-stacks --query 'Stacks[?Tags[?Key == `Name` &amp;amp;&amp;amp; Value == `testnestedstack`]].StackName' | jq -r .[] | while read stackname; do
&amp;gt; aws cloudformation describe-stack-events --stack-name ${stackname}
&amp;gt; done | less

    $ aws cloudformation describe-stacks --query 'Stacks[?Tags[?Key == `Name` &amp;amp;&amp;amp; Value == `testnestedstack`]].StackName' | jq -r .[] | while read stackname; do
&amp;gt; aws cloudformation describe-stack-resources --stack-name ${stackname}
&amp;gt; done | less
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;delete stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation delete-stack --stack-name nestedstack
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220820.html</guid><pubDate>Sat, 20 Aug 2022 00:00:00 GMT</pubDate></item><item><title>cognito user pool</title><link>https://mnod.github.io/posts/20220817.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;create user pool&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp create-user-pool --pool-name testpool1 --user-pool-tags 'key=Name,Value=testpool1' --admin-create-user-config 'AllowAdminCreateUserOnly=true' --account-recovery-setting 'RecoveryMechanisms=[{Priority=1,Name=admin_only}]'
aws cognito-idp list-user-pools --max-results 10
aws cognito-idp describe-user-pool --user-pool-id ap-northeast-1_xxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove user pool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp delete-user-pool --user-pool-id ap-northeast-1_xxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create user and set user password&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp list-users --user-pool-id ap-northeast-1_xxxxxxxxx
aws cognito-idp admin-create-user --user-pool-id ap-northeast-1_xxxxxxxxx --username testuser001 --temporary-password temporary_password
aws cognito-idp admin-set-user-password --user-pool-id ap-northeast-1_xxxxxxxxx --username testuser001 --password parmanent_password --permanent
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create role before import csv&lt;/h3&gt;
&lt;p&gt;create policy json document&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . AllowCognitoCloudwatchLogs.policy
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
      ],
      "Resource": [
        "arn:aws:logs:ap-northeast-1:xxxxxxxxxxxx:log-group:/aws/cognito/*"
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create policy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws iam create-policy --policy-name AllowCognitoCloudwatchLogs --policy-document file://AllowCognitoCloudwatchLogs.policy
aws iam list-policies --query 'Policies[?PolicyName==`AllowCognitoCloudwatchLogs`]'
aws iam delete-policy --policy-arn arn:aws:iam::xxxxxxxxxxxx:policy/AllowCognitoCloudwatchLogs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create assume role policy document&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . assumepolicy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "cognito-idp.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create role&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws iam create-role --role-name Import-Cognito-Userpool --assume-role-policy-document file://assumepolicy.json
aws iam list-roles --query 'Roles[?RoleName==`Import-Cognito-Userpool`]'
aws iam attach-role-policy --role-name Import-Cognito-Userpool --policy-arn arn:aws:iam::xxxxxxxxxxxx:policy/AllowCognitoCloudwatchLogs
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;import csv to user pool&lt;/h3&gt;
&lt;p&gt;create csv&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name,given_name,family_name,middle_name,nickname,preferred_username,profile,picture,website,email,email_verified,gender,birthdate,zoneinfo,locale,phone_number,phone_number_verified,address,updated_at,cognito:mfa_enabled,cognito:username
,,,,,,,,,dummy@example.com,true,,,,,,false,,,false,import001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;import it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp create-user-import-job --user-pool-id ap-northeast-1_xxxxxxxxx --job-name import_job --cloud-watch-logs-role-arn arn:aws:iam::xxxxxxxxxxxx:role/service-role/Cognito-UserImport-Role
curl -v -T "PATH_TO_CSV_FILE" -H "x-amz-server-side-encryption:aws:kms" "PRE_SIGNED_URL"
aws cognito-idp describe-user-import-job --user-pool-id ap-northeast-1_xxxxxxxxx --job-id import-xxxxxxxxxx
aws cognito-idp start-user-import-job --user-pool-id ap-northeast-1_xxxxxxxxx --job-id import-xxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove unnecessary attributes and set user password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp list-users --user-pool-id ap-northeast-1_xxxxxxxxx
aws cognito-idp admin-delete-user-attributes --user-pool-id ap-northeast-1_xxxxxxxxx --username import001 --user-attribute-names 'email'
aws cognito-idp admin-set-user-password --user-pool-id ap-northeast-1_xxxxxxxxx --username import001 --password permanent_password --permanent
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;disable / enable / delete user&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp list-users --user-pool-id ap-northeast-1_xxxxxxxxx --filter 'username="import001"'
aws cognito-idp admin-disable-user --user-pool-id ap-northeast-1_xxxxxxxxx --username import001
aws cognito-idp admin-enable-user  --user-pool-id ap-northeast-1_xxxxxxxxx --username import001
aws cognito-idp admin-delete-user  --user-pool-id ap-northeast-1_xxxxxxxxx --username import001
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;user pool client&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cognito-idp list-user-pool-clients --user-pool-id ap-northeast-1_xxxxxxxxx
aws cognito-idp create-user-pool-client --user-pool-id ap-northeast-1_xxxxxxxxx --client-name test-user-pool-client
aws cognito-idp describe-user-pool-client --user-pool-id ap-northeast-1_xxxxxxxxx --client-id xxxxxxxxxxxxxxxxxxxxxxxxx
aws cognito-idp delete-user-pool-client --user-pool-id ap-northeast-1_xxxxxxxxx --client-id xxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;example&lt;/h3&gt;
&lt;p&gt;https://ashura156.hatenablog.com/entry/20180309/1520586674&lt;/p&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220817.html</guid><pubDate>Wed, 17 Aug 2022 00:00:00 GMT</pubDate></item><item><title>advanced cloudformation</title><link>https://mnod.github.io/posts/20220810.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;create an initial cloudformation stack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://template-000.yml
aws cloudformation create-stack --stack-name mystack  --template-body file://mystack-000.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation describe-stacks --stack-name mystack 
aws cloudformation describe-stack-resources --stack-name mystack 
aws cloudformation describe-stack-events --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;change set&lt;/h3&gt;
&lt;p&gt;create change set after editing template file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation create-change-set --stack-name mystack --template-body file://mystack-001.yml --change-set-name mystack-001 --description 'create new Internet Gateway'
aws cloudformation list-change-sets --stack-name mystack 
aws cloudformation describe-change-set --stack-name mystack --change-set-name mystack-001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;execute the change set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation execute-change-set --stack-name mystack --change-set-name mystack-001
aws cloudformation list-change-sets --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;drift&lt;/h3&gt;
&lt;p&gt;detect stack drift after manual operation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation detect-stack-drift --stack-name mystack 
aws cloudformation describe-stack-resource-drifts --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create change set after editing template file to fit to current resource&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation create-change-set --stack-name mystack --template-body file://mystack-002.yml --change-set-name mystack-002 --description 'reflect manual operation'
aws cloudformation list-change-sets --stack-name mystack 
aws cloudformation describe-change-set --stack-name mystack --change-set-name mystack-002
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;execute the change set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation execute-change-set --stack-name mystack --change-set-name mystack-002
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove change set when the status is false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation delete-change-set --stack-name mystack --change-set-name mystack-002
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;import&lt;/h3&gt;
&lt;p&gt;create template file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ diff -u template.yml.orig template.yml
+Parameters:
+  ImageId:
+    Type: AWS::EC2::Image::Id
+  InstanceType:
+    Type: String
+  KeyName:
+    Type: AWS::EC2::KeyPair::KeyName
+  SecurityGroupId:
+    Type: AWS::EC2::SecurityGroup::Id
+  SubnetId:
+    Type: AWS::EC2::Subnet::Id
+

+  ## EC2 instance
+  EC2Instance1:
+    Type: AWS::EC2::Instance
+    DeletionPolicy: Retain
+    Properties: 
+      InstanceType: !Ref InstanceType
+      ImageId: !Ref ImageId
+      KeyName: !Ref KeyName
+      NetworkInterfaces: 
+        - DeviceIndex: "0"
+          GroupSet:
+            - !Ref SecurityGroupId
+          SubnetId: !Ref SubnetId
+      BlockDeviceMappings: 
+        - DeviceName: "/dev/xvda"
+          Ebs: 
+            VolumeType: "gp3"
+            VolumeSize: "8"
+      CreditSpecification:
+        CPUCredits: "standard"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create parameter file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . parameters.json
[
  {
    "ParameterKey": "ImageId",
    "ParameterValue": "ami-007daaef51c7530e7"
  },
  {
    "ParameterKey": "InstanceType",
    "ParameterValue": "t4g.nano"
  },
  {
    "ParameterKey": "KeyName",
    "ParameterValue": "testkey"
  },
  {
    "ParameterKey": "SecurityGroupId",
    "ParameterValue": "sg-xxxxxxxxxxxxxxxxx"
  },
  {
    "ParameterKey": "SubnetId",
    "ParameterValue": "subnet-xxxxxxxxxxxxxxxxx"
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a resources-to-import file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . import.json 
[
  {
    "ResourceType": "AWS::EC2::Instance",
    "LogicalResourceId": "EC2Instance1",
    "ResourceIdentifier": {
      "InstanceId": "i-xxxxxxxxxxxxxxxxx"
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create change set for import and execute it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation validate-template --template-body file://template.yml
$ aws cloudformation create-change-set --stack-name mystack --change-set-name import-ec2instance --change-set-type IMPORT --resources-to-import file://import.json --template-body file://template.yml --parameters file://parameters.json
$ aws cloudformation describe-change-set --change-set-name import-ec2instance --stack-name mystack
$ aws cloudformation execute-change-set  --change-set-name import-ec2instance --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation describe-stacks --stack-name mystack
$ aws cloudformation describe-stack-events --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;detect stack drift&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation detect-stack-drift --stack-name mystack
$ aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id xxxxxxxxxxxxx-xxxx-xxxx-xxxxxxxxxxx
$ aws cloudformation describe-stack-resource-drifts --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If any drift exist, edit stack template to fit to current resource and create and execute change set.&lt;/p&gt;
&lt;p&gt;after that, change deletion policy to &lt;code&gt;Delete&lt;/code&gt; and update stack if needed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation update-stack --stack-name mystack --template-body file://template.yml --parameters file://parameters.json
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220810.html</guid><pubDate>Wed, 10 Aug 2022 00:00:00 GMT</pubDate></item><item><title>ami</title><link>https://mnod.github.io/posts/20220808.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;create AMI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 create-image --description 'backup ami of test server' --instance-id i-xxxx --name 'backup ami of test server' --no-reboot
aws ec2 deregister-image --image-id ami-xxxx 
aws ec2 describe-snapshots --owner-id xxxx --query 'Snapshots[?contains(Description, `ami-xxxx`)]'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create an instance with AMI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 run-instances \
--image-id ami-xxxx \
--instance-type t4g.nano \
--key-name testkey \
--security-group-ids sg-xxxx \
--subnet-id subnet-xxxx \
--credit-specification 'CpuCredits=standard' \
--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=copied_instance}]' \
--associate-public-ip-address
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;delete AMI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 deregister-image --image-id ami-xxxx 
aws ec2 describe-snapshots --owner-id xxxx --query 'Snapshots[?contains(Description, `ami-xxxx`)].SnapshotId'
aws ec2 delete-snapshot --snapshot-id snap-xxxx
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220808.html</guid><pubDate>Mon, 08 Aug 2022 00:00:00 GMT</pubDate></item></channel></rss>