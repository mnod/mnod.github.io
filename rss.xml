<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log</title><link>https://mnod.github.io/</link><description>tech log</description><atom:link href="https://mnod.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sat, 16 Oct 2021 09:14:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>riding bicycle</title><link>https://mnod.github.io/posts/20211014.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;間違いだらけの自転車の乗り方&lt;/p&gt;
&lt;h2&gt;「チャリは全部同じ。短い距離ですぐにつかれる」は誤り&lt;/h2&gt;
&lt;p&gt;まず、チャリ(またはチャリンコ)という呼び方は、侮蔑を含んでいるように感じる。正当に評価していない感じがして、好きではない。&lt;/p&gt;
&lt;p&gt;自転車は車種や乗り方次第で、いろんな可能性がある。
自分の目的に合わない車種、体に合わないサイズを選択したり、不適切なセッティングでは、自転車の可能性を発揮できない。
シティサイクルでも車道を颯爽と走りたいなら、(セミ)アップタイプのハンドルではなく、前傾姿勢がとりやすいバータイプを選択すると、案外と早く遠くまで快適に走ることができるだろう。&lt;/p&gt;
&lt;h2&gt;「自転車は欠点ばかりで、良いところがなにもない」は誤り&lt;/h2&gt;
&lt;p&gt;上り坂、向かい風、雨、雪がつらいのは否定できない。
昨今の電動アシスト付き自転車を使えば、上り坂、向かい坂の辛さは解消する。
雨については、高機能のレインウェアを利用することで、不快さをある程度和らげることができる(傘は禁止)&lt;/p&gt;
&lt;p&gt;自転車の利点の一つとして、走行中の空気感、季節感を体全体で感じることができることがあげられる。
木々の緑、花の色、空や雲の色を視覚に捉え、人々の声、鳥や無視の鳴き声を聴覚で聞き、花の香りを嗅覚で感じ、路面の凹凸を触感で感じることができる。
これはバイクでもある程度までなら可能だろうが、自動車では完全に不可能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;運動になり健康によい。&lt;/li&gt;
&lt;li&gt;燃料不要で人力だけで走行することができる。排気ガス、エンジン音を出さない。タイヤノイズはとても小さい。&lt;/li&gt;
&lt;li&gt;総重量が軽いので生産・リサイクル・破棄の環境負荷が低い。保守で交換が必要となるパーツも小さく、トータルでエコ。&lt;/li&gt;
&lt;li&gt;道路上での一台あたり占有面積が狭く、輸送効率が良い。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;「世間には自動車という乗り物があるのに、自転車に乗る人の気持ちが理解できない」は残念の極み&lt;/h2&gt;
&lt;p&gt;自転車に乗れば自転車に乗る人の気持ちが理解できると思うので、まずは自分で法令を守って乗ってみることをおすすめする。
自転車に乗る習慣が無いという方は、まずは以下のような場面で、自転車を選択するといいかも。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有酸素運動を始めたいが、ジョギングは膝や腰が不安。プールはお金がかかる。&lt;/li&gt;
&lt;li&gt;徒歩で行くには時間がかかる・体力的につらい距離の移動。&lt;/li&gt;
&lt;li&gt;公共交通機関で行くと乗り換えがめんどくさい。バス代を節約したい。&lt;/li&gt;
&lt;li&gt;自動車で行くと混雑、道が狭い、駐車場探しがめんどくさい。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;「自転車は歩道を走るものだから、歩行者と同じ」は誤り&lt;/h2&gt;
&lt;p&gt;自転車は車両なので、車道を走るもの。断じて歩行者と同じではない。
歩行者であるにせよ車両であるにせよ、公道を通行するためには法令にしたがう必要がある。
自動車のように、駐めてはいけないところに駐車したり、止まるべきところで止まらなかったり、交通弱者を蹴散らして走行したり、通行してはいけないところを通行するようなことは、あってはならない。&lt;/p&gt;
&lt;p&gt;基本的に車道を、左側の端に寄って通行する。(左側の端を走る、というのは誤り)&lt;/p&gt;
&lt;h2&gt;「ベルを鳴らして、前を歩く歩行者をどかせた」は誤り&lt;/h2&gt;
&lt;p&gt;道交法で、ベルを鳴らさなければならないと定められているとき以外は、ベルを鳴らしてはいけない。
警笛鳴らせの標識がある場所ではベルを鳴らさなければならない。
また、危険を避ける目的の時はベルを鳴らしてもよいが、前に歩行者がいるなら、自転車が速度を落とせばよいだけなので、「危険を避けるため」には該当しない。
気づいてもらいたい目的なら優しく声かけをすればいい。
「歩行者にとって、邪魔で危ない存在なのは自転車である」という視点は忘れてはいけないl。&lt;/p&gt;
&lt;p&gt;自動車にクラクションをならされることがよくあるだろうが、それは自動車による違法行為。自動車が違法行為をしているからといって、違法行為の真似をしてはダメ。&lt;/p&gt;
&lt;h2&gt;「クッション性を高めるためにタイヤの気圧を下げる」は誤り&lt;/h2&gt;
&lt;p&gt;空気圧が低いと接地面積が増えて抵抗が増し、進むのに余計な力が必要となる、またパンクの原因となる。
タイヤの空気圧は適正な気圧にする。(指でタイヤを力強く押しても簡単にはへこまないくらい)&lt;/p&gt;
&lt;h2&gt;「両足が地面にべったりとつかないと危険なので、サドルは極力低くしている」は誤り&lt;/h2&gt;
&lt;p&gt;地面に両足がべったり付く高さはペダルを回すのに適してない。
ペダルが一番下に来たとき、膝が軽く曲がるくらいにサドルを上げると、快適にペダルを回せる。
停車時にトップチューブにまたがる形で立てば、サドルが高くて地面に足に地面がつかないという問題はなくなる。
歩道を走行すると横から出てくる自動車などに邪魔されるなど咄嗟に止まらざるをえない場面がある。
車道を走れば、信号・一時停止・安全確認等以外では咄嗟に止まらざるをえなくなる場面は少なくなる。&lt;/p&gt;
&lt;p&gt;運転していて危険だというのは、サドルの高さや足つきとは別の問題。&lt;/p&gt;
&lt;h2&gt;「ペダルはたくさんこぐとつかれるから、ゆっくりこげばすむように、一番重いギアにしている」は誤り&lt;/h2&gt;
&lt;p&gt;ペダルを足で上から下に踏みつけるだけの動きだと考えて動かしていると、効率が悪い。
ペダルは円を描くように動くのだから、回すことを意識する。
また、上り坂も平地でも足の回転数を変えないようにペダルを回すのが疲れにくい効率の良い乗り方。
平地でクルクル回し、上り坂ではギアを軽くして同じようにクルクル回すようにする。&lt;/p&gt;
&lt;h2&gt;「自転車のメンテは難しそうなので自分でやったことがない」はもったいない。&lt;/h2&gt;
&lt;p&gt;たしかに難しいところはあるけど、自分でできるところは自分でやると愛着もわくと思う。
空気入れは店頭でもできるけど、空気入れを買って自分でやろう。こまめに空気を補充して快適な走行を。&lt;/p&gt;
&lt;p&gt;また、パンク修理、スポーツタイプならさらに、チューブ・タイヤ交換はできるようになっておくと心強い。
パンク修理キットは、１００円ショップでも購入することができる。&lt;/p&gt;
&lt;h2&gt;「自動車社会において、車道を走る自転車は邪魔者である」は誤り&lt;/h2&gt;
&lt;p&gt;欧州の先進国に止まらず、米国の大都市においても自動車よりも自転車を優先する取り組みが始まっている。
本邦においても、車道を減らす取り組みが報道されている。
自動車に依存していると忘れられがちなのかもしれないが、自動車がいつでもどこでも優先されるというのは都合のよい手前勝手な傲慢な幻想にすぎない。&lt;/p&gt;&lt;/div&gt;</description><category>lifestyle</category><guid>https://mnod.github.io/posts/20211014.html</guid><pubDate>Sat, 16 Oct 2021 00:00:00 GMT</pubDate></item><item><title>ansible vault</title><link>https://mnod.github.io/posts/20210923.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;create a vault file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault create test
New Vault password: 
Confirm New Vault password: 
:
:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault view test
Vault password: 
test
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ cat test 
$ANSIBLE_VAULT;1.1;AES256
34373931643530353734633238383738363430616366366463653631316362353730613165316464
3834656662626430306662333038656263613139373036640a303131396539353663383932323133
63316564623264323434326138623737326463633830623465373131646134616662363565656132
3165616239303564330a646436643339303665336333363530346636666339643561336565393434
3766
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use vault-id option for password instead of stdin.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault view --vault-id test@prompt test
Vault password (test): 
test
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ cat vaultpass.test 
password

$ ansible-vault view --vault-id test@vaultpass.test test
test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also encrypt/decrpt any file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault decrypt --vault-id test@vaultpass.test test
Decryption successful

$ cat test 
test

$ ansible-vault encrypt --vault-id test@vaultpass.test test
Encryption successful
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;example for encrypt var file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ./roles/test/vars/main.yml 
target: ansible_os_family

$ ansible-vault encrypt --vault-id test@vaultpass.test ./roles/test/vars/main.yml 
Encryption successful

$ cat ./roles/test/vars/main.yml 
$ANSIBLE_VAULT;1.2;AES256;test
33653839336162646466373262663965636561366464643634643431633639343437633166636137
3236636535383832383932353865396630313266366264360a363134333532393038396561323137
30643734663961363561666461326362373035623131663637383636346633393737636234316163
3463663838626334660a616564343730343561656335343534353161666430313731376631623634
65643135323666303430616331666165656131373639393936333731626131653764

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ansible-playbook example using encrypted file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ./roles/test/tasks/main.yml 
- name: print ansible facts
  debug:
    var: "{{ target }}"

$ cat hosts 
[test]
localhost ansible_connection=local

$ ansible-playbook -i hosts --vault-id test@vaultpass.test --list-tasks test.yml 

playbook: test.yml

  play #1 (test): ansible vault test    TAGS: []
    tasks:
      test : print ansible facts    TAGS: []


$ ansible-playbook -i hosts --vault-id test@vaultpass.test test.yml 

PLAY [ansible vault test] *****************************************************************************************************

TASK [Gathering Facts] ********************************************************************************************************
ok: [localhost]

TASK [test : print ansible facts] *********************************************************************************************
ok: [localhost] =&amp;gt; {
    "ansible_os_family": "Debian"
}

PLAY RECAP ********************************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>ansible</category><guid>https://mnod.github.io/posts/20210923.html</guid><pubDate>Thu, 23 Sep 2021 00:00:00 GMT</pubDate></item><item><title>squid bump</title><link>https://mnod.github.io/posts/20210610.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;On debian if you want to analyze or cache the content of the ssl traffic with squid, you have to buid your own squid.
This is a sample to build squid using apt source package.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

WORKDIR /tmp/buildwork
RUN echo 'deb-src http://deb.debian.org/debian buster main' &amp;gt;&amp;gt; /etc/apt/sources.list \
&amp;amp;&amp;amp; apt-get update \
&amp;amp;&amp;amp; apt install --no-install-recommends -y dpkg-dev devscripts build-essential fakeroot libssl-dev libldap2-dev libpam0g-dev libdb-dev cdbs libsasl2-dev debhelper libcppunit-dev libkrb5-dev comerr-dev libcap2-dev libecap3-dev libexpat1-dev libxml2-dev pkg-config libnetfilter-conntrack-dev nettle-dev libgnutls28-dev dh-apparmor ed libdbi-perl libltdl-dev lsb-release libpopt0 logrotate squid-langpack \
&amp;amp;&amp;amp; apt source squid \
&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

RUN sed -i.bak -e '/--with-gnutls$/ s/$/ --with-openssl --enable-ssl --enable-ssl-crtd/' squid-4.6/debian/rules \
&amp;amp;&amp;amp; squid-4.6/configure \
&amp;amp;&amp;amp; cd squid-4.6 \
&amp;amp;&amp;amp; debuild -us -uc -b \
&amp;amp;&amp;amp; dpkg -i ../squid_*.deb ../squid-common_*.deb \
&amp;amp;&amp;amp; mkdir -p /var/spool/squid /etc/squid/ssl_cert &amp;amp;&amp;amp; chown proxy:proxy /var/spool/squid \
&amp;amp;&amp;amp; cd /tmp &amp;amp;&amp;amp; rm -rf /tmp/buildwork

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf
COPY server.crt /etc/squid/ssl_cert/server.crt
COPY server.key /etc/squid/ssl_cert/server.key

CMD chmod 600 /etc/squid/ssl_cert/server.key \
&amp;amp;&amp;amp; if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; fi \
&amp;amp;&amp;amp; if [ ! -d /var/spool/squid/ssl_db ]; then /usr/lib/squid/security_file_certgen -c -s /var/spool/squid/ssl_db -M 20MB ; chown -R proxy. /var/spool/squid/ssl_db ; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
acl intermediate_fetching transaction_initiator certificate-fetching
http_access allow intermediate_fetching
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128 ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB cert=/etc/squid/ssl_cert/server.crt key=/etc/squid/ssl_cert/server.key
ssl_bump stare all
sslproxy_cert_error allow all
sslcrtd_children 3 startup=1 idle=1
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have a CA file and private key for it, you need create them.
When you already have them, I think you can use intermediate CA signed by your own CA.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout server.key -out server.crt -subj "/CN=192.168.xxx.xxx" -days 3650
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
'--with-openssl'
'--enable-ssl'
'--enable-ssl-crtd'
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
:
:
* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384
* ALPN, server did not agree to a protocol
* Server certificate:
*  subject: C=US; ST=California; L=Mountain View; O=Google LLC; CN=www.google.com
*  start date: May 10 04:04:06 2021 GMT
*  expire date: Aug  2 04:04:05 2021 GMT
*  issuer: CN=192.168.xxx.xxx
*  SSL certificate verify result: self signed certificate in certificate chain (19), continuing anyway.
} [5 bytes data]
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: www.google.com
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;gt; 
{ [5 bytes data]
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Wed, 09 Jun 2021 00:22:42 GMT
&amp;lt; Expires: -1
&amp;lt; Cache-Control: private, max-age=0
&amp;lt; Content-Type: text/html; charset=ISO-8859-1
&amp;lt; P3P: CP="This is not a P3P policy! See g.co/p3phelp for more info."
&amp;lt; Server: gws
&amp;lt; X-XSS-Protection: 0
&amp;lt; X-Frame-Options: SAMEORIGIN
&amp;lt; Set-Cookie: 1P_JAR=2021-06-09-00; expires=Fri, 09-Jul-2021 00:22:42 GMT; path=/; domain=.google.com; Secure
&amp;lt; Set-Cookie: NID=216=ptf-d_HIPGOAjnEf-gbmRDmIg3JnEfjqRRnQghOkyFHrdLy5fXGOhydj5jBHonqOlP5WCzPIKX3kIkdizOXCQ13t4moqXwr-UoOWiRXgYaAkx6gyqe03hjM_hwfin5plUuG3NClONGvvFJo5Mqvar7GFYrSFYOMVCXMXvTJ0d4M; expires=Thu, 09-Dec-2021 00:22:42 GMT; path=/; domain=.google.com; HttpOnly
&amp;lt; Alt-Svc: h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
&amp;lt; Accept-Ranges: none
&amp;lt; Vary: Accept-Encoding
&amp;lt; X-Cache: MISS from bd2e0fa8b95e
&amp;lt; X-Cache-Lookup: MISS from bd2e0fa8b95e:3128
&amp;lt; Transfer-Encoding: chunked
&amp;lt; Via: 1.1 bd2e0fa8b95e (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt; 
{ [5 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample log of other connections&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1622798061.167    833 192.168.xxx.xxx NONE/200 0 CONNECT dl.fedoraproject.org:443 - HIER_DIRECT/38.145.60.22 -
1622798061.539    260 192.168.xxx.xxx TCP_MISS/200 16108 GET https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm - HIER_DIRECT/38.145.60.22 application/x-rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1622798109.029    496 192.168.xxx.xxx NONE/200 0 CONNECT dl.fedoraproject.org:443 - HIER_DIRECT/38.145.60.22 -
1622798109.130      1 192.168.xxx.xxx TCP_MEM_HIT/200 16115 GET https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm - HIER_NONE/- application/x-rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210610.html</guid><pubDate>Thu, 10 Jun 2021 00:00:00 GMT</pubDate></item><item><title>squid nobump</title><link>https://mnod.github.io/posts/20210608.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;The squid packages of debian doesn not support &lt;a href="https://wiki.squid-cache.org/Features/SslBump"&gt;sslbump&lt;/a&gt;.
It only redirects ssl traffic. We can not analyze or cache the content of the ssl traffic.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

RUN apt-get update \
&amp;amp;&amp;amp; apt install -y squid \
s&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf

CMD if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; sleep 2; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
(result will be nothing)
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTP server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
*   Trying 2001:df0:25e:e100::3...
* TCP_NODELAY set
* Connected to ftp.yz.yamagata-u.ac.jp (2001:df0:25e:e100::3) port 80 (#0)
&amp;gt; GET /pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:59:01 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Upgrade: h2,h2c
&amp;lt; Connection: Upgrade
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt;
{ [331 bytes data]
* Connection #0 to host ftp.yz.yamagata-u.ac.jp left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3128/ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
* Uses proxy env variable http_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
&amp;gt; GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:58:26 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt; X-Cache: MISS from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: MISS from e3b21f81fdd2:3128
&amp;lt; Via: 1.1 e3b21f81fdd2 (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt;
{ [331 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when cache hit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; Age: 358
&amp;lt; X-Cache: HIT from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: HIT from e3b21f81fdd2:3128
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1623026732.001    265 192.168.xxx.xxx TCP_MISS/200 685 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_DIRECT/133.24.248.17 -
1623027089.025      0 192.168.xxx.xxx TCP_MEM_HIT/200 693 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_NONE/- -
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -k -s https://www.google.com/ -o /dev/null 
*   Trying 142.250.196.132...
* TCP_NODELAY set
* Connected to www.google.com (142.250.196.132) port 443 (#0)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null 
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port xxxxx (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log. The ssl connection is just tunneled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1622950724.481    170 192.168.xxx.xxx TCP_TUNNEL/200 18439 CONNECT www.google.com:443 - HIER_DIRECT/172.217.175.4 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210608.html</guid><pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate></item><item><title>devpi-server</title><link>https://mnod.github.io/posts/20210605.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://pypi.org/project/devpi-server/"&gt;devpi-server&lt;/a&gt; is a server for private package indexes and PyPI caching.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

ENV DEBIAN_FRONTEND noninteractive
RUN apt update &amp;amp;&amp;amp; \
    apt install --no-install-recommends -y \
    python3-pip python3-pip python3-setuptools python3-dev build-essential libffi-dev &amp;amp;&amp;amp; \
    pip3 install devpi-server

EXPOSE 3141
VOLUME ["/var/cache/devpi"]

CMD chmod 777 /var/cache/devpi &amp;amp;&amp;amp; \
    devpi-server \
        --serverdir /var/cache/devpi \
        --host 0.0.0.0 --port 3141
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t devpi-server:buster-slim .
$ sudo docker tag devpi-server:buster-slim devpi-server:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -d -p 3141:3141 -v /mnt/devpi:/var/cache/devpi devpi-server:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://192.168.xxx.xxx:3141/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;how to use devpi-server&lt;/h3&gt;
&lt;p&gt;specify it in a command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip3 install --trusted-host 192.168.xxx.xxx --index-url http://192.168.xxx.xxx:3141/root/pypi matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ PIP_TRUSTED_HOST=192.168.xxx.xxx PIP_INDEX_URL=http://192.168.xxx.xxx:3141/root/pypi pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for docker build, write below in a Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ARG PIP_TRUSTED_HOST
ARG PIP_INDEX_URL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then specify devpi-server at build-arg parameter in docker run command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg PIP_TRUSTED_HOST=192.168.xxx.xxx --build-arg PIP_INDEX_URL=http://192.168.xxx.xxx:3141/root/pypi -t imagename .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>python</category><guid>https://mnod.github.io/posts/20210605.html</guid><pubDate>Sat, 05 Jun 2021 00:00:00 GMT</pubDate></item><item><title>ses</title><link>https://mnod.github.io/posts/20210428.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;h3&gt;aws command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ses list-identities
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;destination.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "ToAddresses": [
    "test@example.com"
  ],
  "CcAddresses": [],
  "BccAddresses": []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;message.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Subject": {
    "Data": "test mail",
    "Charset": "UTF-8"
  },
  "Body": {
    "Text": {
      "Data": "Hi.\n\nThis is a test mail.",
      "Charset": "UTF-8"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses send-email --from noreply@example.net --destination file://destination.json --message file://message.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "TemplateName": "testtemplate",
  "SubjectPart": "Greetings, {{name}}!",
  "TextPart": "Dear {{name}},\n\nYour favorite animal is {{favoriteanimal}}."
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses list-templates
aws ses create-template --template file://template.json
aws ses get-template --template testtemplate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template-parameters.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "name": "john",
  "favoriteanimal": "cat"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses test-render-template --template-name testtemplate --template-data file://template-data.json
aws ses send-templated-email --source noreply@example.net --destination file://destination.json --template testtemplate --template-data file://template-data.json
aws ses delete-template --template-name testtemplate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;python test script&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/usr/python

import boto3
import json

fromaddr = 'noreply@example.net'
destaddr = 'test@example.com'
destination = {
    'ToAddresses': [
        destaddr,
    ]
}

client = boto3.client('ses')

## send email
response = client.send_email(
    Source = fromaddr,
    Destination = destination,
    Message={
        'Subject': {
            'Data': 'test mail',
            'Charset': 'UTF-8'
        },
        'Body': {
            'Text': {
                'Data': 'Hi.\n\nThis is a test mail',
                'Charset': 'UTF-8'
            },
        }
    }
)
print(response)

templates = client.list_templates()
for template in templates['TemplatesMetadata']:
    response = client.get_template(
        TemplateName=template['Name']
    )
    print(response['Template'])

## create template
response = client.create_template(
    Template={
        "TemplateName": "testtemplate",
        "SubjectPart": "Greetings, {{name}}!",
        "TextPart": "Dear {{name}},\n\nYour favorite animal is {{favoriteanimal}}."
    }
)
templatedata = {
    "name": "john",
    "favoriteanimal": "cat"
}

## send templated email
response = client.send_templated_email(
    Source=fromaddr,
    Destination=destination,
    Template='testtemplate',
    TemplateData=json.dumps(templatedata)
)
print(response)

## delete template
response = client.delete_template(
    TemplateName='testtemplate'
)
print(response)

templates = client.list_templates()
for template in templates['TemplatesMetadata']:
    response = client.get_template(
        TemplateName=template['Name']
    )
    print(response['Template'])

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20210428.html</guid><pubDate>Wed, 28 Apr 2021 00:00:00 GMT</pubDate></item><item><title>route53</title><link>https://mnod.github.io/posts/20210422.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;h3&gt;aws command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws route53 list-hosted-zones
aws route53 get-hosted-zone --id /hostedzone/xxxxxxxxxxxxxxxxxxxxx

aws route53 list-resource-record-sets   --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --query "ResourceRecordSets[?Name == 'example.example.net.']"
aws route53 test-dns-answer --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --record-name "example.example.net" --record-type "A"

aws route53 change-resource-record-sets  --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --change-batch file://create.json
aws route53 get-change --id /change/xxxxxxxxxxxxxxxxxxxx
aws route53 change-resource-record-sets  --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --change-batch file://delete.json
aws route53 get-change --id /change/xxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Changes": [
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "example.example.net",
        "Type": "A",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxx.xxx.xxx.xxx"
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Changes": [
    {
      "Action": "DELETE",
      "ResourceRecordSet": {
        "Name": "example.example.net",
        "Type": "A",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxx.xxx.xxx.xxx"
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;python sample script&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python2
import boto3
import time

client = boto3.client('route53')
zones = client.list_hosted_zones()

for zone in zones['HostedZones']:
    id =zone['Id']
    name = zone['Name']
    #print(client.get_hosted_zone(Id=id).get('HostedZone'))
    for set in client.list_resource_record_sets(HostedZoneId=id).get('ResourceRecordSets'):
        print(set)
    #action = 'CREATE'
    action = 'DELETE'
    address = 'xxx.xxx.xxx.xxx'

    batch = {
        'Changes': [
            {
                'Action': action,
                'ResourceRecordSet': {
                    'Name': 'example.%s' % name,
                    'Type': 'A',
                    'TTL': 3600,
                    'ResourceRecords': [
                        {
                            "Value": address
                        },
                    ],
                }
            },
        ]
    }
    response = client.change_resource_record_sets(
        HostedZoneId=id,
        ChangeBatch=batch
    )
    print(response)
    responseid = response['ChangeInfo']['Id']
    status = response['ChangeInfo']['Status']
    while ( status != 'INSYNC'):
        response = client.get_change(Id=responseid)
        status = response['ChangeInfo']['Status']
        time.sleep(30)
    else:
        print(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;cloud formation sample stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://route53.yml
aws cloudformation create-stack --template-body file://route53.yml --parameters file://parameters.json --stack-name route53test
aws cloudformation describe-stack-events --stack-name route53test
aws cloudformation list-stack-resources --stack-name route53test
aws cloudformation delete-stack --stack-name route53test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;route53.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters:
  HostedZoneId:
    Type: String
  Domain:
    Type: String
  Address:
    Type: String
Resources:
  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : 
         Ref: HostedZoneId
      Name:  
        Fn::Join: 
            - '.'
            - - 'example'
              - !Ref Domain
      ResourceRecords:
      - Ref: Address
      TTL: '3600'
      Type: A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;parameters.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  {
      "ParameterKey": "Address",
      "ParameterValue": "xxx.xxx.xxx.xxx"
  },
  {
      "ParameterKey": "HostedZoneId",
      "ParameterValue": "xxxxxxxxxxxxxxxxxxxxx"
  },
  {
      "ParameterKey": "Domain",
      "ParameterValue": "example.net"
  }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20210422.html</guid><pubDate>Thu, 22 Apr 2021 00:00:00 GMT</pubDate></item><item><title>Stay at home</title><link>https://mnod.github.io/posts/20210411.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;不要不急の外出自粛が求められている中、他の多くの方と同様、自宅で過ごす時間が長くなっている。&lt;/p&gt;
&lt;p&gt;おかげで通勤が不要になり、通勤時間にとられていた時間が自分の好きに扱えるようになった。
同時に、通勤で消費していたカロリーの消費機会が失われてしまった。&lt;/p&gt;
&lt;p&gt;そのせいもあり、この春の人間ドッグで、見事にメタボ検診に引っかかってしまった。
内臓脂肪を減らし、血圧を下げ、血中コレステロール濃度を下げ、腹囲と体重を減らしていく努力が、今の自分には切実に求められている。
そのためには食後血糖値上昇の山を低くし、カロリー収支をマイナスにし、脂肪を減らし筋肉量を増やしていかなくてはならない。
具体的な取り組みは以下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;運動: 朝食後、始業時間までの間のウォーキング。&lt;/li&gt;
&lt;li&gt;食事: 夕食では野菜を多くとり、炭水化物を減らす。脂質を減らす。朝昼晩の三食。&lt;/li&gt;
&lt;li&gt;できていないこと: 日次の体重測定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保健指導員におだてられながら、取り組みを続けていきたい。&lt;/p&gt;
&lt;p&gt;そうは言っても、自宅でくつろぐ時間は何物にも代えがたい。そんなこんなで自宅のメディア視聴・聴取環境の充実をはかっている。&lt;/p&gt;
&lt;h3&gt;spotify&lt;/h3&gt;
&lt;p&gt;Linuxデスクトップで常時Spotifyアプリを立ち上げておいて、AndroidタブレットにインストールしたSpotifyアプリからコントロールするという使い方をしている。
音声はアンプを接続したRaspberry pi に Pulseaudio で飛ばしている。(スマホのスピーカーでずっと聞いていると耳が痛くなる。大きなスピーカーだと大丈夫。)&lt;/p&gt;
&lt;p&gt;サブスク購入していないが、&lt;a href="https://japanese.engadget.com/spotify-060049978.html"&gt;タブレット・デスクトップからの聴取の制限解除&lt;/a&gt; があったおかげで、垂れ流しBGM としてとても使いやすくなった。
Spotifyは日本上陸前から待ちわびていて、上陸後すぐくらいから使ってきた。このアップデートはまじで嬉しい。CM有り、シャッフル必須であっても、無料で利用できるのは、すごく助かる。&lt;/p&gt;
&lt;h3&gt;minidlna&lt;/h3&gt;
&lt;p&gt;蓄積しているデータを何らかの upnp/dlna クライアントで再生できるように。&lt;/p&gt;
&lt;h3&gt;shairport-sync&lt;/h3&gt;
&lt;p&gt;オープンソースの AirPlay サーバ。iPhone のアプリの音声を大きなスピーカーで聞きたいときに。&lt;/p&gt;
&lt;h3&gt;Fire TV Stick 4K&lt;/h3&gt;
&lt;p&gt;Amazon Prime Video に加入していないし、4K ディスプレイは持っていない。けど、便利に使っている。
アプリストアからいろんなアプリを入れられる。Android系なので、アプリもそこそこそろっており、いろいろ使える。&lt;/p&gt;
&lt;p&gt;ぶっちゃけ Youtube 見るのに最強。&lt;/p&gt;&lt;/div&gt;</description><category>lifestyle</category><category>software</category><guid>https://mnod.github.io/posts/20210411.html</guid><pubDate>Sun, 11 Apr 2021 00:00:00 GMT</pubDate></item><item><title>Work from home</title><link>https://mnod.github.io/posts/20210409.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;不要不急の外出自粛が求められている中、他の多くの方と同様、自宅で勤務する日々が続いている。&lt;/p&gt;
&lt;p&gt;PCは趣味の一つではあるものの、趣味のためにあれこれ購入するのもためらわれ、これまで自宅の作業環境はあまり整っていなかった。
そのため、在宅勤務での作業効率はあまりよくなかった。これ幸いと？仕方がないので？これまで買わずに我慢していたものをいくつか買いそろえた(自腹)。&lt;/p&gt;
&lt;h3&gt;モニター&lt;/h3&gt;
&lt;p&gt;仕事で使っているのは、貸与されてる13.3型ノートPC。FHD対応だが、それだと私には字が小さく読みにくいため解像度を1600x900に設定して使っている。
会社では比較的大きな外部モニターを接続して使用していたのだが、自宅にあるのは15.6インチ 1366x796という小さなモニターしかなかった。
趣味のコンピュータの管理ではこのモニターで対応することができていたが、仕事用としては不足だった。&lt;/p&gt;
&lt;p&gt;これまでの突発的な在宅勤務ではこのモニターで凌いできたが、長期的に継続するとなると、もっと広いものでないと困る。&lt;/p&gt;
&lt;p&gt;そこで購入したのが15.6型 IPS液晶のFHDモバイルモニター。VESA対応。&lt;/p&gt;
&lt;p&gt;下記モニターアームを利用して、ノートPCと並べて使用している。13.3インチの 1600x900 と、15.6インチの1920x1080 は画素密度がかなり近いので、並べて使用していてあまり違和感があまりない。
貸与ノートPCはUSB Type-C非対応のため、HDMIとUSB(電源供給)の2本のケーブルで接続している。&lt;/p&gt;
&lt;p&gt;聞いたことのない海外社製品で、初回購入時には不良品が届いた。いったん返品して再度購入したら、今度は問題なし。1年間使用してきて、今のところ問題は出ていない。&lt;/p&gt;
&lt;h3&gt;モニターアーム&lt;/h3&gt;
&lt;p&gt;ノートPC台が付属している、安いデュアルアームのモニターアーム。
ノートPCとモニターを左右に並べることができ、目線の高さまで上げることができ、浮かすことによって机上にスペースができる、一石三鳥グッズ。&lt;/p&gt;
&lt;p&gt;安いので、あまり自由に調整することはできないけど、向きをあちこち動かす必要がないので特に困ることはない。これまでのところ、自分の用途では事足りている。&lt;/p&gt;
&lt;h3&gt;キーボード&lt;/h3&gt;
&lt;p&gt;メカニカル、ロープロファイル、リニア、87キーのキーボード。&lt;/p&gt;
&lt;p&gt;ここのところ、デスクトップのキーボードもノートPCのものに近いパンタグラフのキーボードを使っていた。
メンブレンのものを含めて、安かろう悪かろうなキーボードを渡り歩いてきたので、使い心地のよいまともな外付けキーボードを使うのは、PC98xxの頃以来かもしれない。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;US ASCII配列キーボードを試してもよさそうな方&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;これらにデメリットを感じない方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日本語入力/ローマ字入力の切り替えが[半角/全角]キー一発ではなくなる&lt;/li&gt;
&lt;li&gt;[無変換][変換][カタカナひらがな]キーが無い&lt;/li&gt;
&lt;li&gt;ローマ字入力しかできず、かな入力ができない&lt;/li&gt;
&lt;li&gt;[^][@][:] の入力に Shift が必要&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらにメリットを感じる方&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[無変換][変換][カタカナひらがな]キーが無い代わりに、スペースバーが長い。&lt;/li&gt;
&lt;li&gt;[半角/全角] の代わりに [`][‾] が割り当てられている&lt;/li&gt;
&lt;li&gt;[`] [=] を Shift なしで単独で入力できる。&lt;/li&gt;
&lt;li&gt;[']["]/[;][:][-][_] を Shift の有無で打ち分けることができる&lt;/li&gt;
&lt;li&gt;[Backspace][Enter][Shift(R)] がホームポジションに近い&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我々が日常利用するコンピュータのソフトウェアは米国で作られてきた。
そのため、USキーボードを使用すると、日本語キーボードだけを使用していては得ることができなかった、設計思想についての気づきを得られる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C のポインタ演算子 [&amp;amp;][*] は隣のキー&lt;/li&gt;
&lt;li&gt;vi の :コマンド は誤入力防止ではないか? (要Shift)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;USキーボードの大きな欠点の一つに、かな入力ができないことがある。
日常生活していく上で、ASCII文字の入力は必須であり、キー配列を覚えないことには不便で仕方ない。
ASCII文字のキー配列を覚えれば、IMEのローマ字入力機能を利用して日本語を入力することができる。&lt;/p&gt;
&lt;p&gt;ローマ字入力ができるなら、一定以上の速度が必要とならない限り、ひらがな入力は必須ではない。
ひらがな入力のためにはキー配列を覚えなければならず、学習コストが高い。
ひらがな入力に対するインセンティブやモチベーションが高くならないので、
ひらがな入力は少数派という状況はしばらく変わらないと思う。&lt;/p&gt;
&lt;p&gt;(スマホネイティブ世代の入力事情は考慮していない)&lt;/p&gt;
&lt;h3&gt;USBオーディオインタフェース&lt;/h3&gt;
&lt;p&gt;大層なものではない。3.5mm4極ジャックのみで、ボリュームボタン、ミュートボタンがあるだけの簡易なインタフェース。&lt;/p&gt;
&lt;p&gt;貸与ノートPCに直接イヤフォンマイクを繋げてWeb会議に参加すると、時々音声が聞きづらいと言われたことがあった。
Bluetoothのものも試したが、別の意味で音質の評判がよくなかった。&lt;/p&gt;
&lt;p&gt;いつものイヤフォンマイクをこのオーディオインタフェースに接続して使用するようにしてからは、特に音質が悪いと言われることがなくなった。&lt;/p&gt;
&lt;h3&gt;ヘッドフォン&lt;/h3&gt;
&lt;p&gt;Web会議ではカナル型イヤフォンマイクを使用しているのだが、耳栓用途でずっとつけていると耳が痛くなるようになった。
そこで、耳をいたわるためにオーバーヘッドの昔ながらの形の安価なヘッドフォンを購入した。&lt;/p&gt;
&lt;p&gt;有線とBluetoothに対応しているが、有線しか試していない。音質としては不満はない。カナル型イヤフォンとはちょっと違った感じ。&lt;/p&gt;
&lt;p&gt;眼鏡とは干渉しないのだけど、長時間つけていると(頭が大きいから?)頭が締め付けられて痛くなってしまう。&lt;/p&gt;
&lt;p&gt;ノイズ対策としては、あれこれ買って試すのではなく、ノイズを気にしない精神力を身に着けたほうが良いような気がしてきた。&lt;/p&gt;&lt;/div&gt;</description><category>lifestyle</category><guid>https://mnod.github.io/posts/20210409.html</guid><pubDate>Fri, 09 Apr 2021 00:00:00 GMT</pubDate></item><item><title>WSL2 installation</title><link>https://mnod.github.io/posts/20210407.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;I followed the document &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux Installation Guide for Windows 10&lt;/a&gt;
My environment is Windows 10 Pro 20H2 OS build 19042.685&lt;/p&gt;
&lt;p&gt;Run powershell.exe as administrator.
Then enable the Windows Subsystem for Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And enable Virtual Machine feature&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download the Linux kernel update package and install it.
- &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;WSL2 Linux kernel update package for x64 machines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Set WSL 2 as the default version&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Linux distribution from &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Microsoft Store&lt;/a&gt;
Then launch it.&lt;/p&gt;
&lt;p&gt;I could not launch it for a long time because of bug of COMODO Internet Security shown at &lt;a href="https://github.com/microsoft/WSL/issues/5329"&gt;WSL2 Converstion Failed with Error: 0x80041002 &lt;/a&gt;
&lt;a href="https://forums.comodo.com/news-announcements-feedback-cis/comodo-internet-security-2020-v12228012-released-t126945.0.html"&gt;COMODO released new version for fixing it&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Installing, this may take a few minutes...
Please create a default UNIX user account. The username does not need to match your Windows username.
For more information visit: https://aka.ms/wslusers
Enter new UNIX username: xxxx
New password:
Retype new password:
passwd: 
password updated successfully
Installation successful!

$ uname -a
Linux xxxxxxxxxxxxxxx 4.19.128-microsoft-standard #1 SMP Tue Jun 23 12:58:10 UTC 2020 x86_64 GNU/Linux

$ cat /etc/debian_version
10.8

$ df -k
Filesystem     1K-blocks     Used Available Use% Mounted on
/dev/sdb       263174212   280972 249455084   1% /
tmpfs            3161096        0   3161096   0% /mnt/wsl
tools          248559384 53031224 195528160  22% /init
none             3158696        0   3158696   0% /dev
none             3161096        4   3161092   1% /run
none             3161096        0   3161096   0% /run/lock
none             3161096        0   3161096   0% /run/shm
none             3161096        0   3161096   0% /run/user
tmpfs            3161096        0   3161096   0% /sys/fs/cgroup
C:\            248559384 53031224 195528160  22% /mnt/c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From next time, we can launch it with command 'debian'.
Also we can launch it with wsl command on command prompt or powershell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --list --verbose
NAME      STATE           VERSION
* Debian    Stopped         2
&amp;gt; wsl -d Debian
&amp;gt; wsl -d Debian -e uname -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can omit distribution name for the default one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl
&amp;gt; wsl -e uname -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can just execute bash shell or bash shell script as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; bash
&amp;gt; bash -c "echo uname -a &amp;gt; test.sh"
&amp;gt; bash -c "./test.sh"
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;export and import a distribution&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --export debian d:\debian.tar.gz
&amp;gt; wsl --import mydebian d:\wsl\ d:\debian.tar.gz
&amp;gt; wsl --list -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;set new distribution as a default one and set default user.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --set-default mydebian
&amp;gt; wsl
# If the user does not exist in this distribution, you have to create it.
echo -e "[user]\ndefault=myUsername" &amp;gt;&amp;gt; /etc/wsl.conf
exit
&amp;gt; wsl --shutdown
&amp;gt; wsl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete distribution&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --unregister debian-work
&amp;gt; wsl --list -v
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;install docker in wsl2 debian environment&lt;/h3&gt;
&lt;p&gt;We can install newest release as https://docs.docker.com/engine/install/debian/
But I prefered to install from debian package&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt update
sudo apt install --no-install-recommends docker.io
sudo service docker start
sudo service docker status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, I could not start dockerd.
I followed this flow https://github.com/microsoft/WSL/discussions/4872#discussioncomment-99164&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo touch /etc/fstab
sudo update-alternatives --set iptables  /usr/sbin/iptables-legacy
sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
sudo service docker start
sudo service docker status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Succeeded to start dockerd.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo docker run --rm -it debian:bullseye-slim
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;resolve domain name lookup failure problem&lt;/h3&gt;
&lt;p&gt;This workaround resolve domain name lookup failure problem on WSL2 and docker container.
https://github.com/microsoft/WSL/issues/4285#issuecomment-522201021&lt;/p&gt;
&lt;p&gt;Add these lines in /etc/wsl.conf on your distribution&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[network]
generateResolvConf = false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then shutdown wsl2 and restart your distribution&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --shutdown
&amp;gt; wsl --list -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recreate /etc/resolv.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo rm /etc/resolv.conf
$ echo "nameserver 1.1.1.1" &amp;gt; /etc/resolv.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then shutdown wsl2 and restart your distribution again&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --shutdown
&amp;gt; wsl --list -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Confirm your setting and domain name lookup on your distribution and docker container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat /etc/resolv.conf
$ curl -I www.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>windows</category><guid>https://mnod.github.io/posts/20210407.html</guid><pubDate>Wed, 07 Apr 2021 00:00:00 GMT</pubDate></item></channel></rss>