<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log</title><link>https://mnod.github.io/</link><description>tech log</description><atom:link href="https://mnod.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Fri, 09 Apr 2021 03:49:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Work from home</title><link>https://mnod.github.io/posts/20210409.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;不要不急の外出自粛が求められている中、他の多くの方と同様、自宅で勤務する日々が続いている。&lt;/p&gt;
&lt;p&gt;PCは趣味の一つではあるものの、趣味のためにあれこれ購入するのもためらわれ、これまで自宅の作業環境はあまり整っていなかった。
そのため、在宅勤務での作業効率はあまりよくなかった。これ幸いと？仕方がないので？これまで買わずに我慢していたものをいくつか買いそろえた(自腹)。&lt;/p&gt;
&lt;h3&gt;モニター&lt;/h3&gt;
&lt;p&gt;仕事で使っているのは、貸与されてる13.3型ノートPC。FHD対応だが、それだと私には字が小さく読みにくいため解像度を1600x900に設定して使っている。
会社では比較的大きな外部モニターを接続して使用していたのだが、自宅にあるのは15.6インチ 1366x796という小さなモニターしかなかった。
趣味のコンピュータの管理ではこのモニターで対応することができていたが、仕事用としては不足だった。&lt;/p&gt;
&lt;p&gt;これまでの突発的な在宅勤務ではこのモニターで凌いできたが、長期的に継続するとなると、もっと広いものでないと困る。&lt;/p&gt;
&lt;p&gt;そこで購入したのが15.6型 IPS液晶のFHDモバイルモニター。VESA対応。&lt;/p&gt;
&lt;p&gt;下記モニターアームを利用して、ノートPCと並べて使用している。13.3インチの 1600x900 と、15.6インチの1920x1080 は画素密度がかなり近いので、並べて使用していてあまり違和感があまりない。
貸与ノートPCはUSB Type-C非対応のため、HDMIとUSB(電源供給)の2本のケーブルで接続している。&lt;/p&gt;
&lt;p&gt;聞いたことのない海外社製品で、初回購入時には不良品が届いた。いったん返品して再度購入したら、今度は問題なし。1年間使用してきて、今のところ問題は出ていない。&lt;/p&gt;
&lt;h3&gt;モニターアーム&lt;/h3&gt;
&lt;p&gt;ノートPC台が付属している、安いデュアルアームのモニターアーム。
ノートPCとモニターを左右に並べることができ、目線の高さまで上げることができ、浮かすことによって机上にスペースができる、一石三鳥グッズ。&lt;/p&gt;
&lt;p&gt;安いので、あまり自由に調整することはできないけど、向きをあちこち動かす必要がないので特に困ることはない。これまでのところ、自分の用途では事足りている。&lt;/p&gt;
&lt;h3&gt;キーボード&lt;/h3&gt;
&lt;p&gt;メカニカル、ロープロファイル、リニア、87キーのキーボード。&lt;/p&gt;
&lt;p&gt;ここのところ、デスクトップのキーボードもノートPCのものに近いパンタグラフのキーボードを使っていた。
メンブレンのものを含めて、安かろう悪かろうなキーボードを渡り歩いてきたので、使い心地のよいまともな外付けキーボードを使うのは、PC98xxの頃以来かもしれない。&lt;/p&gt;
&lt;h3&gt;USBオーディオインタフェース&lt;/h3&gt;
&lt;p&gt;大層なものではない。3.5mm4極ジャックのみで、ボリュームボタン、ミュートボタンがあるだけの簡易なインタフェース。&lt;/p&gt;
&lt;p&gt;貸与ノートPCに直接イヤフォンマイクを繋げてWeb会議に参加すると、時々音声が聞きづらいと言われたことがあった。
Bluetoothのものも試したが、別の意味で音質の評判がよくなかった。&lt;/p&gt;
&lt;p&gt;いつものイヤフォンマイクをこのオーディオインタフェースに接続して使用するようにしてからは、特に音質が悪いと言われることがなくなった。&lt;/p&gt;&lt;/div&gt;</description><category>lifestyle</category><guid>https://mnod.github.io/posts/20210409.html</guid><pubDate>Fri, 09 Apr 2021 00:00:00 GMT</pubDate></item><item><title>WSL2 installation</title><link>https://mnod.github.io/posts/20210407.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;I followed the document &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Windows Subsystem for Linux Installation Guide for Windows 10&lt;/a&gt;
My environment is Windows 10 Pro 20H2 OS build 19042.685&lt;/p&gt;
&lt;p&gt;Run powershell.exe as administrator.
Then enable the Windows Subsystem for Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And enable Virtual Machine feature&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Download the Linux kernel update package and install it.
- &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;WSL2 Linux kernel update package for x64 machines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Set WSL 2 as the default version&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wsl --set-default-version 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install Linux distribution from &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;Microsoft Store&lt;/a&gt;
Then launch it.&lt;/p&gt;
&lt;p&gt;I could not launch it for a long time because of bug of COMODO Internet Security shown at &lt;a href="https://github.com/microsoft/WSL/issues/5329"&gt;WSL2 Converstion Failed with Error: 0x80041002 &lt;/a&gt;
&lt;a href="https://forums.comodo.com/news-announcements-feedback-cis/comodo-internet-security-2020-v12228012-released-t126945.0.html"&gt;COMODO released new version for fixing it&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Installing, this may take a few minutes...
Please create a default UNIX user account. The username does not need to match your Windows username.
For more information visit: https://aka.ms/wslusers
Enter new UNIX username: xxxx
New password:
Retype new password:
passwd: 
password updated successfully
Installation successful!

$ uname -a
Linux xxxxxxxxxxxxxxx 4.19.128-microsoft-standard #1 SMP Tue Jun 23 12:58:10 UTC 2020 x86_64 GNU/Linux

$ cat /etc/debian_version
10.8

$ df -k
Filesystem     1K-blocks     Used Available Use% Mounted on
/dev/sdb       263174212   280972 249455084   1% /
tmpfs            3161096        0   3161096   0% /mnt/wsl
tools          248559384 53031224 195528160  22% /init
none             3158696        0   3158696   0% /dev
none             3161096        4   3161092   1% /run
none             3161096        0   3161096   0% /run/lock
none             3161096        0   3161096   0% /run/shm
none             3161096        0   3161096   0% /run/user
tmpfs            3161096        0   3161096   0% /sys/fs/cgroup
C:\            248559384 53031224 195528160  22% /mnt/c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From next time, we can launch it with command 'debian'.
Also we can launch it with wsl command on command prompt or powershell.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl --list --verbose
NAME      STATE           VERSION
* Debian    Stopped         2
&amp;gt; wsl -d Debian
&amp;gt; wsl -d Debian -e uname -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can omit distribution name for the default one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; wsl
&amp;gt; wsl -e uname -a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can just execute bash shell or bash shell script as below.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; bash
&amp;gt; bash -c "echo uname -a &amp;gt; test.sh"
&amp;gt; bash -c "./test.sh"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>windows</category><guid>https://mnod.github.io/posts/20210407.html</guid><pubDate>Wed, 07 Apr 2021 00:00:00 GMT</pubDate></item><item><title>CloudWatch Events</title><link>https://mnod.github.io/posts/20201028.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;create and delete rule&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws events list-rules
$ aws events put-rule --name testrule --schedule-expression "rate(60 minutes)"  --state DISABLED
$ aws events enable-rule --name testrule
$ aws events disable-rule --name testrule
$ aws events delete-rule --name testrule
$ aws events describe-rule --name testrule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create and remove targets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws events put-targets --rule testrule --targets '{"Input":"{\"interval\":60,\"rss\":\"https://status.aws.amazon.com/rss/ec2-ap-northeast-1.rss\",\"topicarn\":\"arn:aws:sns:ap-northeast-1:xxxxxxxxxxxx:mysnstopic\"}","Id":"1","Arn":"arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:mylambdafunction"}'
$ aws events remove-targets --rule testrule --ids 1
$ aws events list-targets-by-rule --rule testrule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CloudFormation stack template sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EventsRuleRssNotify:
  Type: 'AWS::Events::Rule'
  Properties:
    Description: 'rss notification'
    Name: rssnotifycf
    ScheduleExpression: 'rate(15 minutes)'
    State: ENABLED
    Targets:
      - Arn: !GetAtt LambdaRssNotification.Arn
        Id: "1"
        Input: !Ref INPUTJSON
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20201028.html</guid><pubDate>Wed, 28 Oct 2020 00:00:00 GMT</pubDate></item><item><title>kvm on raspberrypi</title><link>https://mnod.github.io/posts/20200927.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;kvm On Raspberry Pi OS (64bit) beta test version&lt;/p&gt;
&lt;p&gt;related packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install --no-install-recommends qemu-system-arm qemu-utils kpartx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;boot alpine linux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;get kernel and initra from the iso file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount -o loop alpine-standard-3.12.0-aarch64.iso /media/tmp
$ sudo cp /media/tmp/boot/initramfs-lts .
$ sudo cp /media/tmp/boot/vmlinuz-lts .
$ sudo umount /media/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -nographic -m 512 \
&amp;gt; -kernel vmlinuz-lts -initrd initramfs-lts \
&amp;gt; -drive if=none,id=image,file=alpine-standard-3.12.0-aarch64.iso -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;install debian10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;download kernel and initrd file and create an empty virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget -O linux http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/linux
$ wget -O initrd.gz http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/initrd.gz
$ qemu-img create -f qcow2 hda.qcow2 16G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot the installer with downloaded kernel and initrd file and install to the virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel linux -initrd initrd.gz \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -no-reboot -vnc :1

$ vncviewer xxx.xxx.xxx.xxx:5901
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get kernel and initrd file from qcow2 file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsmod | grep nbd
$ sudo modprobe nbd
$ sudo qemu-nbd -c /dev/nbd0 debian10.qcow2
$ sudo kpartx -av /dev/nbd0
$ sudo mount /dev/mapper/nbd0p1 /media/tmp

$ cp /media/tmp/initrd.img-4.19.0-11-arm64 .
$ cp /media/tmp/vmlinuz-4.19.0-11-arm64 .

$ sudo umount /media/tmp
$ sudo kpartx -dv /dev/nbd0
$ sudo qemu-nbd -d /dev/nbd0
$ sudo rmmod nbd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel vmlinuz-4.19.0-11-arm64 -initrd initrd.img-4.19.0-11-arm64 \
&amp;gt; -append 'root=/dev/vda2' \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -nographic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>kvm</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200927.html</guid><pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate></item><item><title>docker on raspberrypi</title><link>https://mnod.github.io/posts/20200926.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Install docker on &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=117&amp;amp;t=275370"&gt;Raspberry Pi OS (64bit) beta test version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/debian/"&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --dry-run
$ sudo sh get-docker.sh
$ systemctl is-active docker
$ systemctl is-enabled docker
$ sudo docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the docker root directory where we store the images and containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker info | grep Root
$ sudo systemctl stop docker
$ sudo mv /var/lib/docker /path/to/
$ sudo ln -s /path/to/docker /var/lib/docker
$ sudo systemctl start docker
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -it alpine
/ #
/ # uptime
 03:17:44 up 1 day,  2:47,  load average: 0.02, 0.05, 0.01
/ #
/ # uname -a
Linux 4db177a44a14 5.4.42-v8+ #1319 SMP PREEMPT Wed May 20 14:18:56 BST 2020 aarch64 Linux
/ #
/ # free -m
              total        used        free      shared  buff/cache   available
Mem:           7816         315        6339           2        1161        7460
Swap:          8191           0        8191
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt install libffi-dev libssl-dev
$ sudo pip3 install docker-compose
$ pip3 show docker-compose
$ docker-compose version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;commands of docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config # Validate and view the Compose file
ps # List containers
images # List images
build # (Re)Build services
create # Create services
up # Create and start containers
start # Start services
stop # Stop services
rm -f # Remove stopped containers
down # Stop and remove containers
version # Show version information
help # Show help messages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200926.html</guid><pubDate>Sat, 26 Sep 2020 00:00:00 GMT</pubDate></item><item><title>vhd</title><link>https://mnod.github.io/posts/20200924.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Windows can mount vhd file as a virtual drive.
We can use it for application install space or document storage area.&lt;/p&gt;
&lt;p&gt;When we create a vhd file on a flash memory, the memory should be formatted with ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted /dev/sdb print
parted /dev/sdb rm 1
parted /dev/sdb mkpart primary ntfs 0% 100%
mkfs.ntfs -Q /dev/sdb1
mount /dev/sdb1 /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first a raw image file, make label, and make partition.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/zero of=file.img bs=1M count=0 seek=59000
losetup -f
losetup /dev/loop1 file.img
losetup -a
parted /dev/loop1 print
parted /dev/loop1 mklabel msdos
parted /dev/loop1 mkpart primary ntfs 0% 100%
losetup -d /dev/loop1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then format the partition in ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kpartx -a -v file.img
mkfs.ntfs -Q /dev/loop1p1
kpartx -d -v file.img
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vhd file must not be sparse file.
So after we convert it to vhd format, then we should convert it to normal file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp --sparse=never file.img file_new.img
qemu-img convert -O vpc -o subformat=fixed,force_size=on file.img output.vhd
cp -pi --sparse=never output.vhd.sparse file.vhd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;diskpart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In windows os, we can handle partition and filesystem with sub commands of diskpart command.&lt;/p&gt;
&lt;p&gt;format usb drive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
select volume=2
format fs=ntfs quick
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a vhd file and attach it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
create vdisk file="d:\image.vhd" maximum=1024
select vdisk file="d:\image.vhd"
attach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create partition in the vhd file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select disk 2
list disk
create partition primary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;format in ntfs and assign drive letter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
select volume=3
format fs=ntfs quick
assign letter=e:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;detach the vhd file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select vdisk file="d:\image.vhd"
detach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;next time, just attach it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select vdisk file="d:\image.vhd"
attach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>windows</category><guid>https://mnod.github.io/posts/20200924.html</guid><pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate></item><item><title>nikola</title><link>https://mnod.github.io/posts/20200710.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; is one of &lt;a href="https://www.staticgen.com/"&gt;static site generator&lt;/a&gt; written in python3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports some input formats include Markdown.&lt;/li&gt;
&lt;li&gt;Theme is written in Mako or Jinja2.
The user can use any existing theme or can create your own theme inherits from existing one.&lt;/li&gt;
&lt;li&gt;The user can specify deployment procedure and run it.&lt;/li&gt;
&lt;li&gt;Especially for Github pages, you can build the site, commit the changes, and push the output to github with one command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As described in the footer of this page, I use it now.&lt;/p&gt;
&lt;p&gt;This is a sample Dockerfile. The docker image will become about 427MB.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM alpine:3.12

RUN apk --update --no-cache add py-pip git bash \
gcc musl-dev python3-dev libxml2-dev libxslt-dev libjpeg-turbo-dev \
&amp;amp;&amp;amp; pip install nikola jinja2 ghp-import2 \
&amp;amp;&amp;amp; mkdir /tmp/nikola \
&amp;amp;&amp;amp; adduser -H -D docker

VOLUME ["/tmp/nikola"]
EXPOSE 80
USER "docker"
WORKDIR "/tmp/nikola"
CMD ["/bin/bash"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nikola github_deploy&lt;/code&gt; does not work with this image. I get this message when I run it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git: 'fast-import' is not a git command. See 'git --help'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I use ubuntu:20.04 for a base image.&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>https://mnod.github.io/posts/20200710.html</guid><pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate></item><item><title>backend and lock</title><link>https://mnod.github.io/posts/20200622.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;create S3 bucket and DynamoDB table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At first make tf file to build S3 bucket for backend to store state file and DynamoDB table for lock control&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resource "aws_s3_bucket" "terraform_state" {
  bucket = "mybucketname"
  versioning {
    enabled = true
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }

  # lifecycle {
  #   prevent_destroy = true
  # }

  tags = {
    Name = "terraform_backend"
  }
}

resource "aws_s3_bucket_public_access_block" "terraform_state" {
  bucket = aws_s3_bucket.terraform_state.bucket

  block_public_acls = true
  block_public_policy = true
  ignore_public_acls = true
  restrict_public_buckets = true
}

resource "aws_dynamodb_table" "terraform_state_lock" {
  name = "terraform_state_lock"
  read_capacity = 1
  write_capacity = 1
  hash_key = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }
}
variable "region" {
  default = "ap-northeast-1"
}

provider "aws" {
  region = var.region
  version = "~&amp;gt; 2.61.0"
}

terraform {
  required_version = "&amp;gt;= 0.12.26"
#  backend "s3" {
#    bucket = "mybucketname"
#    key    = "network/terraform.tfstate"
#    region = "ap-northeast-1"
#    dynamodb_table = "terraform_state_lock"
#  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then initialize &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at last create bucket and table&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -out terraform.plan -no-color 
terraform apply "terraform.plan" -no-color 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;change backend to S3&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;at first edit tf file to enable S3 backend&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform {
  required_version = "&amp;gt;= 0.12.26"
  backend "s3" {
    bucket = "mybucketname"
    key    = "network/terraform.tfstate"
    region = "ap-northeast-1"
    dynamodb_table = "terraform_state_lock"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then initialize&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init -no-color 
aws s3api list-object-versions  --bucket mybucketname --prefix network/terraform.tfstate --query 'Versions[].{VersionId:VersionId, LastModified:LastModified}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;then you can use S3 backend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;add tf file content to build aws resource &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variable "cidr_block" {
  default = "10.0.0.0/16"
}

resource "aws_vpc" "terraform_test_vpc" {
  cidr_block           = var.cidr_block
  instance_tenancy     = "default"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "terraform_test"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;plan and apply as usual&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -no-color -out terraform.plan 
terraform apply "terraform.plan" 
terraform show

aws s3api list-object-versions  --bucket mybucketname --prefix network/terraform.tfstate --query 'Versions[].{VersionId:VersionId, LastModified:LastModified}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;remove all reosources other than S3 bucket and DynamoDB table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;before change backend from S3 to local again, remove all other resources.&lt;/p&gt;
&lt;p&gt;at first remove all aws resources from tf file other than S3 bucket for backend and DynamoDB table for lock control.
then plan and apply&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -no-color -out terraform.plan 
terraform apply "terraform.plan" 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;change backend from S3 to local&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;comment out or remove backend from tf file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    terraform {
      required_version = "&amp;gt;= 0.12.26"
    #  backend "s3" {
    #    bucket = "mybucketname"
    #    key    = "network/terraform.tfstate"
    #    region = "ap-northeast-1"
    #    dynamodb_table = "terraform_state_lock"
    #  }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then initialize.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init -no-color 
ls -l terraform.tfstate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;remove S3 tables and DynamoDB table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;before remove them, make sure S3 bucket empty&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws s3api list-object-versions  --bucket mybucketname --prefix network/terraform.tfstate --query 'Versions[].{VersionId:VersionId, LastModified:LastModified}'
delete_objects=$(aws s3api list-object-versions --bucket mybucketname --prefix network/terraform.tfstate \
--query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')
aws s3api delete-objects --bucket mybucketname --delete "${delete_objects}"

terraform destroy 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sample yaml file for stack of CloudFormation to build backend S3 bucket and DynamoDB table&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BucketName:
    Type: String
  TableName:
    Type: String
Resources:
  BackendBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: "Enabled"
      Tags:
        - "Key": "Name"
          "Value": "test"
  LockctrlTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "LockID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "LockID"
          KeyType: "HASH"
      BillingMode: "PROVISIONED"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: "Name"
          Value: "test"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>terraform</category><guid>https://mnod.github.io/posts/20200622.html</guid><pubDate>Mon, 22 Jun 2020 00:00:00 GMT</pubDate></item><item><title>github</title><link>https://mnod.github.io/posts/20200617.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;adding ssh public key&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can use github without ssh key. 
But when you add ssh key and you use ssh private key without passphrase, it is convinient for scripting.&lt;/p&gt;
&lt;p&gt;Login and follow menu like below:
&lt;a href="https://github.com/settings/profile"&gt;Settings&lt;/a&gt; &amp;gt; &lt;a href="https://github.com/settings/keys"&gt;SSH and GPG keys&lt;/a&gt; &amp;gt; &lt;a href="https://github.com/settings/ssh/new"&gt;New SSH key&lt;/a&gt;
Then register name and content of your ssh public key.&lt;/p&gt;
&lt;p&gt;edit ssh config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; END | tee -a .ssh/config
Host github.com
    IdentityFile    ~/.ssh/id_rsa.mykey
    User            git
Host *.github.com
    IdentityFile    ~/.ssh/id_rsa.mykey
    User            git
END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test ssh connection. add -v to see debug messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you've already work with any github repository, if you want to use git protocol instad of https, you can use it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global url.git@github.com:.insteadOf https://github.com/
git config --global url.git@gist.github.com:.insteadOf https://gist.github.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;After &lt;a href="https://github.com/new"&gt;Create a new repository&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;when you don't have ever created a git repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add README.md
git commit -m "first commit"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after that add remote to the repository, and push it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:username/myrepositoryname.git
git remote -v
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To .gitignore file, add list of files which you don't want to add to the git repository &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; END | tee -a .gitignore
id_rsa
END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;initialize history of repository&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf .git
git init
git add .
git commit -a -m "&amp;lt;commit message&amp;gt;"
git remote add origin &amp;lt;url&amp;gt;
git push -u origin master -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>git</category><guid>https://mnod.github.io/posts/20200617.html</guid><pubDate>Wed, 17 Jun 2020 00:00:00 GMT</pubDate></item><item><title>screen and tmux</title><link>https://mnod.github.io/posts/20200616.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;command&lt;/th&gt;&lt;th&gt;screen&lt;/th&gt;&lt;th&gt;tmux&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list&lt;/th&gt;&lt;td&gt;-ls&lt;/td&gt;&lt;td&gt;ls&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;with name&lt;/th&gt;&lt;td&gt;-S name&lt;/td&gt;&lt;td&gt;new -s name&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;attach&lt;/th&gt;&lt;td&gt;-r [title]&lt;/td&gt;&lt;td&gt;a [-t title]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;prefix&lt;/th&gt;&lt;td&gt;Ctrl+a&lt;/td&gt;&lt;td&gt;Ctrl+b&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;new&lt;/th&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;switch&lt;/th&gt;&lt;td&gt;prefix+num&lt;/td&gt;&lt;td&gt;prerix+num&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list screen&lt;/th&gt;&lt;td&gt;prefix+"&lt;/td&gt;&lt;td&gt;prerix+w&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;copy mode&lt;/th&gt;&lt;td&gt;prefix+esc&lt;/td&gt;&lt;td&gt;prefix+[&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;screen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;it can connect to serial port. default baud is 9600&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen /dev/ttyS0 [baud rate]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it can create a new window which executes a specific program&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen watch -n 5 ntpq -pn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200616.html</guid><pubDate>Tue, 16 Jun 2020 00:00:00 GMT</pubDate></item></channel></rss>