<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log</title><link>https://mnod.github.io/</link><description>tech log</description><atom:link href="https://mnod.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Thu, 24 Sep 2020 12:31:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>vhd</title><link>https://mnod.github.io/posts/20200924.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Windows can mount vhd file as a virtual drive.
We can use it for application install space or document storage area.&lt;/p&gt;
&lt;p&gt;When we create a vhd file on a flash memory, the memory should be formatted with ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted /dev/sdb print
parted /dev/sdb rm 1
parted /dev/sdb mkpart primary ntfs 0% 100%
mkfs.ntfs -Q /dev/sdb1
mount /dev/sdb1 /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first a raw image file, make label, and make partition.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/zero of=file.img bs=1M count=0 seek=59000
losetup -f
losetup /dev/loop1 file.img
losetup -a
parted /dev/loop1 print
parted /dev/loop1 mklabel msdos
parted /dev/loop1 mkpart primary ntfs 0% 100%
losetup -d /dev/loop1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then format the partition in ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kpartx -a -v file.img
mkfs.ntfs -Q /dev/loop1p1
kpartx -d -v file.img
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vhd file must not be sparse file.
So after we convert it to vhd format, then we should convert it to normal file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp --sparse=never file.img file_new.img
qemu-img convert -O vpc -o subformat=fixed,force_size=on file.img output.vhd
cp -pi --sparse=never output.vhd.sparse file.vhd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>windows</category><guid>https://mnod.github.io/posts/20200924.html</guid><pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate></item><item><title>nikola</title><link>https://mnod.github.io/posts/20200710.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; is one of &lt;a href="https://www.staticgen.com/"&gt;static site generator&lt;/a&gt; written in python3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It supports some input formats include Markdown.&lt;/li&gt;
&lt;li&gt;Theme is written in Mako or Jinja2.
The user can use any existing theme or can create your own theme inherits from existing one.&lt;/li&gt;
&lt;li&gt;The user can specify deployment procedure and run it.&lt;/li&gt;
&lt;li&gt;Especially for Github pages, you can build the site, commit the changes, and push the output to github with one command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As described in the footer of this page, I use it now.&lt;/p&gt;
&lt;p&gt;This is a sample Dockerfile. The docker image will become about 427MB.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM alpine:3.12

RUN apk --update --no-cache add py-pip git bash \
gcc musl-dev python3-dev libxml2-dev libxslt-dev libjpeg-turbo-dev \
&amp;amp;&amp;amp; pip install nikola jinja2 ghp-import2 \
&amp;amp;&amp;amp; mkdir /tmp/nikola \
&amp;amp;&amp;amp; adduser -H -D docker

VOLUME ["/tmp/nikola"]
EXPOSE 80
USER "docker"
WORKDIR "/tmp/nikola"
CMD ["/bin/bash"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nikola github_deploy&lt;/code&gt; does not work with this image. I get this message when I run it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git: 'fast-import' is not a git command. See 'git --help'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So I use ubuntu:20.04 for a base image.&lt;/p&gt;&lt;/div&gt;</description><category>software</category><guid>https://mnod.github.io/posts/20200710.html</guid><pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate></item><item><title>backend and lock</title><link>https://mnod.github.io/posts/20200622.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;create S3 bucket and DynamoDB table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;At first make tf file to build S3 bucket for backend to store state file and DynamoDB table for lock control&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;resource "aws_s3_bucket" "terraform_state" {
  bucket = "mybucketname"
  versioning {
    enabled = true
  }

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "AES256"
      }
    }
  }

  # lifecycle {
  #   prevent_destroy = true
  # }

  tags = {
    Name = "terraform_backend"
  }
}

resource "aws_s3_bucket_public_access_block" "terraform_state" {
  bucket = aws_s3_bucket.terraform_state.bucket

  block_public_acls = true
  block_public_policy = true
  ignore_public_acls = true
  restrict_public_buckets = true
}

resource "aws_dynamodb_table" "terraform_state_lock" {
  name = "terraform_state_lock"
  read_capacity = 1
  write_capacity = 1
  hash_key = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }
}
variable "region" {
  default = "ap-northeast-1"
}

provider "aws" {
  region = var.region
  version = "~&amp;gt; 2.61.0"
}

terraform {
  required_version = "&amp;gt;= 0.12.26"
#  backend "s3" {
#    bucket = "mybucketname"
#    key    = "network/terraform.tfstate"
#    region = "ap-northeast-1"
#    dynamodb_table = "terraform_state_lock"
#  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then initialize &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;at last create bucket and table&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -out terraform.plan -no-color 
terraform apply "terraform.plan" -no-color 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;change backend to S3&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;at first edit tf file to enable S3 backend&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform {
  required_version = "&amp;gt;= 0.12.26"
  backend "s3" {
    bucket = "mybucketname"
    key    = "network/terraform.tfstate"
    region = "ap-northeast-1"
    dynamodb_table = "terraform_state_lock"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then initialize&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init -no-color 
aws s3api list-object-versions  --bucket mybucketname --prefix network/terraform.tfstate --query 'Versions[].{VersionId:VersionId, LastModified:LastModified}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;then you can use S3 backend&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;add tf file content to build aws resource &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variable "cidr_block" {
  default = "10.0.0.0/16"
}

resource "aws_vpc" "terraform_test_vpc" {
  cidr_block           = var.cidr_block
  instance_tenancy     = "default"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "terraform_test"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;plan and apply as usual&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -no-color -out terraform.plan 
terraform apply "terraform.plan" 
terraform show

aws s3api list-object-versions  --bucket mybucketname --prefix network/terraform.tfstate --query 'Versions[].{VersionId:VersionId, LastModified:LastModified}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;remove all reosources other than S3 bucket and DynamoDB table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;before change backend from S3 to local again, remove all other resources.&lt;/p&gt;
&lt;p&gt;at first remove all aws resources from tf file other than S3 bucket for backend and DynamoDB table for lock control.
then plan and apply&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform plan -no-color -out terraform.plan 
terraform apply "terraform.plan" 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;change backend from S3 to local&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;comment out or remove backend from tf file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    terraform {
      required_version = "&amp;gt;= 0.12.26"
    #  backend "s3" {
    #    bucket = "mybucketname"
    #    key    = "network/terraform.tfstate"
    #    region = "ap-northeast-1"
    #    dynamodb_table = "terraform_state_lock"
    #  }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then initialize.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;terraform init -no-color 
ls -l terraform.tfstate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;remove S3 tables and DynamoDB table&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;before remove them, make sure S3 bucket empty&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws s3api list-object-versions  --bucket mybucketname --prefix network/terraform.tfstate --query 'Versions[].{VersionId:VersionId, LastModified:LastModified}'
delete_objects=$(aws s3api list-object-versions --bucket mybucketname --prefix network/terraform.tfstate \
--query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')
aws s3api delete-objects --bucket mybucketname --delete "${delete_objects}"

terraform destroy 
terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sample yaml file for stack of CloudFormation to build backend S3 bucket and DynamoDB table&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BucketName:
    Type: String
  TableName:
    Type: String
Resources:
  BackendBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: "Enabled"
      Tags:
        - "Key": "Name"
          "Value": "test"
  LockctrlTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "LockID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "LockID"
          KeyType: "HASH"
      BillingMode: "PROVISIONED"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: "Name"
          Value: "test"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>terraform</category><guid>https://mnod.github.io/posts/20200622.html</guid><pubDate>Mon, 22 Jun 2020 00:00:00 GMT</pubDate></item><item><title>github</title><link>https://mnod.github.io/posts/20200617.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;adding ssh public key&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can use github without ssh key. 
But when you add ssh key and you use ssh private key without passphrase, it is convinient for scripting.&lt;/p&gt;
&lt;p&gt;Login and follow menu like below:
&lt;a href="https://github.com/settings/profile"&gt;Settings&lt;/a&gt; &amp;gt; &lt;a href="https://github.com/settings/keys"&gt;SSH and GPG keys&lt;/a&gt; &amp;gt; &lt;a href="https://github.com/settings/ssh/new"&gt;New SSH key&lt;/a&gt;
Then register name and content of your ssh public key.&lt;/p&gt;
&lt;p&gt;edit ssh config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; END | tee -a .ssh/config
Host github.com
    IdentityFile    ~/.ssh/id_rsa.mykey
    User            git
Host *.github.com
    IdentityFile    ~/.ssh/id_rsa.mykey
    User            git
END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test ssh connection. add -v to see debug messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -T github.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you've already work with any github repository, if you want to use git protocol instad of https, you can use it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global url.git@github.com:.insteadOf https://github.com/
git config --global url.git@gist.github.com:.insteadOf https://gist.github.com/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;After &lt;a href="https://github.com/new"&gt;Create a new repository&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;when you don't have ever created a git repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init
git add README.md
git commit -m "first commit"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after that add remote to the repository, and push it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git remote add origin git@github.com:username/myrepositoryname.git
git remote -v
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To .gitignore file, add list of files which you don't want to add to the git repository &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; END | tee -a .gitignore
id_rsa
END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;initialize history of repository&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rm -rf .git
git init
git add .
git commit -a -m "&amp;lt;commit message&amp;gt;"
git remote add origin &amp;lt;url&amp;gt;
git push -u origin master -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>git</category><guid>https://mnod.github.io/posts/20200617.html</guid><pubDate>Wed, 17 Jun 2020 00:00:00 GMT</pubDate></item><item><title>screen and tmux</title><link>https://mnod.github.io/posts/20200616.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;command&lt;/th&gt;&lt;th&gt;screen&lt;/th&gt;&lt;th&gt;tmux&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list&lt;/th&gt;&lt;td&gt;-ls&lt;/td&gt;&lt;td&gt;ls&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;with name&lt;/th&gt;&lt;td&gt;-S name&lt;/td&gt;&lt;td&gt;new -s name&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;attach&lt;/th&gt;&lt;td&gt;-r [title]&lt;/td&gt;&lt;td&gt;a [-t title]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;prefix&lt;/th&gt;&lt;td&gt;Ctrl+a&lt;/td&gt;&lt;td&gt;Ctrl+b&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;new&lt;/th&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;switch&lt;/th&gt;&lt;td&gt;prefix+num&lt;/td&gt;&lt;td&gt;prerix+num&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list screen&lt;/th&gt;&lt;td&gt;prefix+"&lt;/td&gt;&lt;td&gt;prerix+w&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;copy mode&lt;/th&gt;&lt;td&gt;prefix+esc&lt;/td&gt;&lt;td&gt;prefix+[&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;screen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;it can connect to serial port. default baud is 9600&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen /dev/ttyS0 [baud rate]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it can create a new window which executes a specific program&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen watch -n 5 ntpq -pn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200616.html</guid><pubDate>Tue, 16 Jun 2020 00:00:00 GMT</pubDate></item><item><title>chrony</title><link>https://mnod.github.io/posts/20200615.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;chrony is an implementation of Network Time Protocol&lt;/p&gt;
&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample config
specify ntp server at &lt;code&gt;server&lt;/code&gt; or ntp server pool for &lt;code&gt;pool&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/chrony/chrony.conf
server 192.168.xxx.xxx iburst minpoll 6 maxpoll 10
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reload configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status chronyd
journalctl -u chrony -f
systemctl force-reload chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show system track performance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc tracking
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show current time sources&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc sources
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show information about drift rate and offset estimation process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc sourcestats
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show the last valid measurement and other information&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc ntpdata
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For server settings, at least add a &lt;code&gt;allow&lt;/code&gt; line.
&lt;code&gt;cmdallow&lt;/code&gt; and &lt;code&gt;bindcmdaddress&lt;/code&gt; lines are optional which is for monitoring access&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/chrony/chrony.conf
server 192.168.xxx.xxx iburst minpoll 6 maxpoll 10
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
allow 192.168.xxx.0/24
cmdallow 192.168.xxx.0/24
bindcmdaddress 127.0.0.1
bindcmdaddress 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show list of clients&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc clients
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify a remote host to which chronyd is to be connected (using udp/323)
default is localhost&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cronyc -h 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200615.html</guid><pubDate>Mon, 15 Jun 2020 00:00:00 GMT</pubDate></item><item><title>ntpd</title><link>https://mnod.github.io/posts/20200614.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install ntp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample config
specify ntp server at &lt;code&gt;server&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 192.168.xxx.xxx iburst
restrict -4 default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict ::1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reload configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status ntp
journalctl -u ntp -f
systemctl force-reload ntp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntpq -pn
ntpq -c readlist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For server settings, at lease a &lt;code&gt;restrict &amp;lt;client address&amp;gt;&lt;/code&gt; line to allow ntp clients access.
If you don't add &lt;code&gt;noquery&lt;/code&gt;, you allow the client to query your ntpd status.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 192.168.xxx.xxx iburst
restrict -4 default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict ::1
restrict 192.168.xxx.xxx mask 255.255.255.0 nomodify notrap nopeer noquery
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntpq -pn &amp;lt;address&amp;gt;
ntpq -c readlist &amp;lt;address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200614.html</guid><pubDate>Sun, 14 Jun 2020 00:00:00 GMT</pubDate></item><item><title>journalctl</title><link>https://mnod.github.io/posts/20200613.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;show all messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show all messages from boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show messages with explanations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show kernel ring buffer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show messages of limitted time span&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl --since "2020-06-11"
journalctl --since "20 min ago"
journalctl --since "2020-06-11 00:00:00" --untill "2020-06-11 23:59:59"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show specific messages by unit, executable or process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -u networking
journalctl /usr/bin/sudo
journalctl _PID=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show specific messages by priority or syslog facility&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -p 5
journalctl -p 0..5
journalctl SYSLOG_FACILITY=10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;follow new messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;don't pipe output to a pager&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl --no-pager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically journal messages exist under /run/log/journal/ which is volatile directory.
Below commands move journal messages directory to directory under /var/log/journal/.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "Storage=persistent" | sudo tee -a /etc/systemd/journald.conf
systemctl force-reload systemd-journald
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can specify directory in which journal messages saved.
It would be convinient, for example, when you read other system's journal messages which is mounted on any mount point.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -D /mnt/var/log/journal -x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>systemd</category><guid>https://mnod.github.io/posts/20200613.html</guid><pubDate>Sat, 13 Jun 2020 00:00:00 GMT</pubDate></item><item><title>systemctl</title><link>https://mnod.github.io/posts/20200612.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;show system status&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show running or failed units&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl list-units
systemctl
systemctl --failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show installed unit files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl list-unit-files
ls -l /usr/lib/systemd/system /etc/systemd/system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start, stop, restart or reload a unit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start unit
systemctl stop unit
systemctl restart unit
systemctl reload unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show status of a unit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;enable or disable a unit to be started on bootstrap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable unit
systemctl disable unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;check whether a unit is enabled or not&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl is-enabled unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mask or unmask a unit to make it impossible to start it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl mask unit
systemctl unmask unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reboot or poweroff the system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl reboot
systemctl poweroff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>systemd</category><guid>https://mnod.github.io/posts/20200612.html</guid><pubDate>Fri, 12 Jun 2020 00:00:00 GMT</pubDate></item><item><title>terraform docker container</title><link>https://mnod.github.io/posts/20200516.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From centos:centos8

ARG VERSION=0.12.25
RUN yum install -y unzip python2-pip openssh-clients &amp;amp;&amp;amp; \
    yum clean all &amp;amp;&amp;amp; \
    curl -s https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_amd64.zip -o terraform.zip &amp;amp;&amp;amp; \
    unzip terraform.zip &amp;amp;&amp;amp; \
    rm terraform.zip &amp;amp;&amp;amp; \
    mv terraform /usr/local/bin &amp;amp;&amp;amp; \
    pip2 install ansible boto boto3 awscli &amp;amp;&amp;amp; \
    ln -s /usr/bin/python2.7 /usr/bin/python &amp;amp;&amp;amp; \
    mkdir /tmp/terraform &amp;amp;&amp;amp; \
    useradd -m docker

VOLUME ["/tmp/terraform"]
USER "docker"
WORKDIR "/tmp/terraform"
CMD ["/bin/bash"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg VERSION=0.12.25 -t terraform:0.12.25 .
$ sudo docker tag terraform:0.12.25 terraform:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest terraform --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest ansible --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create variable file /mydir/credentials &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=xxxx
AWS_SECRET_ACCESS_KEY=xxxx
AWS_DEFAULT_REGION=xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create wrapper script infradeploy.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v /mylocal/terraform:/tmp/terraform --env-file /mydir/credentials --rm -it terraform:latest $*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test terraform and ansible work&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo sh infradeploy.sh terraform show
$ sudo sh infradeploy.sh ./ec2.py --list
$ sudo sh infradeploy.sh ansible -i ec2.py -u admin ec2 -m ping --private-key id_rsa.mykey
$ sudo sh infradeploy.sh ansible-playbook --check -e @extravars.json playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As described at &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html"&gt;this site&lt;/a&gt; we can use ec2.py and ec2.ini(optional) for dynamic inventory
When I ran ec2.py I got &lt;code&gt;ImportError: No module named ansible.module_utils&lt;/code&gt; in the case I installed ansible from ubuntu repository.
It seems ansible should be installed with pip if you want to use ec2.py&lt;/p&gt;
&lt;p&gt;playbook sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: test playbook
  hosts: tag_Name_tagname
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_private_key_file: "./id_rsa.mykey"
  tasks:
    - name: install some packages
      apt:
        name: ['make','screen']
        state: present
        install_recommends: no
      when: ansible_pkg_mgr == 'apt'
      tags: packages

    - name: create a directory
      file:
        path: /my/direcoty
        state: directory
        owner: admin
        mode: '0755'

$ sudo sh infradeploy.sh ansible-playbook --check --diff -i ec2.py playbook.yml
$ sudo sh infradeploy.sh ansible-playbook --diff -i ec2.py playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>ansible</category><category>docker</category><category>terraform</category><guid>https://mnod.github.io/posts/20200516.html</guid><pubDate>Sat, 16 May 2020 00:00:00 GMT</pubDate></item></channel></rss>