<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about raspberrypi)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/raspberrypi.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Tue, 14 Jun 2022 12:02:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>wireguard on raspberryrpi</title><link>https://mnod.github.io/posts/20220614.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;I tried to install wireguard with &lt;a href="https://docs.pivpn.io/install/"&gt;pivpn&lt;/a&gt; on 64bit Raspberry pi OS (buster, 4B), but it failed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; END &amp;gt; /tmp/pivpn_options.conf                                                                                                                                           
IPv4dev=xx
install_user=pi
VPN=wireguard
pivpnNET=10.x.x.0
subnetClass=24
ALLOWED_IPS="10.x.x.0/24, 192.168.y.0/24"
pivpnMTU=1420
pivpnPORT=51820
pivpnDNS1=1.1.1.1
pivpnHOST=myname.example.com
pivpnPERSISTENTKEEPALIVE=25
UNATTUPG=1
END

$ curl -L https://install.pivpn.io &amp;gt; /tmp/pivpn_install.sh
$ chmod +x /tmp/pivpn_install.sh
$ /tmp/pivpn_install.sh --noipv6 --unattended /tmp/pivpn_options.conf                                                                                                     


:: wireguard is not a supported VPN protocol on arm64 Debian, only 'openvpn' is
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was not able to select wireguard in intereractive interface. It select openvpn automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ /tmp/pivpn_install.sh --noipv6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though I successed it on 32bit Raspberry pi OS (bullseye, 3B+)
It needs NAPT settings to your pi to make a connection from outside wireguard peer.&lt;/p&gt;
&lt;p&gt;I'd like to try it on bookwarm 32bit/64bit when it will be released on the next version of the pi :)&lt;/p&gt;</description><category>failed</category><category>linux</category><category>raspberrypi</category><category>vpn</category><guid>https://mnod.github.io/posts/20220614.html</guid><pubDate>Tue, 14 Jun 2022 00:00:00 GMT</pubDate></item><item><title>kvm on raspberrypi</title><link>https://mnod.github.io/posts/20200927.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;kvm On Raspberry Pi OS (64bit) beta test version&lt;/p&gt;
&lt;p&gt;related packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install --no-install-recommends qemu-system-arm qemu-utils kpartx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;boot alpine linux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;get kernel and initra from the iso file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount -o loop alpine-standard-3.12.0-aarch64.iso /media/tmp
$ sudo cp /media/tmp/boot/initramfs-lts .
$ sudo cp /media/tmp/boot/vmlinuz-lts .
$ sudo umount /media/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -nographic -m 512 \
&amp;gt; -kernel vmlinuz-lts -initrd initramfs-lts \
&amp;gt; -drive if=none,id=image,file=alpine-standard-3.12.0-aarch64.iso -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;install debian10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;download kernel and initrd file and create an empty virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget -O linux http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/linux
$ wget -O initrd.gz http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/initrd.gz
$ qemu-img create -f qcow2 hda.qcow2 16G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot the installer with downloaded kernel and initrd file and install to the virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel linux -initrd initrd.gz \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -no-reboot -vnc :1

$ vncviewer xxx.xxx.xxx.xxx:5901
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get kernel and initrd file from qcow2 file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsmod | grep nbd
$ sudo modprobe nbd
$ sudo qemu-nbd -c /dev/nbd0 debian10.qcow2
$ sudo kpartx -av /dev/nbd0
$ sudo mount /dev/mapper/nbd0p1 /media/tmp

$ cp /media/tmp/initrd.img-4.19.0-11-arm64 .
$ cp /media/tmp/vmlinuz-4.19.0-11-arm64 .

$ sudo umount /media/tmp
$ sudo kpartx -dv /dev/nbd0
$ sudo qemu-nbd -d /dev/nbd0
$ sudo rmmod nbd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel vmlinuz-4.19.0-11-arm64 -initrd initrd.img-4.19.0-11-arm64 \
&amp;gt; -append 'root=/dev/vda2' \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -nographic
&lt;/code&gt;&lt;/pre&gt;</description><category>kvm</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200927.html</guid><pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate></item><item><title>docker on raspberrypi</title><link>https://mnod.github.io/posts/20200926.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;Install docker on &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=117&amp;amp;t=275370"&gt;Raspberry Pi OS (64bit) beta test version&lt;/a&gt;
We can download the iso images from https://downloads.raspberrypi.org/raspios_arm64/images/&lt;/p&gt;
&lt;p&gt;Also we can use torrent to download them&lt;/p&gt;
&lt;p&gt;make a script to stop transmission when download finished (in this case, the script name is stop_torrent.sh)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sleep 10
kill $(ps -ef | grep transmission | grep -v grep | awk '{print $2}')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then start download&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;transmissIon-cli --download-dir (fullpath) --uplimit (kbps) --downlimit (kbps) --encryption-required --finish (fullpath)/stop_torrent.sh https://(fqdn)/(path)/(filename).torrent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/debian/"&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --dry-run
$ sudo sh get-docker.sh
$ systemctl is-active docker
$ systemctl is-enabled docker
$ sudo docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the docker root directory where we store the images and containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker info | grep Root
$ sudo systemctl stop docker
$ sudo mv /var/lib/docker /path/to/
$ sudo ln -s /path/to/docker /var/lib/docker
$ sudo systemctl start docker
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -it alpine
/ #
/ # uptime
 03:17:44 up 1 day,  2:47,  load average: 0.02, 0.05, 0.01
/ #
/ # uname -a
Linux 4db177a44a14 5.4.42-v8+ #1319 SMP PREEMPT Wed May 20 14:18:56 BST 2020 aarch64 Linux
/ #
/ # free -m
              total        used        free      shared  buff/cache   available
Mem:           7816         315        6339           2        1161        7460
Swap:          8191           0        8191
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt install libffi-dev libssl-dev
$ sudo pip3 install docker-compose
$ pip3 show docker-compose
$ docker-compose version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;commands of docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config # Validate and view the Compose file
ps # List containers
images # List images
build # (Re)Build services
create # Create services
up # Create and start containers
start # Start services
stop # Stop services
rm -f # Remove stopped containers
down # Stop and remove containers
version # Show version information
help # Show help messages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When update docker-compose.yml, no need to rebuild the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When update Dockerfile or edit any source codes, need to rebuild the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;</description><category>docker</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200926.html</guid><pubDate>Sat, 26 Sep 2020 00:00:00 GMT</pubDate></item><item><title>cpu governor on raspbian</title><link>https://mnod.github.io/posts/20170304.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;configure cpu governor&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;cpu情報の確認&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cpuクロック関連ツール導入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install cpufrequtils
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在のクロックやガバナの表示&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_cur_freq
cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_max_freq
cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_min_freq
cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;状態確認&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cpufreq-info
cpufreq-info -p
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ガバナの変更&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cpufreq-set -g ondemand
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;os起動時のガバナの指定&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp -pi /usr/share/doc/cpufrequtils/examples/cpufrequtils.sample /etc/default/cpufrequtils
vi /etc/default/cpufrequtils

service cpufrequtils restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Disable swap on raspbian buster&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status dphys-swapfile

systemctl stop dphys-swapfile
systemctl is-active dphys-swapfile

systemctl disable dphys-swapfile
systemctl is-enabled dphys-swapfile

rm /var/swap
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Use tmpfs&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount -t tmpfs tmpfs &amp;lt;mount point&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; END &amp;gt;&amp;gt; /etc/fstab
tmpfs           /tmp            tmpfs   defaults,size=256m,noatime,mode=1777  0       0
END
mount /tmp
&lt;/code&gt;&lt;/pre&gt;</description><category>debian</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20170304.html</guid><pubDate>Sat, 04 Mar 2017 00:00:00 GMT</pubDate></item></channel></rss>