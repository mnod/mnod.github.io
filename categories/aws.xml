<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about aws)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/aws.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Fri, 12 Aug 2022 12:10:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>advanced cloudformation</title><link>https://mnod.github.io/posts/20220810.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;create an initial cloudformation stack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://template-000.yml
aws cloudformation create-stack --stack-name mystack  --template-body file://mystack-000.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation describe-stacks --stack-name mystack 
aws cloudformation describe-stack-resources --stack-name mystack 
aws cloudformation describe-stack-events --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;change set&lt;/h3&gt;
&lt;p&gt;create change set after editing template file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation create-change-set --stack-name mystack --template-body file://mystack-001.yml --change-set-name mystack-001 --description 'create new Internet Gateway'
aws cloudformation list-change-sets --stack-name mystack 
aws cloudformation describe-change-set --stack-name mystack --change-set-name mystack-001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;execute the change set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation execute-change-set --stack-name mystack --change-set-name mystack-001
aws cloudformation list-change-sets --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;drift&lt;/h3&gt;
&lt;p&gt;detect stack drift after manual operation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation detect-stack-drift --stack-name mystack 
aws cloudformation describe-stack-resource-drifts --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create change set after editing template file to fit to current resource&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation create-change-set --stack-name mystack --template-body file://mystack-002.yml --change-set-name mystack-002 --description 'reflect manual operation'
aws cloudformation list-change-sets --stack-name mystack 
aws cloudformation describe-change-set --stack-name mystack --change-set-name mystack-002
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;execute the change set&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation execute-change-set --stack-name mystack --change-set-name mystack-002
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove change set when the status is false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation delete-change-set --stack-name mystack --change-set-name mystack-002
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;import&lt;/h3&gt;
&lt;p&gt;create template file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ diff -u template.yml.orig template.yml
+Parameters:
+  ImageId:
+    Type: AWS::EC2::Image::Id
+  InstanceType:
+    Type: String
+  KeyName:
+    Type: AWS::EC2::KeyPair::KeyName
+  SecurityGroupId:
+    Type: AWS::EC2::SecurityGroup::Id
+  SubnetId:
+    Type: AWS::EC2::Subnet::Id
+

+  ## EC2 instance
+  EC2Instance1:
+    Type: AWS::EC2::Instance
+    DeletionPolicy: Retain
+    Properties: 
+      InstanceType: !Ref InstanceType
+      ImageId: !Ref ImageId
+      KeyName: !Ref KeyName
+      NetworkInterfaces: 
+        - DeviceIndex: "0"
+          GroupSet:
+            - !Ref SecurityGroupId
+          SubnetId: !Ref SubnetId
+      BlockDeviceMappings: 
+        - DeviceName: "/dev/xvda"
+          Ebs: 
+            VolumeType: "gp3"
+            VolumeSize: "8"
+      CreditSpecification:
+        CPUCredits: "standard"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create parameter file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . parameters.json
[
  {
    "ParameterKey": "ImageId",
    "ParameterValue": "ami-007daaef51c7530e7"
  },
  {
    "ParameterKey": "InstanceType",
    "ParameterValue": "t4g.nano"
  },
  {
    "ParameterKey": "KeyName",
    "ParameterValue": "testkey"
  },
  {
    "ParameterKey": "SecurityGroupId",
    "ParameterValue": "sg-xxxxxxxxxxxxxxxxx"
  },
  {
    "ParameterKey": "SubnetId",
    "ParameterValue": "subnet-xxxxxxxxxxxxxxxxx"
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a resources-to-import file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . import.json 
[
  {
    "ResourceType": "AWS::EC2::Instance",
    "LogicalResourceId": "EC2Instance1",
    "ResourceIdentifier": {
      "InstanceId": "i-xxxxxxxxxxxxxxxxx"
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create change set for import and execute it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation validate-template --template-body file://template.yml
$ aws cloudformation create-change-set --stack-name mystack --change-set-name import-ec2instance --change-set-type IMPORT --resources-to-import file://import.json --template-body file://template.yml --parameters file://parameters.json
$ aws cloudformation describe-change-set --change-set-name import-ec2instance --stack-name mystack
$ aws cloudformation execute-change-set  --change-set-name import-ec2instance --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation describe-stacks --stack-name mystack
$ aws cloudformation describe-stack-events --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;detect stack drift&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation detect-stack-drift --stack-name mystack
$ aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id xxxxxxxxxxxxx-xxxx-xxxx-xxxxxxxxxxx
$ aws cloudformation describe-stack-resource-drifts --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If any drift exist, edit stack template to fit to current resource and create and execute change set.&lt;/p&gt;
&lt;p&gt;after that, change deletion policy to &lt;code&gt;Delete&lt;/code&gt; and update stack if needed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation update-stack --stack-name mystack --template-body file://template.yml --parameters file://parameters.json
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220810.html</guid><pubDate>Wed, 10 Aug 2022 00:00:00 GMT</pubDate></item><item><title>ami</title><link>https://mnod.github.io/posts/20220808.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;create AMI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 create-image --description 'backup ami of test server' --instance-id i-xxxx --name 'backup ami of test server' --no-reboot
aws ec2 deregister-image --image-id ami-xxxx 
aws ec2 describe-snapshots --owner-id xxxx --query 'Snapshots[?contains(Description, `ami-xxxx`)]'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create an instance with AMI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 run-instances \
--image-id ami-xxxx \
--instance-type t4g.nano \
--key-name testkey \
--security-group-ids sg-xxxx \
--subnet-id subnet-xxxx \
--credit-specification 'CpuCredits=standard' \
--tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=copied_instance}]' \
--associate-public-ip-address
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;delete AMI&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 deregister-image --image-id ami-xxxx 
aws ec2 describe-snapshots --owner-id xxxx --query 'Snapshots[?contains(Description, `ami-xxxx`)].SnapshotId'
aws ec2 delete-snapshot --snapshot-id snap-xxxx
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220808.html</guid><pubDate>Mon, 08 Aug 2022 00:00:00 GMT</pubDate></item><item><title>ebs</title><link>https://mnod.github.io/posts/20220807.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;create an EBS volume and attach to an EC2 instance&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 create-volume --availability-zone ap-northeast-1a --volume-type gp3 --size 1 --encrypted --tag-specifications 'ResourceType=volume,Tags=[{Key=Name,Value=test_volume}]'
aws ec2 describe-volumes --volume-id vol-xxxx
aws ec2 attach-volume --device /dev/xvdb --instance-id i-xxxx --volume-id vol-xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;make partition and make filesystem&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ lsblk
$ sudo parted /dev/nvme1n1 print
$ sudo parted /dev/nvme1n1 mklabel gpt
$ sudo parted /dev/nvme1n1 mkpart home ext4 1MB 100%

$ sudo mkfs -t ext4 /dev/nvme1n1p1
$ sudo tune2fs -L homefs /dev/nvme1n1p1
$ ls -l /dev/disk/by-label/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;edit /etc/fstab and reboot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount /dev/nvme1n1p1 /mnt
$ sudo cp -pri /home/ubuntu /mnt
$ sudo cp -pri /etc/fstab /etc/fstab.000
$ sudo vi /etc/fstab
$ diff /etc/fstab /etc/fstab.000
3d2

aws ec2 reboot-instances --instance-ids i-xxxx --dry-run
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;extend disk size&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 modify-volume --volume-id vol-xxxx --size 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extend partition and filesystem&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsblk
$ sudo growpart /dev/nvme1n1 1

$ df -hT /home
$ sudo resize2fs /dev/nvme1n1p1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create snapshot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 describe-snapshots --owner-id xxxx
aws ec2 create-snapshot --volume-id vol-xxxx --description 'test snapshot of homefs' --tag-specifications 'ResourceType=snapshot,Tags=[{Key=Name,Value=homefs}]'
aws ec2 describe-snapshots --owner-id xxxx --filters 'Name=volume-id,Values=vol-xxxx'
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;create new EBS volume from snapshot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 create-volume --availability-zone ap-northeast-1a --snapshot-id snap-xxxx --volume-type gp3 --encrypted --tag-specifications 'ResourceType=volume,Tags=[{Key=Name,Value=test_volume}]'
aws ec2 describe-volumes --volume-id vol-yyyy
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;attach new volume and detach old volume&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 attach-volume --device /dev/xvdc --instance-id i-xxxx --volume-id vol-yyyy
aws ec2 stop-instances --instance-ids i-xxxx
aws ec2 detach-volume --no-force --instance-id i-xxxx --volume-id vol-xxxx
aws ec2 start-instances --instance-ids i-xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;delete volume&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 delete-volume --volume-id vol-yyyy
aws ec2 describe-volumes
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;delete snapshot&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 describe-snapshots --owner-id xxxx
aws ec2 delete-snapshot --snapshot-id snap-xxxx
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20220807.html</guid><pubDate>Sun, 07 Aug 2022 00:00:00 GMT</pubDate></item><item><title>let's encrrypt</title><link>https://mnod.github.io/posts/20220627.html</link><dc:creator>mnod</dc:creator><description>&lt;pre&gt;&lt;code&gt;certbot certonly \
--dry-run \
-d www.example.net \
-m yourname@example.net \
--preferred-challenges dns-01  \
--server https://acme-v02.api.letsencrypt.org/directory \
--manual \
--manual-auth-hook /home/user/work/letsencrypt/dns01-auth.sh \
--manual-cleanup-hook /home/user/work/letsencrypt/dns01-clean.sh \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When you run certbot in non-root user, you have to specify --work-dir, --logs-dir, and --config-dir options.  These directories have to be writable with your user.&lt;/li&gt;
&lt;li&gt;You can only publish new certificate file via certbot. Your new certificate file will pushed under config-dir directory. Afterward, you can deploy it with your deploy tool which you like. &lt;/li&gt;
&lt;li&gt;The dns-01 challenge authentication only needs DNS validation and don't need to access via 80/tcp nor web server installation on your server.
When you use dns-01 challenge, you can use your script to update your dns resource to --manual-auth-hook (for authentication) and --manual-cleanup-hook (for cleanup entry).&lt;br&gt;
CERTBOT_DOMAIN varaible is used to show domain name which you want to use. CERTBOT_VALIDATION vaibale is used to show validation code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sample script which create validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-auth.sh"&gt;&lt;/script&gt;

&lt;p&gt;sample script which delete validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-clean.sh"&gt;&lt;/script&gt;

&lt;pre&gt;&lt;code&gt;certbot renew \
--dry-run \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Once you get your new certificate, you have to update your certificate periodically.&lt;/li&gt;
&lt;/ul&gt;</description><category>aws</category><category>linux</category><category>openssl</category><guid>https://mnod.github.io/posts/20220627.html</guid><pubDate>Mon, 27 Jun 2022 00:00:00 GMT</pubDate></item><item><title>ses</title><link>https://mnod.github.io/posts/20210428.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;aws command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ses list-identities
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;destination.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "ToAddresses": [
    "test@example.com"
  ],
  "CcAddresses": [],
  "BccAddresses": []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;message.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Subject": {
    "Data": "test mail",
    "Charset": "UTF-8"
  },
  "Body": {
    "Text": {
      "Data": "Hi.\n\nThis is a test mail.",
      "Charset": "UTF-8"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses send-email --from noreply@example.net --destination file://destination.json --message file://message.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "TemplateName": "testtemplate",
  "SubjectPart": "Greetings, {{name}}!",
  "TextPart": "Dear {{name}},\n\nYour favorite animal is {{favoriteanimal}}."
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses list-templates
aws ses create-template --template file://template.json
aws ses get-template --template testtemplate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template-parameters.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "name": "john",
  "favoriteanimal": "cat"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses test-render-template --template-name testtemplate --template-data file://template-data.json
aws ses send-templated-email --source noreply@example.net --destination file://destination.json --template testtemplate --template-data file://template-data.json
aws ses delete-template --template-name testtemplate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;python test script&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/usr/python

import boto3
import json

fromaddr = 'noreply@example.net'
destaddr = 'test@example.com'
destination = {
    'ToAddresses': [
        destaddr,
    ]
}

client = boto3.client('ses')

## send email
response = client.send_email(
    Source = fromaddr,
    Destination = destination,
    Message={
        'Subject': {
            'Data': 'test mail',
            'Charset': 'UTF-8'
        },
        'Body': {
            'Text': {
                'Data': 'Hi.\n\nThis is a test mail',
                'Charset': 'UTF-8'
            },
        }
    }
)
print(response)

templates = client.list_templates()
for template in templates['TemplatesMetadata']:
    response = client.get_template(
        TemplateName=template['Name']
    )
    print(response['Template'])

## create template
response = client.create_template(
    Template={
        "TemplateName": "testtemplate",
        "SubjectPart": "Greetings, {{name}}!",
        "TextPart": "Dear {{name}},\n\nYour favorite animal is {{favoriteanimal}}."
    }
)
templatedata = {
    "name": "john",
    "favoriteanimal": "cat"
}

## send templated email
response = client.send_templated_email(
    Source=fromaddr,
    Destination=destination,
    Template='testtemplate',
    TemplateData=json.dumps(templatedata)
)
print(response)

## delete template
response = client.delete_template(
    TemplateName='testtemplate'
)
print(response)

templates = client.list_templates()
for template in templates['TemplatesMetadata']:
    response = client.get_template(
        TemplateName=template['Name']
    )
    print(response['Template'])

&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20210428.html</guid><pubDate>Wed, 28 Apr 2021 00:00:00 GMT</pubDate></item><item><title>route53</title><link>https://mnod.github.io/posts/20210422.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;aws command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws route53 list-hosted-zones
aws route53 get-hosted-zone --id /hostedzone/xxxxxxxxxxxxxxxxxxxxx

aws route53 list-resource-record-sets   --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --query "ResourceRecordSets[?Name == 'example.example.net.']"
aws route53 test-dns-answer --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --record-name "example.example.net" --record-type "A"

aws route53 change-resource-record-sets  --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --change-batch file://create.json
aws route53 get-change --id /change/xxxxxxxxxxxxxxxxxxxx
aws route53 change-resource-record-sets  --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --change-batch file://delete.json
aws route53 get-change --id /change/xxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Changes": [
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "example.example.net",
        "Type": "A",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxx.xxx.xxx.xxx"
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Changes": [
    {
      "Action": "DELETE",
      "ResourceRecordSet": {
        "Name": "example.example.net",
        "Type": "A",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxx.xxx.xxx.xxx"
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;python sample script&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python2
import boto3
import time

client = boto3.client('route53')
zones = client.list_hosted_zones()

for zone in zones['HostedZones']:
    id =zone['Id']
    name = zone['Name']
    #print(client.get_hosted_zone(Id=id).get('HostedZone'))
    for set in client.list_resource_record_sets(HostedZoneId=id).get('ResourceRecordSets'):
        print(set)
    #action = 'CREATE'
    action = 'DELETE'
    address = 'xxx.xxx.xxx.xxx'

    batch = {
        'Changes': [
            {
                'Action': action,
                'ResourceRecordSet': {
                    'Name': 'example.%s' % name,
                    'Type': 'A',
                    'TTL': 3600,
                    'ResourceRecords': [
                        {
                            "Value": address
                        },
                    ],
                }
            },
        ]
    }
    response = client.change_resource_record_sets(
        HostedZoneId=id,
        ChangeBatch=batch
    )
    print(response)
    responseid = response['ChangeInfo']['Id']
    status = response['ChangeInfo']['Status']
    while ( status != 'INSYNC'):
        response = client.get_change(Id=responseid)
        status = response['ChangeInfo']['Status']
        time.sleep(30)
    else:
        print(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;cloud formation sample stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://route53.yml
aws cloudformation create-stack --template-body file://route53.yml --parameters file://parameters.json --stack-name route53test
aws cloudformation describe-stack-events --stack-name route53test
aws cloudformation list-stack-resources --stack-name route53test
aws cloudformation delete-stack --stack-name route53test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;route53.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters:
  HostedZoneId:
    Type: String
  Domain:
    Type: String
  Address:
    Type: String
Resources:
  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : 
         Ref: HostedZoneId
      Name:  
        Fn::Join: 
            - '.'
            - - 'example'
              - !Ref Domain
      ResourceRecords:
      - Ref: Address
      TTL: '3600'
      Type: A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;parameters.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  {
      "ParameterKey": "Address",
      "ParameterValue": "xxx.xxx.xxx.xxx"
  },
  {
      "ParameterKey": "HostedZoneId",
      "ParameterValue": "xxxxxxxxxxxxxxxxxxxxx"
  },
  {
      "ParameterKey": "Domain",
      "ParameterValue": "example.net"
  }
]
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20210422.html</guid><pubDate>Thu, 22 Apr 2021 00:00:00 GMT</pubDate></item><item><title>CloudWatch Events</title><link>https://mnod.github.io/posts/20201028.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;create and delete rule&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws events list-rules
$ aws events put-rule --name testrule --schedule-expression "rate(60 minutes)"  --state DISABLED
$ aws events enable-rule --name testrule
$ aws events disable-rule --name testrule
$ aws events delete-rule --name testrule
$ aws events describe-rule --name testrule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create and remove targets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws events put-targets --rule testrule --targets '{"Input":"{\"interval\":60,\"rss\":\"https://status.aws.amazon.com/rss/ec2-ap-northeast-1.rss\",\"topicarn\":\"arn:aws:sns:ap-northeast-1:xxxxxxxxxxxx:mysnstopic\"}","Id":"1","Arn":"arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:mylambdafunction"}'
$ aws events remove-targets --rule testrule --ids 1
$ aws events list-targets-by-rule --rule testrule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CloudFormation stack template sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EventsRuleRssNotify:
  Type: 'AWS::Events::Rule'
  Properties:
    Description: 'rss notification'
    Name: rssnotifycf
    ScheduleExpression: 'rate(15 minutes)'
    State: ENABLED
    Targets:
      - Arn: !GetAtt LambdaRssNotification.Arn
        Id: "1"
        Input: !Ref INPUTJSON
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20201028.html</guid><pubDate>Wed, 28 Oct 2020 00:00:00 GMT</pubDate></item><item><title>ecs</title><link>https://mnod.github.io/posts/20200209.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;cluster&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-clusters 
$ aws ecs describe-clusters --clusters &amp;lt;clusterArn&amp;gt;

$ aws ecs create-cluster --cluster-name &amp;lt;cluster-name&amp;gt; --tags '[{"key": "Name","value": "test"}]'
$ aws ecs delete-cluster --cluster &amp;lt;clusterArn&amp;gt;

$ aws ecs delete-cluster --cluster &amp;lt;clusterArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;task definition&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-task-definitions
$ aws ecs describe-task-definition --task-definition &amp;lt;taskDefinitionArn&amp;gt;

$ jq . task-definition.json
{
  "family": "sample-fargate",
  "networkMode": "awsvpc",
  "containerDefinitions": [
    {
      "name": "fargate-app",
      "image": "busybox",
      "essential": true,
      "command": [
        "sleep",
        "360"
      ]
    }
  ],
  "requiresCompatibilities": [
    "FARGATE"
  ],
  "cpu": "256",
  "memory": "512"
}
$ aws ecs register-task-definition --cli-input-json file://task-definition.json

$ aws ecs deregister-task-definition --task-definition &amp;lt;taskDefinitionArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;task&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When you use fargate and retrieve docker image from docker hub, you have to use internet gateway or nat gateway in the vpc.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-tasks --cluster &amp;lt;clusterArn&amp;gt;
$ aws ecs describe-tasks --cluster &amp;lt;clusterArn&amp;gt; --tasks &amp;lt;taskArn&amp;gt;

$ jq . network-configuration.json
{
  "awsvpcConfiguration": {
    "subnets": [
      "&amp;lt;subnet&amp;gt;"
    ],
    "securityGroups": [
      "&amp;lt;securitygroup&amp;gt;"
    ],
    "assignPublicIp": "ENABLED"
  }
}
$ aws ecs run-task --task-definition &amp;lt;taskDefinitionArn&amp;gt; --cluster &amp;lt;clusterArn&amp;gt; --count 1 --launch-type FARGATE --network-configuration file://network-configuration.json

$ aws ecs stop-task --cluster &amp;lt;clusterArn&amp;gt; --task &amp;lt;taskArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-tags-for-resource --resource-arn &amp;lt;resource-arn&amp;gt;
$ aws ecs tag-resource --resource-arn &amp;lt;resource-arn&amp;gt; --tags '[{"key": "Name","value": "test"}]'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;service&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-services --cluster &amp;lt;clusterArn&amp;gt;
$ aws ecs describe-services --cluster &amp;lt;clusterArn&amp;gt; --services &amp;lt;serviceArn&amp;gt;
$ aws ecs create-service --cluster &amp;lt;clusterArn&amp;gt; --service-name &amp;lt;serviceName&amp;gt; --task-definition &amp;lt;task-definition&amp;gt; --desired-count 1 --launch-type FARGATE --network-configuration file://network-configuration.json

$ aws ecs list-tasks --cluster &amp;lt;clusterArn&amp;gt;
$ aws ecs describe-tasks --cluster &amp;lt;clusterArn&amp;gt; --tasks &amp;lt;taskArn&amp;gt;

$ aws ecs update-service --cluster &amp;lt;clusterArn&amp;gt; --service &amp;lt;serviceArn&amp;gt; --desired-count 0
$ aws ecs delete-service --cluster &amp;lt;clusterArn&amp;gt; --service &amp;lt;serviceArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200209.html</guid><pubDate>Sun, 09 Feb 2020 00:00:00 GMT</pubDate></item><item><title>dynamodb</title><link>https://mnod.github.io/posts/20200128.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;create and delete table&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb list-tables
$ aws dynamodb describe-table --table-name testtable
$ aws dynamodb create-table --table-name testtable  \
 --attribute-definitions '[{"AttributeName":"Artist","AttributeType":"S"},{"AttributeName":"AlbumTitle","AttributeType":"S"}]' \
 --key-schema '[{"AttributeName":"Artist","KeyType":"HASH"},{"AttributeName":"AlbumTitle","KeyType":"RANGE"}]' \
 --provisioned-throughput '{"ReadCapacityUnits": 1,"WriteCapacityUnits": 1}' \
 --tags '[{"Key": "Name","Value": "test"}]'

$ aws dynamodb delete-table --table-name testtable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;put item&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.' put-item.json
{
  "Artist": {
    "S": "The Beatles"
  },
  "AlbumTitle": {
    "S": "Please Please Me"
  },
  "songs": {
    "L": [
      {
        "S": "I Saw Her Standing There"
      },
      {
        "S": "Misery"
      }
    ]
  }
}
$ aws dynamodb put-item --table-name testtable --item file://put-item.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;get and delete item&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb get-item --table-name testtable --key '{ "Artist": { "S": "The Beatles" },"AlbumTitle": { "S": "Please Please Me" } }'
$ aws dynamodb delete-item --table-name testtable --key '{ "Artist": { "S": "The Beatles" },"AlbumTitle": { "S": "Please Please Me" } }'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;backup and restore database&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;create backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb list-backups --table-name testtable
$ aws dynamodb create-backup --table-name testtable --backup-name testtablebackup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;describe backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb describe-backup --backup-arn $(aws dynamodb list-backups --table-name "testtable" --query 'max_by(BackupSummaries[?BackupName == `testtablebackup`], &amp;amp;BackupCreationDateTime).BackupArn' | jq -r .)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restore from newest backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb delete-table --table-name testtable
$ aws dynamodb restore-table-from-backup --target-table-name testtable --backup-arn $(aws dynamodb list-backups --table-name "testtable" --query 'max_by(BackupSummaries[?BackupName == `testtablebackup`], &amp;amp;BackupCreationDateTime).BackupArn' | jq -r .)
$ aws dynamodb describe-table --table-name testtable --query 'Table.TableStatus'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove oldest backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb delete-backup --backup-arn $(aws dynamodb list-backups --table-name "testtable" --query 'max_by(BackupSummaries[?BackupName == `testtablebackup`], &amp;amp;BackupCreationDateTime).BackupArn' | jq -r .)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample python script&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;put-item.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python3
import boto3
import json

tablename = 'testtable'
item = {
  "Artist": {
    "S": "The Beatles"
  },
  "AlbumTitle": {
    "S": "Please Please Me"
  },
  "songs": {
    "L": [
      {
        "S": "I Saw Her Standing There"
      },
      {
        "S": "Misery"
      }
    ]
  }
}

dynamo = boto3.client('dynamodb')
res = dynamo.put_item(TableName=tablename, Item=item)
print (json.dumps(res))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get-item.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python3
import boto3
import json

tablename = 'testtable'
key = {
  "Artist": { "S": "The Beatles" },
  "AlbumTitle": { "S": "Please Please Me" }
}

dynamo = boto3.client('dynamodb')
res = dynamo.get_item(TableName=tablename, Key=key)
print (json.dumps(res))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete-item.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python3
import boto3
import json

tablename = 'testtable'
key = {
  "Artist": { "S": "The Beatles" },
  "AlbumTitle": { "S": "Please Please Me" }
}

dynamo = boto3.client('dynamodb')
res = dynamo.delete_item(TableName=tablename, Key=key)
print (json.dumps(res))
# print (json.dumps(res['ResponseMetadata']['HTTPStatusCode']))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;cloudformation template&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    TestDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "TestDynamoDBTable"
        Tags:
          - Key: "Name"
            Value: "test"
        AttributeDefinitions:
          - AttributeName: "subject"
            AttributeType: "S"
          - AttributeName: "year"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "subject"
            KeyType: "HASH"
          - AttributeName: "year"
            KeyType: "RANGE"
        BillingMode: "PROVISIONED"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200128.html</guid><pubDate>Tue, 28 Jan 2020 00:00:00 GMT</pubDate></item><item><title>aws</title><link>https://mnod.github.io/posts/20200125.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;query with JMESPath&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;projection&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[].VpcId'
$ aws ec2 describe-vpcs --query 'Vpcs[].{VpcId:VpcId, IsDefault:IsDefault}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;selection
(if the targe command has &lt;code&gt;filters&lt;/code&gt; option, it would be faster than &lt;code&gt;query&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[?IsDefault == `true`]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true'

$ aws ec2 describe-vpcs --query 'Vpcs[?Tags[?Key == `Name` &amp;amp;&amp;amp; Value == `test`]]'
$ aws ec2 describe-vpcs --filters 'Name=tag:Name,Values=test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[?contains(VpcId, `vpc`)].VpcId'

$ aws ec2 describe-vpcs --query 'sort_by(Vpcs[?contains(VpcId, `vpc`)].VpcId, &amp;amp;VpcId)'
$ aws ec2 describe-images --filters "Name=owner-id,Values=&amp;lt;id&amp;gt;" --query "sort_by(Images[].{Name:Name, ImageId:ImageId}, &amp;amp;Name)"

$ aws ec2 describe-vpcs --query 'length(Vpcs[?contains(VpcId, `vpc`)])'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;generate-cli-skeleton output&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --generate-cli-skeleton output
$ aws ec2 describe-vpcs --generate-cli-skeleton output --query 'Vpcs[].{CidrBlock:CidrBlock, VpcId:VpcId}'
$ aws ec2 describe-vpcs --query 'Vpcs[].{CidrBlock:CidrBlock, VpcId:VpcId}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;generate-cli-skeleton input&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --generate-cli-skeleton input | tee describe-vpcs.json
$ vi describe-vpcs.json
$ jq . describe-vpcs.json
{
  "Filters": [
    {
      "Name": "tag:Name",
      "Values": [
        "test"
      ]
    }
  ]
}
$ aws ec2 describe-vpcs --cli-input-json file://describe-vpcs.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;samples of filter&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --filters '["Name":"isDefault","Values":["true"]]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true'

$ aws ec2 describe-vpcs --filters '[{"Name":"tag-key","Values":["aws:cloudformation:stack-name"]}]'
$ aws ec2 describe-vpcs --filters 'Name=tag-key,Values=aws:cloudformation:stack-name'

$ aws ec2 describe-vpcs --filters '[{"Name":"tag:Name","Values":["terraform_test","mystack-VPC"]}]'
$ aws ec2 describe-vpcs --filters 'Name=tag:Name,Values=terraform_test,mystack-VPC'

$ aws ec2 describe-vpcs --filters '[{"Name":"isDefault","Values":["false"]}, {"Name":"state","Values":["available"]}]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true','Name=state,Values=available'
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><category>json</category><guid>https://mnod.github.io/posts/20200125.html</guid><pubDate>Sat, 25 Jan 2020 00:00:00 GMT</pubDate></item></channel></rss>