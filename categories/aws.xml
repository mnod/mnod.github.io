<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about aws)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/aws.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sun, 03 Jul 2022 09:32:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>let's encrrypt</title><link>https://mnod.github.io/posts/20220627.html</link><dc:creator>mnod</dc:creator><description>&lt;pre&gt;&lt;code&gt;certbot certonly \
--dry-run \
-d www.example.net \
-m yourname@example.net \
--preferred-challenges dns-01  \
--server https://acme-v02.api.letsencrypt.org/directory \
--manual \
--manual-auth-hook /home/user/work/letsencrypt/dns01-auth.sh \
--manual-cleanup-hook /home/user/work/letsencrypt/dns01-clean.sh \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When you run certbot in non-root user, you have to specify --work-dir, --logs-dir, and --config-dir options.  These directories have to be writable with your user.&lt;/li&gt;
&lt;li&gt;You can only publish new certificate file via certbot. Your new certificate file will pushed under config-dir directory. Afterward, you can deploy it with your deploy tool which you like. &lt;/li&gt;
&lt;li&gt;The dns-01 challenge authentication only needs DNS validation and don't need to access via 80/tcp nor web server installation on your server.
When you use dns-01 challenge, you can use your script to update your dns resource to --manual-auth-hook (for authentication) and --manual-cleanup-hook (for cleanup entry).&lt;br&gt;
CERTBOT_DOMAIN varaible is used to show domain name which you want to use. CERTBOT_VALIDATION vaibale is used to show validation code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sample script which create validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-auth.sh"&gt;&lt;/script&gt;

&lt;p&gt;sample script which delete validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-clean.sh"&gt;&lt;/script&gt;

&lt;pre&gt;&lt;code&gt;certbot renew \
--dry-run \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Once you get your new certificate, you have to update your certificate periodically.&lt;/li&gt;
&lt;/ul&gt;</description><category>aws</category><category>linux</category><category>openssl</category><guid>https://mnod.github.io/posts/20220627.html</guid><pubDate>Mon, 27 Jun 2022 00:00:00 GMT</pubDate></item><item><title>ses</title><link>https://mnod.github.io/posts/20210428.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;aws command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws ses list-identities
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;destination.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "ToAddresses": [
    "test@example.com"
  ],
  "CcAddresses": [],
  "BccAddresses": []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;message.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Subject": {
    "Data": "test mail",
    "Charset": "UTF-8"
  },
  "Body": {
    "Text": {
      "Data": "Hi.\n\nThis is a test mail.",
      "Charset": "UTF-8"
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses send-email --from noreply@example.net --destination file://destination.json --message file://message.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "TemplateName": "testtemplate",
  "SubjectPart": "Greetings, {{name}}!",
  "TextPart": "Dear {{name}},\n\nYour favorite animal is {{favoriteanimal}}."
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses list-templates
aws ses create-template --template file://template.json
aws ses get-template --template testtemplate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;template-parameters.json &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "name": "john",
  "favoriteanimal": "cat"
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;aws ses test-render-template --template-name testtemplate --template-data file://template-data.json
aws ses send-templated-email --source noreply@example.net --destination file://destination.json --template testtemplate --template-data file://template-data.json
aws ses delete-template --template-name testtemplate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;python test script&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/usr/python

import boto3
import json

fromaddr = 'noreply@example.net'
destaddr = 'test@example.com'
destination = {
    'ToAddresses': [
        destaddr,
    ]
}

client = boto3.client('ses')

## send email
response = client.send_email(
    Source = fromaddr,
    Destination = destination,
    Message={
        'Subject': {
            'Data': 'test mail',
            'Charset': 'UTF-8'
        },
        'Body': {
            'Text': {
                'Data': 'Hi.\n\nThis is a test mail',
                'Charset': 'UTF-8'
            },
        }
    }
)
print(response)

templates = client.list_templates()
for template in templates['TemplatesMetadata']:
    response = client.get_template(
        TemplateName=template['Name']
    )
    print(response['Template'])

## create template
response = client.create_template(
    Template={
        "TemplateName": "testtemplate",
        "SubjectPart": "Greetings, {{name}}!",
        "TextPart": "Dear {{name}},\n\nYour favorite animal is {{favoriteanimal}}."
    }
)
templatedata = {
    "name": "john",
    "favoriteanimal": "cat"
}

## send templated email
response = client.send_templated_email(
    Source=fromaddr,
    Destination=destination,
    Template='testtemplate',
    TemplateData=json.dumps(templatedata)
)
print(response)

## delete template
response = client.delete_template(
    TemplateName='testtemplate'
)
print(response)

templates = client.list_templates()
for template in templates['TemplatesMetadata']:
    response = client.get_template(
        TemplateName=template['Name']
    )
    print(response['Template'])

&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20210428.html</guid><pubDate>Wed, 28 Apr 2021 00:00:00 GMT</pubDate></item><item><title>route53</title><link>https://mnod.github.io/posts/20210422.html</link><dc:creator>mnod</dc:creator><description>&lt;h3&gt;aws command&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws route53 list-hosted-zones
aws route53 get-hosted-zone --id /hostedzone/xxxxxxxxxxxxxxxxxxxxx

aws route53 list-resource-record-sets   --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --query "ResourceRecordSets[?Name == 'example.example.net.']"
aws route53 test-dns-answer --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --record-name "example.example.net" --record-type "A"

aws route53 change-resource-record-sets  --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --change-batch file://create.json
aws route53 get-change --id /change/xxxxxxxxxxxxxxxxxxxx
aws route53 change-resource-record-sets  --hosted-zone-id /hostedzone/xxxxxxxxxxxxxxxxxxxxx --change-batch file://delete.json
aws route53 get-change --id /change/xxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Changes": [
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "example.example.net",
        "Type": "A",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxx.xxx.xxx.xxx"
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  "Changes": [
    {
      "Action": "DELETE",
      "ResourceRecordSet": {
        "Name": "example.example.net",
        "Type": "A",
        "TTL": 3600,
        "ResourceRecords": [
          {
            "Value": "xxx.xxx.xxx.xxx"
          }
        ]
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;python sample script&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python2
import boto3
import time

client = boto3.client('route53')
zones = client.list_hosted_zones()

for zone in zones['HostedZones']:
    id =zone['Id']
    name = zone['Name']
    #print(client.get_hosted_zone(Id=id).get('HostedZone'))
    for set in client.list_resource_record_sets(HostedZoneId=id).get('ResourceRecordSets'):
        print(set)
    #action = 'CREATE'
    action = 'DELETE'
    address = 'xxx.xxx.xxx.xxx'

    batch = {
        'Changes': [
            {
                'Action': action,
                'ResourceRecordSet': {
                    'Name': 'example.%s' % name,
                    'Type': 'A',
                    'TTL': 3600,
                    'ResourceRecords': [
                        {
                            "Value": address
                        },
                    ],
                }
            },
        ]
    }
    response = client.change_resource_record_sets(
        HostedZoneId=id,
        ChangeBatch=batch
    )
    print(response)
    responseid = response['ChangeInfo']['Id']
    status = response['ChangeInfo']['Status']
    while ( status != 'INSYNC'):
        response = client.get_change(Id=responseid)
        status = response['ChangeInfo']['Status']
        time.sleep(30)
    else:
        print(response)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;cloud formation sample stack&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aws cloudformation validate-template --template-body file://route53.yml
aws cloudformation create-stack --template-body file://route53.yml --parameters file://parameters.json --stack-name route53test
aws cloudformation describe-stack-events --stack-name route53test
aws cloudformation list-stack-resources --stack-name route53test
aws cloudformation delete-stack --stack-name route53test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;route53.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters:
  HostedZoneId:
    Type: String
  Domain:
    Type: String
  Address:
    Type: String
Resources:
  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : 
         Ref: HostedZoneId
      Name:  
        Fn::Join: 
            - '.'
            - - 'example'
              - !Ref Domain
      ResourceRecords:
      - Ref: Address
      TTL: '3600'
      Type: A
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;parameters.json&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
  {
      "ParameterKey": "Address",
      "ParameterValue": "xxx.xxx.xxx.xxx"
  },
  {
      "ParameterKey": "HostedZoneId",
      "ParameterValue": "xxxxxxxxxxxxxxxxxxxxx"
  },
  {
      "ParameterKey": "Domain",
      "ParameterValue": "example.net"
  }
]
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20210422.html</guid><pubDate>Thu, 22 Apr 2021 00:00:00 GMT</pubDate></item><item><title>CloudWatch Events</title><link>https://mnod.github.io/posts/20201028.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;create and delete rule&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws events list-rules
$ aws events put-rule --name testrule --schedule-expression "rate(60 minutes)"  --state DISABLED
$ aws events enable-rule --name testrule
$ aws events disable-rule --name testrule
$ aws events delete-rule --name testrule
$ aws events describe-rule --name testrule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create and remove targets&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws events put-targets --rule testrule --targets '{"Input":"{\"interval\":60,\"rss\":\"https://status.aws.amazon.com/rss/ec2-ap-northeast-1.rss\",\"topicarn\":\"arn:aws:sns:ap-northeast-1:xxxxxxxxxxxx:mysnstopic\"}","Id":"1","Arn":"arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:mylambdafunction"}'
$ aws events remove-targets --rule testrule --ids 1
$ aws events list-targets-by-rule --rule testrule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CloudFormation stack template sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EventsRuleRssNotify:
  Type: 'AWS::Events::Rule'
  Properties:
    Description: 'rss notification'
    Name: rssnotifycf
    ScheduleExpression: 'rate(15 minutes)'
    State: ENABLED
    Targets:
      - Arn: !GetAtt LambdaRssNotification.Arn
        Id: "1"
        Input: !Ref INPUTJSON
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20201028.html</guid><pubDate>Wed, 28 Oct 2020 00:00:00 GMT</pubDate></item><item><title>ecs</title><link>https://mnod.github.io/posts/20200209.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;cluster&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-clusters 
$ aws ecs describe-clusters --clusters &amp;lt;clusterArn&amp;gt;

$ aws ecs create-cluster --cluster-name &amp;lt;cluster-name&amp;gt; --tags '[{"key": "Name","value": "test"}]'
$ aws ecs delete-cluster --cluster &amp;lt;clusterArn&amp;gt;

$ aws ecs delete-cluster --cluster &amp;lt;clusterArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;task definition&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-task-definitions
$ aws ecs describe-task-definition --task-definition &amp;lt;taskDefinitionArn&amp;gt;

$ jq . task-definition.json
{
  "family": "sample-fargate",
  "networkMode": "awsvpc",
  "containerDefinitions": [
    {
      "name": "fargate-app",
      "image": "busybox",
      "essential": true,
      "command": [
        "sleep",
        "360"
      ]
    }
  ],
  "requiresCompatibilities": [
    "FARGATE"
  ],
  "cpu": "256",
  "memory": "512"
}
$ aws ecs register-task-definition --cli-input-json file://task-definition.json

$ aws ecs deregister-task-definition --task-definition &amp;lt;taskDefinitionArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;task&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When you use fargate and retrieve docker image from docker hub, you have to use internet gateway or nat gateway in the vpc.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-tasks --cluster &amp;lt;clusterArn&amp;gt;
$ aws ecs describe-tasks --cluster &amp;lt;clusterArn&amp;gt; --tasks &amp;lt;taskArn&amp;gt;

$ jq . network-configuration.json
{
  "awsvpcConfiguration": {
    "subnets": [
      "&amp;lt;subnet&amp;gt;"
    ],
    "securityGroups": [
      "&amp;lt;securitygroup&amp;gt;"
    ],
    "assignPublicIp": "ENABLED"
  }
}
$ aws ecs run-task --task-definition &amp;lt;taskDefinitionArn&amp;gt; --cluster &amp;lt;clusterArn&amp;gt; --count 1 --launch-type FARGATE --network-configuration file://network-configuration.json

$ aws ecs stop-task --cluster &amp;lt;clusterArn&amp;gt; --task &amp;lt;taskArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;tags&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-tags-for-resource --resource-arn &amp;lt;resource-arn&amp;gt;
$ aws ecs tag-resource --resource-arn &amp;lt;resource-arn&amp;gt; --tags '[{"key": "Name","value": "test"}]'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;service&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ecs list-services --cluster &amp;lt;clusterArn&amp;gt;
$ aws ecs describe-services --cluster &amp;lt;clusterArn&amp;gt; --services &amp;lt;serviceArn&amp;gt;
$ aws ecs create-service --cluster &amp;lt;clusterArn&amp;gt; --service-name &amp;lt;serviceName&amp;gt; --task-definition &amp;lt;task-definition&amp;gt; --desired-count 1 --launch-type FARGATE --network-configuration file://network-configuration.json

$ aws ecs list-tasks --cluster &amp;lt;clusterArn&amp;gt;
$ aws ecs describe-tasks --cluster &amp;lt;clusterArn&amp;gt; --tasks &amp;lt;taskArn&amp;gt;

$ aws ecs update-service --cluster &amp;lt;clusterArn&amp;gt; --service &amp;lt;serviceArn&amp;gt; --desired-count 0
$ aws ecs delete-service --cluster &amp;lt;clusterArn&amp;gt; --service &amp;lt;serviceArn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200209.html</guid><pubDate>Sun, 09 Feb 2020 00:00:00 GMT</pubDate></item><item><title>dynamodb</title><link>https://mnod.github.io/posts/20200128.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;create and delete table&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb list-tables
$ aws dynamodb describe-table --table-name testtable
$ aws dynamodb create-table --table-name testtable  \
 --attribute-definitions '[{"AttributeName":"Artist","AttributeType":"S"},{"AttributeName":"AlbumTitle","AttributeType":"S"}]' \
 --key-schema '[{"AttributeName":"Artist","KeyType":"HASH"},{"AttributeName":"AlbumTitle","KeyType":"RANGE"}]' \
 --provisioned-throughput '{"ReadCapacityUnits": 1,"WriteCapacityUnits": 1}' \
 --tags '[{"Key": "Name","Value": "test"}]'

$ aws dynamodb delete-table --table-name testtable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;put item&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.' put-item.json
{
  "Artist": {
    "S": "The Beatles"
  },
  "AlbumTitle": {
    "S": "Please Please Me"
  },
  "songs": {
    "L": [
      {
        "S": "I Saw Her Standing There"
      },
      {
        "S": "Misery"
      }
    ]
  }
}
$ aws dynamodb put-item --table-name testtable --item file://put-item.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;get and delete item&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb get-item --table-name testtable --key '{ "Artist": { "S": "The Beatles" },"AlbumTitle": { "S": "Please Please Me" } }'
$ aws dynamodb delete-item --table-name testtable --key '{ "Artist": { "S": "The Beatles" },"AlbumTitle": { "S": "Please Please Me" } }'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;backup and restore database&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;create backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb list-backups --table-name testtable
$ aws dynamodb create-backup --table-name testtable --backup-name testtablebackup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;describe backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb describe-backup --backup-arn $(aws dynamodb list-backups --table-name "testtable" --query 'max_by(BackupSummaries[?BackupName == `testtablebackup`], &amp;amp;BackupCreationDateTime).BackupArn' | jq -r .)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restore from newest backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb delete-table --table-name testtable
$ aws dynamodb restore-table-from-backup --target-table-name testtable --backup-arn $(aws dynamodb list-backups --table-name "testtable" --query 'max_by(BackupSummaries[?BackupName == `testtablebackup`], &amp;amp;BackupCreationDateTime).BackupArn' | jq -r .)
$ aws dynamodb describe-table --table-name testtable --query 'Table.TableStatus'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove oldest backup&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws dynamodb delete-backup --backup-arn $(aws dynamodb list-backups --table-name "testtable" --query 'max_by(BackupSummaries[?BackupName == `testtablebackup`], &amp;amp;BackupCreationDateTime).BackupArn' | jq -r .)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample python script&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;put-item.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python3
import boto3
import json

tablename = 'testtable'
item = {
  "Artist": {
    "S": "The Beatles"
  },
  "AlbumTitle": {
    "S": "Please Please Me"
  },
  "songs": {
    "L": [
      {
        "S": "I Saw Her Standing There"
      },
      {
        "S": "Misery"
      }
    ]
  }
}

dynamo = boto3.client('dynamodb')
res = dynamo.put_item(TableName=tablename, Item=item)
print (json.dumps(res))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get-item.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python3
import boto3
import json

tablename = 'testtable'
key = {
  "Artist": { "S": "The Beatles" },
  "AlbumTitle": { "S": "Please Please Me" }
}

dynamo = boto3.client('dynamodb')
res = dynamo.get_item(TableName=tablename, Key=key)
print (json.dumps(res))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;delete-item.py&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/python3
import boto3
import json

tablename = 'testtable'
key = {
  "Artist": { "S": "The Beatles" },
  "AlbumTitle": { "S": "Please Please Me" }
}

dynamo = boto3.client('dynamodb')
res = dynamo.delete_item(TableName=tablename, Key=key)
print (json.dumps(res))
# print (json.dumps(res['ResponseMetadata']['HTTPStatusCode']))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;cloudformation template&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    TestDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "TestDynamoDBTable"
        Tags:
          - Key: "Name"
            Value: "test"
        AttributeDefinitions:
          - AttributeName: "subject"
            AttributeType: "S"
          - AttributeName: "year"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "subject"
            KeyType: "HASH"
          - AttributeName: "year"
            KeyType: "RANGE"
        BillingMode: "PROVISIONED"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200128.html</guid><pubDate>Tue, 28 Jan 2020 00:00:00 GMT</pubDate></item><item><title>aws</title><link>https://mnod.github.io/posts/20200125.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;query with JMESPath&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;projection&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[].VpcId'
$ aws ec2 describe-vpcs --query 'Vpcs[].{VpcId:VpcId, IsDefault:IsDefault}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;selection
(if the targe command has &lt;code&gt;filters&lt;/code&gt; option, it would be faster than &lt;code&gt;query&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[?IsDefault == `true`]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true'

$ aws ec2 describe-vpcs --query 'Vpcs[?Tags[?Key == `Name` &amp;amp;&amp;amp; Value == `test`]]'
$ aws ec2 describe-vpcs --filters 'Name=tag:Name,Values=test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[?contains(VpcId, `vpc`)].VpcId'

$ aws ec2 describe-vpcs --query 'sort_by(Vpcs[?contains(VpcId, `vpc`)].VpcId, &amp;amp;VpcId)'
$ aws ec2 describe-images --filters "Name=owner-id,Values=&amp;lt;id&amp;gt;" --query "sort_by(Images[].{Name:Name, ImageId:ImageId}, &amp;amp;Name)"

$ aws ec2 describe-vpcs --query 'length(Vpcs[?contains(VpcId, `vpc`)])'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;generate-cli-skeleton output&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --generate-cli-skeleton output
$ aws ec2 describe-vpcs --generate-cli-skeleton output --query 'Vpcs[].{CidrBlock:CidrBlock, VpcId:VpcId}'
$ aws ec2 describe-vpcs --query 'Vpcs[].{CidrBlock:CidrBlock, VpcId:VpcId}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;generate-cli-skeleton input&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --generate-cli-skeleton input | tee describe-vpcs.json
$ vi describe-vpcs.json
$ jq . describe-vpcs.json
{
  "Filters": [
    {
      "Name": "tag:Name",
      "Values": [
        "test"
      ]
    }
  ]
}
$ aws ec2 describe-vpcs --cli-input-json file://describe-vpcs.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;samples of filter&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --filters '["Name":"isDefault","Values":["true"]]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true'

$ aws ec2 describe-vpcs --filters '[{"Name":"tag-key","Values":["aws:cloudformation:stack-name"]}]'
$ aws ec2 describe-vpcs --filters 'Name=tag-key,Values=aws:cloudformation:stack-name'

$ aws ec2 describe-vpcs --filters '[{"Name":"tag:Name","Values":["terraform_test","mystack-VPC"]}]'
$ aws ec2 describe-vpcs --filters 'Name=tag:Name,Values=terraform_test,mystack-VPC'

$ aws ec2 describe-vpcs --filters '[{"Name":"isDefault","Values":["false"]}, {"Name":"state","Values":["available"]}]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true','Name=state,Values=available'
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><category>json</category><guid>https://mnod.github.io/posts/20200125.html</guid><pubDate>Sat, 25 Jan 2020 00:00:00 GMT</pubDate></item><item><title>vpc</title><link>https://mnod.github.io/posts/20200119.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;describe region and abailability zone&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-regions --filters 'Name=region-name,Values=ap-northeast-1'
{
    "Regions": [
        {
            "Endpoint": "ec2.ap-northeast-1.amazonaws.com",
            "RegionName": "ap-northeast-1",
            "OptInStatus": "opt-in-not-required"
        }
    ]
}
$ aws ec2 describe-availability-zones --filters 'Name=region-name,Values=ap-northeast-1'
{
    "AvailabilityZones": [
        {
            "State": "available",
            "Messages": [],
            "RegionName": "ap-northeast-1",
            "ZoneName": "ap-northeast-1a",
            "ZoneId": "apne1-az4"
        },
        {
            "State": "available",
            "Messages": [],
            "RegionName": "ap-northeast-1",
            "ZoneName": "ap-northeast-1c",
            "ZoneId": "apne1-az1"
        },
        {
            "State": "available",
            "Messages": [],
            "RegionName": "ap-northeast-1",
            "ZoneName": "ap-northeast-1d",
            "ZoneId": "apne1-az2"
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;vpc&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --filter "Name=cidr,Values=172.16.100.0/24"
$ aws ec2 create-vpc --cidr-block 172.16.100.0/24

$ aws ec2 describe-vpc-attribute --attribute enableDnsHostnames --vpc-id &amp;lt;vpc&amp;gt;
$ aws ec2 modify-vpc-attribute --enable-dns-hostnames --vpc-id &amp;lt;vpc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before remove vpc, subnet need to be removed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 delete-vpc --vpc-id &amp;lt;vpc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;tag&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --filters "Name=tag:Name,Values=test"
$ jq . tags.json
[
  {
    "Key": "Name",
    "Value": "test"
  }
]
$ aws ec2 create-tags --resources &amp;lt;vpc&amp;gt; --tags file://tags.json

$ aws ec2 create-tags --resources &amp;lt;vpc&amp;gt; --tags '{"Key":"Name", "Value":"test"}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;subnets&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-subnets --filters "Name=cidr-block,Values=172.16.100.0/26"
$ aws ec2 create-subnet --vpc-id &amp;lt;vpc&amp;gt; --cidr-block 172.16.100.0/26
$ aws ec2 delete-subnet --subnet-id &amp;lt;subnet&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;nacl&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-network-acls --filters "Name=vpc-id,Values=&amp;lt;vpc&amp;gt;"
$ aws ec2 create-network-acl --vpc-id &amp;lt;vpc&amp;gt;
$ aws ec2 replace-network-acl-association --association-id &amp;lt;aclassoc&amp;gt; --network-acl-id &amp;lt;nacl&amp;gt;

$ aws ec2 delete-network-acl --network-acl-id &amp;lt;nacl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;nacl entry&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;protocol
- all: -1
- icmp: 1
- tcp: 6
- udp: 17
- icmpv6: 58&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-network-acls --filters "Name=network-acl-id,Values=&amp;lt;nacl&amp;gt;"
$ aws ec2 create-network-acl-entry --ingress --network-acl-id &amp;lt;nacl&amp;gt; --cidr-block 172.16.100.64/26 --protocol -1 --rule-action allow --rule-number 100
$ aws ec2 create-network-acl-entry --egress  --network-acl-id &amp;lt;nacl&amp;gt; --cidr-block 172.16.100.64/26 --protocol -1 --rule-action allow --rule-number 100

$ aws ec2 delete-network-acl-entry --ingress --network-acl-id &amp;lt;nacl&amp;gt; --rule-number 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;internet gateway&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-internet-gateways --query 'InternetGateways[?Attachments[?VpcId == `&amp;lt;vpc&amp;gt;`]]'
$ aws ec2 create-internet-gateway
$ aws ec2 attach-internet-gateway --internet-gateway-id &amp;lt;internetgateway&amp;gt; --vpc-id &amp;lt;vpc&amp;gt;

$ aws ec2 detach-internet-gateway --internet-gateway-id &amp;lt;internetgateway&amp;gt; --vpc-id &amp;lt;vpc&amp;gt;
$ aws ec2 delete-internet-gateway --internet-gateway-id &amp;lt;internetgateway&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;route table&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-route-tables --filters "Name=vpc-id,Values=&amp;lt;vpc&amp;gt;"
$ aws ec2 create-route-table --vpc-id &amp;lt;vpc&amp;gt;
$ aws ec2 associate-route-table --route-table-id &amp;lt;routetable&amp;gt; --subnet-id &amp;lt;subnet&amp;gt;

$ aws ec2 describe-route-tables --filters "Name=route-table-id,Values=&amp;lt;routetable&amp;gt;"
$ aws ec2 create-route --destination-cidr-block 0.0.0.0/0 --gateway-id &amp;lt;internetgateway&amp;gt; --route-table-id &amp;lt;routetable&amp;gt;

$ aws ec2 delete-route --destination-cidr-block 0.0.0.0/0 --route-table-id &amp;lt;routetable&amp;gt;
$ aws ec2 disassociate-route-table --association-id &amp;lt;rtbassoc&amp;gt;
$ aws ec2 delete-route-table --route-table-id &amp;lt;routetable&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;security group&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-security-groups --filters "Name=vpc-id,Values=&amp;lt;vpc&amp;gt;"
$ aws ec2 create-security-group --description "&amp;lt;description&amp;gt;" --group-name "&amp;lt;name&amp;gt;" --vpc-id &amp;lt;vpc&amp;gt;

$ aws ec2 describe-security-groups --filters "Name=group-id,Values=&amp;lt;securitygroup&amp;gt;"
$ aws ec2 authorize-security-group-ingress --group-id &amp;lt;securitygroup&amp;gt; --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "xxx.xxx.xxx.xxx/32", "Description": "ssh incoming access"}]}]'

$ aws ec2 revoke-security-group-ingress --group-id &amp;lt;securitygroup&amp;gt; --ip-permissions '[{"IpProtocol": "tcp", "FromPort": 80, "ToPort": 80, "IpRanges": [{"CidrIp": "xxx.xxx.xxx.xxx/32", "Description": "ssh incoming access"}]}]'
$ aws ec2 delete-security-group --group-id &amp;lt;securitygroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;key pair&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-key-pairs 
$ aws ec2 describe-key-pairs --key-names &amp;lt;keyname&amp;gt;
$ aws ec2 create-key-pair --key-name &amp;lt;keyname&amp;gt; | tee id_rsa.testkey.json

$ aws ec2 delete-key-pair --key-name &amp;lt;keyname&amp;gt;
$ aws ec2 import-key-pair --key-name &amp;lt;keyname&amp;gt; --public-key-material file://id_rsa.testkey.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;save the private key&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq -r '.KeyMaterial' id_rsa.testkey.json &amp;gt; id_rsa.testkey.nopass
$ openssl rsa -aes256 -in id_rsa.testkey.nopass -out id_rsa.testkey
$ chmod 600 id_rsa.testkey
($ rm id_rsa.testkey.json id_rsa.testkey.nopass)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;volume&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-volumes
$ aws ec2 create-volume --volume-type gp2 --size &amp;lt;size&amp;gt; --availability-zone &amp;lt;az&amp;gt;
$ aws ec2 delete-volume --volume-id &amp;lt;volume&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;attach a volume to a instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-instances --filters Name=instance-id,Values=&amp;lt;instance&amp;gt; --query 'Reservations[].Instances[].BlockDeviceMappings[]'
$ aws ec2 attach-volume --volume-id &amp;lt;volume&amp;gt; --instance-id &amp;lt;instance&amp;gt; --device /dev/xvdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after the image attached, then make partition table, partition and file system on the os side.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsblk
$ sudo fdisk -l /dev/nvme1n1
$ sudo fdisk /dev/nvme1n1
$ sudo mkswap /dev/nvme1n1p1
$ sudo swapon /dev/nvme1n1p1
$ cat /proc/swaps
$ ls -l /dev/disk/by-uuid/
$ echo "UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx     none        swap   defaults          0   0" | sudo tee -a /etc/fstab
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extend volume&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-volumes --filters Name=volume-id,Values=&amp;lt;volume&amp;gt;
$ aws ec2 modify-volume --size &amp;lt;size&amp;gt; --volume-id &amp;lt;volume&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after that, extend partition and file system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ df
$ sudo growpart /dev/nvme0n1 1
$ lsblk
$ sudo xfs_growfs -d /
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;ami&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-images --filters "Name=owner-id,Values=&amp;lt;id&amp;gt;"
$ aws ec2 describe-images --filters "Name=image-id,Values=&amp;lt;ami&amp;gt;"
$ aws ec2 create-image --instance-id &amp;lt;instance&amp;gt; --name &amp;lt;name&amp;gt;
$ aws ec2 deregister-image --image-id &amp;lt;ami&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;after deregister-image, need to delete snapshots and volumes&lt;/p&gt;
&lt;p&gt;&lt;em&gt;snapshot&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-snapshots --filters Name=owner-id,Values=&amp;lt;id&amp;gt;
$ aws ec2 describe-snapshots --filters Name=snapshot-id,Values=&amp;lt;snapshot&amp;gt;
$ aws ec2 delete-snapshot --snapshot-id &amp;lt;snapshot&amp;gt;
$ aws ec2 create-snapshot --volume-id &amp;lt;volume&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;launch template&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-launch-templates
$ jq . template.json
{
  "ImageId": "&amp;lt;ami&amp;gt;",
  "InstanceType": "t3.nano",
  "CreditSpecification": {
    "CpuCredits": "standard"
  },
  "KeyName": "&amp;lt;keyname&amp;gt;",
  "InstanceInitiatedShutdownBehavior": "terminate"
}
$ aws ec2 create-launch-template --launch-template-name &amp;lt;name&amp;gt; --launch-template-data file://template.json
$ aws ec2 describe-launch-template-versions --launch-template-id &amp;lt;templateid&amp;gt; --versions &amp;lt;version&amp;gt;

$ aws ec2 create-launch-template-version \
 --launch-template-id &amp;lt;templateid&amp;gt; \
 --source-version &amp;lt;version&amp;gt; \
 --version-description "&amp;lt;description&amp;gt;" \
 --launch-template-data '{ "Monitoring": { "Enabled": true } }'
$ aws ec2 modify-launch-template --launch-template-id &amp;lt;templateid&amp;gt; --default-version &amp;lt;version&amp;gt;

$ aws ec2 delete-launch-template-versions --launch-template-id &amp;lt;templateid&amp;gt; --versions &amp;lt;version&amp;gt;
$ aws ec2 delete-launch-template --launch-template-id &amp;lt;templateid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;instance&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-instances --filters "Name=tag:Name,Values=test"
$ cat userdata.sh 
sudo apt update
sudo apt install nginx
$ aws ec2 run-instances \
 --security-group-ids &amp;lt;securitygroup&amp;gt; \
 --subnet-id &amp;lt;subnet&amp;gt; \
 --associate-public-ip-address \
 --tag-specifications '{"ResourceType":"instance","Tags":[{"Key":"Name","Value":"test"}]}' \
 --launch-template LaunchTemplateName=&amp;lt;templatename&amp;gt; \
 --user-data file://userdata.sh
#--image-id &amp;lt;ami&amp;gt;
#--instance-type t3.nano
#--credit-specification standard
#--key-name &amp;lt;keyname&amp;gt;
#--instance-initiated-shutdown-behavior terminate

$ aws ec2 describe-instances --filters "Name=tag:Name,Values=test" --query 'Reservations[].Instances[].{InstanceId:InstanceId,State:State}'
$ aws ec2 stop-instances --instance-ids &amp;lt;instance&amp;gt;
$ aws ec2 start-instances --instance-ids &amp;lt;instance&amp;gt;
$ aws ec2 terminate-instances --instance-ids &amp;lt;instance&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;instance meta data&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl http://169.254.169.254/latest/meta-data/instance-id
curl http://169.254.169.254/latest/user-data
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200119.html</guid><pubDate>Sun, 19 Jan 2020 00:00:00 GMT</pubDate></item><item><title>iam</title><link>https://mnod.github.io/posts/20200112.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;user&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-users --query 'Users[?UserName==`&amp;lt;username&amp;gt;`]'
$ aws iam get-user --user-name &amp;lt;username&amp;gt;

$ aws iam create-user --user-name &amp;lt;username&amp;gt;
$ aws iam tag-user --user-name &amp;lt;username&amp;gt; --tags '{"Key":"name","Value":"test"}'

$ aws iam delete-user --user-name &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;login profile&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam get-login-profile --user-name &amp;lt;username&amp;gt;
$ aws iam create-login-profile --generate-cli-skeleton &amp;gt; create-login-profile.json

$ jq '.' create-login-profile.json
{
  "UserName": "&amp;lt;username&amp;gt;",
  "Password": "&amp;lt;initialpassword&amp;gt;",
  "PasswordResetRequired": true
}
$ aws iam create-login-profile --user-name &amp;lt;username&amp;gt; --cli-input-json file://create-login-profile.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;group&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-groups  --query 'Groups[?GroupName==`&amp;lt;groupname&amp;gt;`]'
$ aws iam create-group --group-name &amp;lt;groupname&amp;gt;

$ aws iam delete-group --group-name &amp;lt;groupname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;policy&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-policies --query 'Policies[?PolicyName==`&amp;lt;policyname&amp;gt;`]'
$ aws iam get-policy --policy-arn &amp;lt;policyarn&amp;gt;

$ jq . policy.json 
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "s3:Get*",
        "s3:List*"
      ],
      "Resource": "*"
    }
  ]
}

$ aws iam create-policy --policy-name &amp;lt;policyname&amp;gt; --policy-document file://policy.json

$ aws iam list-policy-versions --policy-arn &amp;lt;policyarn&amp;gt;
$ aws iam get-policy-version --policy-arn &amp;lt;policyarn&amp;gt; --version-id v1
$ aws iam create-policy-version --policy-arn &amp;lt;policyarn&amp;gt; --policy-document file://policy_v2.json
$ aws iam set-default-policy-version --policy-arn &amp;lt;policyarn&amp;gt; --version-id v1

$ aws iam delete-policy-version --policy-arn &amp;lt;policyarn&amp;gt; --version-id v2
$ aws iam delete-policy --policy-arn &amp;lt;policyarn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample policy for allow change password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.' policy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "iam:GetAccountPasswordPolicy",
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "iam:ChangePassword",
      "Resource": "&amp;lt;userarn&amp;gt;"
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;add user to group&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-groups-for-user --user-name &amp;lt;username&amp;gt;
$ aws iam add-user-to-group --group-name &amp;lt;groupname&amp;gt; --user-name &amp;lt;username&amp;gt;

$ aws iam remove-user-from-group --group-name &amp;lt;groupname&amp;gt; --user-name &amp;lt;username&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;attach policy to user&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-attached-user-policies --user-name &amp;lt;username&amp;gt;
$ aws iam attach-user-policy --user-name &amp;lt;username&amp;gt; --policy-arn "&amp;lt;policyarn&amp;gt;"
$ aws iam detach-user-policy --user-name &amp;lt;username&amp;gt; --policy-arn "&amp;lt;policyarn&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;attach policy to group&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-attached-group-policies --group-name &amp;lt;groupname&amp;gt;
$ aws iam attach-group-policy --group-name &amp;lt;groupname&amp;gt; --policy-arn "&amp;lt;policyarn&amp;gt;"
$ aws iam detach-group-policy --group-name &amp;lt;groupname&amp;gt; --policy-arn "&amp;lt;policyarn&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;role&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-roles --query 'Roles[?RoleName==`&amp;lt;rolename&amp;gt;`]'
$ jq . assumepolicy.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
$ aws iam create-role --role-name &amp;lt;rolename&amp;gt; --assume-role-policy-document file://assumepolicy.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(Before you delte role, you must remove roles from instance profile.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam delete-role --role-name &amp;lt;rolename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;attach policy to role&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-attached-role-policies --role-name &amp;lt;rolename&amp;gt;
$ aws iam attach-role-policy --role-name &amp;lt;rolename&amp;gt; --policy-arn &amp;lt;policyarn&amp;gt;
$ aws iam detach-role-policy --role-name &amp;lt;rolename&amp;gt; --policy-arn &amp;lt;policyarn&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;add role to instance profile&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-instance-profiles-for-role --role-name &amp;lt;rolename&amp;gt;
$ aws iam add-role-to-instance-profile --instance-profile-name &amp;lt;rolename&amp;gt; --role-name &amp;lt;rolename&amp;gt;
$ aws iam remove-role-from-instance-profile --instance-profile-name &amp;lt;rolename&amp;gt; --role-name &amp;lt;rolename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;associate iam instance profile&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-iam-instance-profile-associations 
$ aws ec2 associate-iam-instance-profile --iam-instance-profile '{"Arn":"&amp;lt;rolearn&amp;gt;","Name":"&amp;lt;rolename&amp;gt;"}' --instance-id &amp;lt;instanceid&amp;gt;
$ aws ec2 disassociate-iam-instance-profile --association-id &amp;lt;associationid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;access key&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws iam list-access-keys --user-name &amp;lt;user-name&amp;gt;
$ aws iam get-access-key-last-used --access-key-id &amp;lt;access-key-id&amp;gt;

$ aws iam create-access-key --user-name &amp;lt;user-name&amp;gt;
$ aws iam update-access-key --user-name &amp;lt;user-name&amp;gt; --access-key-id &amp;lt;access-key-id&amp;gt; --status Inactive
$ aws iam delete-access-key --user-name &amp;lt;user-name&amp;gt; --access-key-id &amp;lt;access-key-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;cloudformation sample template&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    TestLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
        Tags:
          - "Key": "Name"
            "Value": "test"
    AllowAccessDynamoDBTable:
      Type: "AWS::IAM::Policy"
      Properties:
        PolicyName: "AllowAccessDynamoDBTable"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:DeleteItem
              Resource: !GetAtt TestDynamoDBTable.Arn
        Roles:
          - !Ref TestLambdaRole
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200112.html</guid><pubDate>Sun, 12 Jan 2020 00:00:00 GMT</pubDate></item><item><title>sqs</title><link>https://mnod.github.io/posts/20200109.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;create queue&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws sqs list-queues
aws sqs create-queue --queue-name testqueue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;get queue url or attributes&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws sqs get-queue-url --queue-name testqueue
aws sqs get-queue-attributes --queue-url https://&amp;lt;region&amp;gt;.queue.amazonaws.com/&amp;lt;id&amp;gt;/&amp;lt;queuename&amp;gt; --attribute-names All
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;handle message&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws sqs send-message --queue-url https://&amp;lt;region&amp;gt;.queue.amazonaws.com/&amp;lt;id&amp;gt;/&amp;lt;queuename&amp;gt; --message-body {"foo":"bar"}
aws sqs receive-message --queue-url https://&amp;lt;region&amp;gt;.queue.amazonaws.com/&amp;lt;id&amp;gt;/&amp;lt;queuename&amp;gt;
{
    "Messages": [
        {
            "MessageId": "",
            "ReceiptHandle": "",
            "MD5OfBody": "",
            "Body": "{}"
        }
    ]
}
aws sqs delete-message --queue-url https://&amp;lt;region&amp;gt;.queue.amazonaws.com/&amp;lt;id&amp;gt;/&amp;lt;queuename&amp;gt; --receipt-handle "&amp;lt;ReceiptHandle&amp;gt;"
aws sqs purge-queue --queue-url https://&amp;lt;region&amp;gt;.queue.amazonaws.com/&amp;lt;id&amp;gt;/&amp;lt;queuename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;delete queue&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws sqs delete-queue --queue-url https://&amp;lt;region&amp;gt;.queue.amazonaws.com/&amp;lt;id&amp;gt;/&amp;lt;queuename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample python script&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;send message
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=sqs_sendmessage.py"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;receive message
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=sqs_receivemessage.py"&gt;&lt;/script&gt;&lt;/p&gt;</description><category>aws</category><guid>https://mnod.github.io/posts/20200109.html</guid><pubDate>Thu, 09 Jan 2020 00:00:00 GMT</pubDate></item></channel></rss>