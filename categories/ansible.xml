<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about ansible)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/ansible.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sun, 30 Oct 2022 09:49:17 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>ansible vault</title><link>https://mnod.github.io/posts/20210923.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;create a vault file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault create test
New Vault password: 
Confirm New Vault password: 
:
:
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault view test
Vault password: 
test
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ cat test 
$ANSIBLE_VAULT;1.1;AES256
34373931643530353734633238383738363430616366366463653631316362353730613165316464
3834656662626430306662333038656263613139373036640a303131396539353663383932323133
63316564623264323434326138623737326463633830623465373131646134616662363565656132
3165616239303564330a646436643339303665336333363530346636666339643561336565393434
3766
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use vault-id option for password instead of stdin.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault view --vault-id test@prompt test
Vault password (test): 
test
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;$ cat vaultpass.test 
password

$ ansible-vault view --vault-id test@vaultpass.test test
test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also encrypt/decrpt any file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-vault decrypt --vault-id test@vaultpass.test test
Decryption successful

$ cat test 
test

$ ansible-vault encrypt --vault-id test@vaultpass.test test
Encryption successful
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;example for encrypt var file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ./roles/test/vars/main.yml 
target: ansible_os_family

$ ansible-vault encrypt --vault-id test@vaultpass.test ./roles/test/vars/main.yml 
Encryption successful

$ cat ./roles/test/vars/main.yml 
$ANSIBLE_VAULT;1.2;AES256;test
33653839336162646466373262663965636561366464643634643431633639343437633166636137
3236636535383832383932353865396630313266366264360a363134333532393038396561323137
30643734663961363561666461326362373035623131663637383636346633393737636234316163
3463663838626334660a616564343730343561656335343534353161666430313731376631623634
65643135323666303430616331666165656131373639393936333731626131653764

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ansible-playbook example using encrypted file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ./roles/test/tasks/main.yml 
- name: print ansible facts
  debug:
    var: "{{ target }}"

$ cat hosts 
[test]
localhost ansible_connection=local

$ ansible-playbook -i hosts --vault-id test@vaultpass.test --list-tasks test.yml 

playbook: test.yml

  play #1 (test): ansible vault test    TAGS: []
    tasks:
      test : print ansible facts    TAGS: []


$ ansible-playbook -i hosts --vault-id test@vaultpass.test test.yml 

PLAY [ansible vault test] *****************************************************************************************************

TASK [Gathering Facts] ********************************************************************************************************
ok: [localhost]

TASK [test : print ansible facts] *********************************************************************************************
ok: [localhost] =&amp;gt; {
    "ansible_os_family": "Debian"
}

PLAY RECAP ********************************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   

&lt;/code&gt;&lt;/pre&gt;</description><category>ansible</category><guid>https://mnod.github.io/posts/20210923.html</guid><pubDate>Thu, 23 Sep 2021 00:00:00 GMT</pubDate></item><item><title>terraform docker container</title><link>https://mnod.github.io/posts/20200516.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From centos:centos8

ARG VERSION=0.12.25
RUN yum install -y unzip python2-pip openssh-clients &amp;amp;&amp;amp; \
    yum clean all &amp;amp;&amp;amp; \
    curl -s https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_amd64.zip -o terraform.zip &amp;amp;&amp;amp; \
    unzip terraform.zip &amp;amp;&amp;amp; \
    rm terraform.zip &amp;amp;&amp;amp; \
    mv terraform /usr/local/bin &amp;amp;&amp;amp; \
    pip2 install ansible boto boto3 awscli &amp;amp;&amp;amp; \
    ln -s /usr/bin/python2.7 /usr/bin/python &amp;amp;&amp;amp; \
    mkdir /tmp/terraform &amp;amp;&amp;amp; \
    useradd -m docker

VOLUME ["/tmp/terraform"]
USER "docker"
WORKDIR "/tmp/terraform"
CMD ["/bin/bash"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg VERSION=0.12.25 -t terraform:0.12.25 .
$ sudo docker tag terraform:0.12.25 terraform:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest terraform --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest ansible --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create variable file /mydir/credentials &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=xxxx
AWS_SECRET_ACCESS_KEY=xxxx
AWS_DEFAULT_REGION=xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create wrapper script infradeploy.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v /mylocal/terraform:/tmp/terraform --env-file /mydir/credentials --rm -it terraform:latest $*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test terraform and ansible work&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo sh infradeploy.sh terraform show
$ sudo sh infradeploy.sh ./ec2.py --list
$ sudo sh infradeploy.sh ansible -i ec2.py -u admin ec2 -m ping --private-key id_rsa.mykey
$ sudo sh infradeploy.sh ansible-playbook --check -e @extravars.json playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As described at &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html"&gt;this site&lt;/a&gt; we can use ec2.py and ec2.ini(optional) for dynamic inventory
When I ran ec2.py I got &lt;code&gt;ImportError: No module named ansible.module_utils&lt;/code&gt; in the case I installed ansible from ubuntu repository.
It seems ansible should be installed with pip if you want to use ec2.py&lt;/p&gt;
&lt;p&gt;playbook sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: test playbook
  hosts: tag_Name_tagname
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_private_key_file: "./id_rsa.mykey"
  tasks:
    - name: install some packages
      apt:
        name: ['make','screen']
        state: present
        install_recommends: no
      when: ansible_pkg_mgr == 'apt'
      tags: packages

    - name: create a directory
      file:
        path: /my/direcoty
        state: directory
        owner: admin
        mode: '0755'

$ sudo sh infradeploy.sh ansible-playbook --check --diff -i ec2.py playbook.yml
$ sudo sh infradeploy.sh ansible-playbook --diff -i ec2.py playbook.yml
&lt;/code&gt;&lt;/pre&gt;</description><category>ansible</category><category>docker</category><category>terraform</category><guid>https://mnod.github.io/posts/20200516.html</guid><pubDate>Sat, 16 May 2020 00:00:00 GMT</pubDate></item><item><title>first step of terraform</title><link>https://mnod.github.io/posts/20200510.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;install&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget url https://releases.hashicorp.com/terraform/x.xx.xx/terraform_x.xx.xx_linux_amd64.zip
$ unzip terraform_x.xx.xx_linux_amd64.zip
$ cp terraform /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample varible file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;terraform.tfvars &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# region   = "ap-northeast-2"
# az = {
#   zone0    = "ap-northeast-2a"
#   zone1    = "ap-northeast-2b"
# }
# ami     = "ami-0d79f772de48b11f7"
cidr_block   = "172.16.0.0/16"
cidr_subnet0 = "172.16.0.0/24"
cidr_subnet1 = "172.16.10.0/24"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample tf file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;test.tf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;variable "region" {
  default = "ap-northeast-1"
}
variable "az" {
  default = {
    zone0 = "ap-northeast-1a"
    zone1 = "ap-northeast-1c"
  }
}
variable "ami" {
  default = "ami-03a1ce3bba6d67270"
}
variable "instance_type" {
  default = "t3.nano"
}
variable "cidr_block" {}
variable "cidr_subnet0" {}
variable "cidr_subnet1" {}
variable "operation_addr" {}
variable "key_name" {}
variable "private_key" {}

provider "aws" {
  region = var.region
}

resource "aws_vpc" "terraform_test_vpc" {
  cidr_block           = var.cidr_block
  instance_tenancy     = "default"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "terraform_test"
  }
}

resource "aws_subnet" "terraform_test_subnet0" {
  vpc_id            = aws_vpc.terraform_test_vpc.id
  cidr_block        = var.cidr_subnet0
  availability_zone = var.az.zone0

  tags = {
    Name = "terraform_test"
  }
}

resource "aws_subnet" "terraform_test_subnet1" {
  vpc_id            = aws_vpc.terraform_test_vpc.id
  cidr_block        = var.cidr_subnet1
  availability_zone = var.az.zone1

  tags = {
    Name = "terraform_test"
  }
}

resource "aws_internet_gateway" "terraform_test_igw" {
  vpc_id = aws_vpc.terraform_test_vpc.id

  tags = {
    Name = "terraform_test"
  }
}

resource "aws_route_table" "terraform_test_route" {
  vpc_id = aws_vpc.terraform_test_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.terraform_test_igw.id
  }

  tags = {
    Name = "terraform_test"
  }
}

resource "aws_route_table_association" "terraform_test_subnet0" {
  subnet_id      = aws_subnet.terraform_test_subnet0.id
  route_table_id = aws_route_table.terraform_test_route.id
}

resource "aws_route_table_association" "terraform_test_subnet1" {
  subnet_id      = aws_subnet.terraform_test_subnet1.id
  route_table_id = aws_route_table.terraform_test_route.id
}

resource "aws_security_group" "sg_ssh_web" {
  name = "terraform_test_security_group"
  description = "allow inbound ssh and web traffic"
  vpc_id = aws_vpc.terraform_test_vpc.id
  ingress {
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = [var.operation_addr]
  }
  ingress {
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_instance" "ec2_public" {
    ami           = var.ami
    instance_type = var.instance_type
    key_name      = var.key_name
    vpc_security_group_ids = [
      aws_security_group.sg_ssh_web.id,
    ]
    subnet_id = aws_subnet.terraform_test_subnet0.id
    associate_public_ip_address = "true"
    user_data = file("userdata.sh")
    connection {
      user = "admin"
      host = self.public_ip
      private_key = file(var.private_key)
    }
    provisioner "file" {
      source      = "index.html"
      destination = "~/index.html"
    }
    provisioner "remote-exec" {
      inline = [
        "sudo apt update",
        "sudo apt install -y nginx",
        "sudo mv ~/index.html /var/www/html"
      ]
    }

    tags = {
        Name = "terraform_test"
    }
}

output "public_dns" {
  value = aws_instance.ec2_public.public_dns
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;ininialize&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;install plugin file under the current directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;validate tf file&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform validate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;apply&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform plan -out=apply.plan -var 'operation_addr=xxx.xxx.xxx.xxx/xx' -var 'key_name=mykey' -var 'private_key=./id_rsa.mykey'
$ terraform apply -auto-approve "apply.plan"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or when destroy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform plan -destroy -out=apply.plan -var 'operation_addr=xxx.xxx.xxx.xxx/xx' -var 'key_name=mykey' -var 'private_key=./id_rsa.mykey' -target aws_instance.web1
$ terraform apply -auto-approve "destroy.plan"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform show
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;destroy&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ terraform destroy -auto-approve -var 'operation_addr=xxx.xxx.xxx.xxx/xx' -var 'key_name=mykey' -var 'private_key=./id_rsa.mykey'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample ansible playbook&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;apply.playbook&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: terraform plan
      terraform:
        project_path: './'
        state: planned
        plan_file: ansible.plan
        variables:
          operation_addr: "{{ operation_addr }}"
          key_name: "{{ key_name }}"
          private_key: "{{ private_key }}"
      register: result

    - name: debug result
      debug: 
        var: result

    - name: terraform apply
      terraform:
        project_path: './'
        state: present
        plan_file: ansible.plan
        variables:
          operation_addr: "{{ operation_addr }}"
          key_name: "{{ key_name }}"
          private_key: "{{ private_key }}"
      when: not ansible_check_mode
      register: result

    - name: debug result
      debug: 
        var: result
      when: not ansible_check_mode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;destroy.playbook&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- hosts: localhost
  connection: local
  gather_facts: no

  tasks:
    - name: terraform destroy
      terraform:
        project_path: './'
        state: absent
        plan_file: ansible.plan
        variables:
          operation_addr: "{{ operation_addr }}"
          key_name: "{{ key_name }}"
          private_key: "{{ private_key }}"
      when: not ansible_check_mode
      register: result

    - name: debug result
      debug: 
        var: result
      when: not ansible_check_mode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;apply and destroy with ansible&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq . extravars.json
{
  "operation_addr": "xxx.xxx.xxx.xxx/xx",
  "key_name": "mykey",
  "private_key": "id_rsa.mykey"
}
$ ansible-playbook --check -e @extravars.json apply.playbook
$ ansible-playbook -e @extravars.json apply.playbook
$ ansible-playbook --check -e @extravars.json destroy.playbook
$ ansible-playbook -e @extravars.json destroy.playbook
&lt;/code&gt;&lt;/pre&gt;</description><category>ansible</category><category>terraform</category><guid>https://mnod.github.io/posts/20200510.html</guid><pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate></item><item><title>CloudFormation</title><link>https://mnod.github.io/posts/20190916.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;sample template of CloudFormation in yaml format&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mystack.yml
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: myfirststack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;validate template file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation validate-template --template-body file://mystack.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;create stack&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation create-stack --stack-name mystack --template-body file://mystack.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confrim information of created stack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation list-stacks
$ aws cloudformation describe-stacks --stack-name mystack
$ aws cloudformation describe-stack-events --stack-name mystack --query 'StackEvents[?ResourceType==`AWS::CloudFormation::Stack`]'

$ aws cloudformation describe-stack-resources --stack-name mystack
$ aws cloudformation list-stack-resources --stack-name mystack

$ aws cloudformation get-template --stack-name mystack
$ aws cloudformation get-template --stack-name mystack | jq -r '.TemplateBody'
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: first-VPC
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;update template file and validate it&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ diff -u mystack.yml{,.bak}
--- mystack.yml 2019-09-16 11:23:04.368417527 +0900
+++ mystack.yml.bak     2019-09-16 10:51:35.053928361 +0900
@@ -1,12 +1,9 @@
 AWSTemplateFormatVersion: '2010-09-09'
-Parameters:
-  CidrBlock:
-    Type: String
 Resources:
   FirstVPC:
     Type: AWS::EC2::VPC
     Properties:
-      CidrBlock: !Ref CidrBlock
+      CidrBlock: 10.0.0.0/16
       Tags:
       - Key: Name
-        Value: mystack-VPC
+        Value: first-VPC

$ aws cloudformation validate-template --template-body file://mystack.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;update the stack&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation update-stack --stack-name mystack --template-body file://mystack.yml --parameters ParameterKey=CidrBlock,ParameterValue=10.0.0.0/17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm&lt;/p&gt;
&lt;p&gt;&lt;em&gt;delete the stack&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws cloudformation delete-stack --stack-name mystack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;create stack with ansible&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mystack.yml 
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      Tags:
      - Key: Name
        Value: mystack

$ cat playbook.yml 
- hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: create a cloudformation stack
      cloudformation:
        stack_name: "mystack"
        state: "present"
        region: "ap-northeast-1"
        disable_rollback: true
        template: "mystack.yml"

$ ansible-playbook --syntax-check playbook.yml 
$ ansible-playbook --list-tasks playbook.yml 
$ ansible-playbook --check playbook.yml
$ ansible-playbook playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;update stack with ansible&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mystack.yml
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CidrBlock:
    Type: String
Resources:
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      Tags:
      - Key: Name
        Value: mystack

$ cat playbook.yml 
- hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: create a cloudformation stack
      cloudformation:
        stack_name: "mystack"
        state: "present"
        region: "ap-northeast-1"
        disable_rollback: true
        template: "mystack.yml"
        template_parameters:
          CidrBlock: "10.20.0.0/16"

$ ansible-playbook playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;variable from command line&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat mystack.yml
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  CidrBlock:
    Type: String
Resources:
  FirstVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      Tags:
      - Key: Name
        Value: mystack

$ cat playbook.yml
- hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: create a cloudformation stack
      cloudformation:
        stack_name: "mystack"
        state: "present"
        region: "ap-northeast-1"
        disable_rollback: true
        template: "mystack.yml"
        template_parameters:
          CidrBlock: "{{ CidrBlock }}"

$ ansible-playbook -e "CidrBlock=10.30.0.0/16" playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;delete stack with ansible&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat playbook.yml
- hosts: 127.0.0.1
  connection: local
  gather_facts: False
  tasks:
    - name: delete a cloudformation stack
      cloudformation:
        stack_name: "mystack"
        state: "absent"
        region: "ap-northeast-1"

$ ansible-playbook playbook.yml
&lt;/code&gt;&lt;/pre&gt;</description><category>ansible</category><category>aws</category><guid>https://mnod.github.io/posts/20190916.html</guid><pubDate>Mon, 16 Sep 2019 00:00:00 GMT</pubDate></item><item><title>ansible</title><link>https://mnod.github.io/posts/20170827.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;ã¨ã¼ã¸ã§ã³ãã¬ã¹ã®æ§æç®¡çãã¼ã«ã&lt;/p&gt;
&lt;p&gt;å¯¾è±¡ãã¹ãã§ã¯ãã¨ã¼ã¸ã§ã³ãç­ãã¤ã³ã¹ãã¼ã«ããå¿è¦ããªããåºæ¬çã«ä¸è¨ãæºããã°ããã&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pythonãåããã¨&lt;/li&gt;
&lt;li&gt;ç¸æããªã¢ã¼ããã¹ããªãsshã§ã­ã°ã¤ã³ã§ãããã¨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(ãã ããä½¿ãã¢ã¸ã¥ã¼ã«ã«ãã£ã¦ã¯è¿½å ããã±ã¼ã¸ãå¿è¦ãä¾:aptã¢ã¸ã¥ã¼ã«ãä½¿ãããã«ã¯python-aptãå¿è¦)&lt;/p&gt;
&lt;p&gt;ãããã¹ãå§¿ããYAMLã§è¨è¼ããã(è¨è¼ãããã¡ã¤ã«(ç¾¤)ãplaybookã¨å¼ã¶)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ansible
  -i hosts ã¤ã³ãã³ããªãã¡ã¤ã«ãæå®
  -m ping çéç¢ºèª
  -m setup ãã¡ã¯ãåé
  -a 'command -h' æå®ããã³ãã³ããå®è¡
  --ask-pass ã­ã°ã¤ã³ã§å¿è¦ã¨ãªããã¹ã¯ã¼ããè¦æ±
  targethost å¯¾è±¡ãã¹ããæå®
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ãªãã¸ããªãã¡ã¤ã«(hosts)ã®åå®¹ã®ä¾&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[myserver]
192.168.1.1 ansible_ssh_user=myusername
[desktop]
myhostname  ansible_connection=local
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;çéç¢ºèªã®ä¾&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible -i hosts -m ping 192.168.1.1 --ask-pass
$ ansible -i hosts -m ping myhostname
    $ ansible -i hosts -m ping 192.168.1.1 --ask-pass --ssh-common-args '-o PubkeyAuthentication=no'

ansible-playbook
  -i hosts
  --syntax-check  ãã¬ã¤ããã¯ã®ææ³ãã§ãã¯ã®ã¿
  --list-tasks   ãã¬ã¤ããã¯ã®ã¿ã¹ã¯ããªã¹ãè¡¨ç¤º
  --check ãã©ã¤ã©ã³
  --ask-sudo-pass sudoã§å¿è¦ã¨ãªããã¹ã¯ã¼ããè¦æ±
  --ask-su-pass suã§å¿è¦ã¨ãªããã¹ã¯ã¼ããè¦æ±
  --ask-pass ã­ã°ã¤ã³ã§å¿è¦ã¨ãªããã¹ã¯ã¼ããè¦æ±
  --diff show differences
  --tags "tag1,tag2,..."
  --skip-tags "tag1,tag2,..."
  playbook.yml ãã¬ã¤ããã¯ãæå®
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ãã¬ã¤ãªã¹ãã®åå®¹ç¢ºèªãå®è¡åç¢ºèªãè¨­å®åæ ã®ä¾&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ansible-playbook -i hosts --syntax-check myserver.yml
$ ansible-playbook -i hosts --list-tasks myserver.yml 
$ ansible-playbook -i hosts --check myserver.yml --ask-pass
$ ansible-playbook -i hosts myserver.yml --ask-pass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Sample ansible playbook in a single yaml file&lt;/em&gt;&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=playbooksingle.yml"&gt;&lt;/script&gt;</description><category>ansible</category><guid>https://mnod.github.io/posts/20170827.html</guid><pubDate>Sun, 27 Aug 2017 00:00:00 GMT</pubDate></item></channel></rss>