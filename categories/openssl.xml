<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about openssl)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/openssl.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sun, 03 Jul 2022 09:32:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>let's encrrypt</title><link>https://mnod.github.io/posts/20220627.html</link><dc:creator>mnod</dc:creator><description>&lt;pre&gt;&lt;code&gt;certbot certonly \
--dry-run \
-d www.example.net \
-m yourname@example.net \
--preferred-challenges dns-01  \
--server https://acme-v02.api.letsencrypt.org/directory \
--manual \
--manual-auth-hook /home/user/work/letsencrypt/dns01-auth.sh \
--manual-cleanup-hook /home/user/work/letsencrypt/dns01-clean.sh \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When you run certbot in non-root user, you have to specify --work-dir, --logs-dir, and --config-dir options.  These directories have to be writable with your user.&lt;/li&gt;
&lt;li&gt;You can only publish new certificate file via certbot. Your new certificate file will pushed under config-dir directory. Afterward, you can deploy it with your deploy tool which you like. &lt;/li&gt;
&lt;li&gt;The dns-01 challenge authentication only needs DNS validation and don't need to access via 80/tcp nor web server installation on your server.
When you use dns-01 challenge, you can use your script to update your dns resource to --manual-auth-hook (for authentication) and --manual-cleanup-hook (for cleanup entry).&lt;br&gt;
CERTBOT_DOMAIN varaible is used to show domain name which you want to use. CERTBOT_VALIDATION vaibale is used to show validation code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sample script which create validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-auth.sh"&gt;&lt;/script&gt;

&lt;p&gt;sample script which delete validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-clean.sh"&gt;&lt;/script&gt;

&lt;pre&gt;&lt;code&gt;certbot renew \
--dry-run \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Once you get your new certificate, you have to update your certificate periodically.&lt;/li&gt;
&lt;/ul&gt;</description><category>aws</category><category>linux</category><category>openssl</category><guid>https://mnod.github.io/posts/20220627.html</guid><pubDate>Mon, 27 Jun 2022 00:00:00 GMT</pubDate></item><item><title>openssl</title><link>https://mnod.github.io/posts/20180503.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;自己認証局の作成・運用を手作業で実施する手順を記載する。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;自己認証局の作成&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(事前にindex.txtファイル、serialファイル等もろもろ準備した、作業ディレクトリで作業。)&lt;/p&gt;
&lt;p&gt;擬似乱数ファイルの作成(ほどよく更新されるファイルのダイジェストを得る。パーミッション、更新日時に留意。)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl dgst -sha1 /var/log/{lastlog,wtmp*} &amp;gt; rand.dat
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;秘密鍵を作成(当面はRSAで問題ない)
aes256で秘密鍵を保護。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl genrsa -aes256 -rand rand.dat -out cakey.pem 4096
openssl rsa -in cakey.pem -text -noout
(nooutを指定しないと保護されない秘密鍵が画面に出る。)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSRを作成(署名アルゴリズムをsha256にしている)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -config openssl.cnf -new -sha256 -key cakey.pem -out cacsr.csr \
-subj '/C=country/ST=state/L=local/O=object name/OU=organizational unit/CN=common name'
openssl req -in cacsr.csr -text -noout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSRより自己署名のCA証明書を作成(署名アルゴリズムをsha256にする)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -x509 -sha256 -days ddd -key cakey.pem -in cacsr.csr -out cacert.cer
openssl x509 -in cacert.cer -text -noout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;CAでの、CSRに対する署名&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;サーバ証明書、クライアント証明書でも同様&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl ca -md sha256 -config openssl.cnf -cert cacert.cer -keyfile cakey.pem -in servercsr.csr -out servercert.cer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Revoke、CRL作成&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;以前と同じDNの証明書を作りたい場合、その証明書の期限が切れていても、事前に以前のものを取り消す必要がある場合がある。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl ca -config openssl.cnf -cert cacert.cer -keyfile cakey.pem -revoke usercert.cer
openssl ca -config openssl.cnf -md sha256 -cert cacert.cer -keyfile cakey.pem -gencrl -out crl.pem
openssl crl -in crl.pem -text -noout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CA証明書とCRLを結合して利用する場合がある。
結合してできたファイルをCA証明書として指定することで、CRLの情報も読み取られる。(dovecot等)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat cacert.cer crl.pem &amp;gt; cacert2.cer
openssl crl -in cacert2.cer -text -noout
openssl x509 -in cacert2.cer -text -noout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;結合したファイルで、サーバ証明書を検証する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl verify -crl_check -CAfile cacert2.cer usercert.cer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;サーバ証明書の申請&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;クライアント証明書でも同様&lt;/p&gt;
&lt;p&gt;擬似乱数ファイル作成。秘密鍵作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl dgst -sha1 /var/log/{lastlog,wtmp*} &amp;gt; rand.dat
openssl genrsa -out serverkey.pem 2048
openssl rsa -in serverkey.pem -text -noout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;証明書署名要求を作成
プライベートCAで自分で署名する分には、CSRの署名アルゴリズムにこだわる必要はない。
認証機関に承認を依頼する場合は影響があるとかないとか。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -config openssl.cnf -new -sha256 -key serverkey.pem -out servercsr.csr \
-subj '/C=country/ST=state/L=local/O=object name/OU=organizational unit/CN=my server'
openssl req -in servercsr.csr -text -noout
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSRをCAに申請して署名してもらう。
署名された証明書を確認する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl x509 -in servercert.cer -text -noout
openssl verify -purpose sslserver -CAfile cacert.cer servercert.cer
openssl verify -purpose sslclient -CAfile cacert.cer usercert.cer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;必要に応じて秘密鍵のパスフレーズ解除&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl rsa -in serverkey.pem -out serverkey-nopass.pem
chmod 600 serverkey-nopass.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;証明書、ssl通信のテスト&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;クライアントからの接続テスト&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl s_server
-CAfile cacert.cer
-cert servercert.cer
-key serverkey.pem
-Verify num クライアント証明書を要求し、検証する
-crl_check CRLによる検証を実施
-state
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;サーバへの接続テスト&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl s_client
-connect address:port 省略時はlocalhost:4433
-CAfile cacert.cer
-cert usercert.cer
-key userkey.pem
-crl_check
-state
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;pkcs12の作成&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(スマホ、PC等にインストールできるように)クライアントの秘密鍵、証明書を1ファイルにまとめる。(拡張子はpfxやp12が一般的)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl pkcs12 -export -in cert.cer -inkey key.pem -out file.p12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;iphoneで、CA証明書(.cer)と、p12ファイル(.p12)をメール等で送って、それぞれ「信頼」する。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[おまけ]秘密鍵と証明書の対応の確認&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;秘密鍵と証明書のmodulusが同一であることを確認(md5ダイジェストが一致することをもってよしとする)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl rsa -in 秘密鍵 -modulus -noout | openssl md5
openssl x509 -in 証明書 -modulus -noout | openssl md5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;[おまけ]楕円曲線暗号を使った鍵の作成&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;google先生によると、prime256v1、secp384r1 あたりが良く使われるらしい。(ecdsaの使用の判断は熟慮の上で。)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl ecparam -list_curves
openssl ecparam -name secp384r1 -genkey -out secp384r1.key
openssl ec -in secp384r1.key -text -noout
openssl ec -in secp384r1.key -out secp384r1_aes256.key -aes256
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;認証局による証明書は、暗号化とサーバ運営者の身元確認という目的がある。
個人で作成する自己認証局では、暗号化はできるが身元確認ができないと言われる。
実社会で互いに信頼できる相手なら、CA証明書を配布して事前にインストールしてもらうようにすれば、身元確認の問題はおきないのではないか。
限定された範囲での利用なら、この運用で問題ないのではないか。&lt;/p&gt;</description><category>openssl</category><guid>https://mnod.github.io/posts/20180503.html</guid><pubDate>Thu, 03 May 2018 00:00:00 GMT</pubDate></item></channel></rss>