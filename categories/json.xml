<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about json)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/json.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sat, 22 Jan 2022 05:33:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>json in python</title><link>https://mnod.github.io/posts/20200422.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;dictionary&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;add key:value pair to a dictionary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; newdict = {}
&amp;gt;&amp;gt;&amp;gt; newdict['foo'] = "bar"
&amp;gt;&amp;gt;&amp;gt; newdict
{'foo': 'bar'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get all keys or values of a dictionary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; newdict.keys()
['foo']
&amp;gt;&amp;gt;&amp;gt; newdict.values()
['bar']
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get a value for a key from a dictionary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; newdict['foo']
'bar'
&amp;gt;&amp;gt;&amp;gt; newdict.get("foo")
'bar'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a dictionary as a value&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; newdict0 = {}
&amp;gt;&amp;gt;&amp;gt; newdict0["mykey"] = newdict
&amp;gt;&amp;gt;&amp;gt; newdict0
{'mykey': {'foo': 'bar'}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get a value&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; newdict0['mykey']['foo']
'bar'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;add a list as a value&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; newdict0["mykey"] = [newdict, {'hoge': 'piyo'}]
&amp;gt;&amp;gt;&amp;gt; newdict0
{'mykey': [{'foo': 'bar'}, {'hoge': 'piyo'}]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get a list&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; for dict in newdict0.get('mykey'):
...     print dict
...
{'foo': 'bar'}
{'hoge': 'piyo'}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;json&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;dump dictionary as json format string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; mystr = json.dumps(newdict)
&amp;gt;&amp;gt;&amp;gt; mystr
'{"foo": "bar"}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;load json format string to dictionary&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; mydict = json.loads(mystr)
&amp;gt;&amp;gt;&amp;gt; mydict
{u'foo': u'bar'}
&amp;gt;&amp;gt;&amp;gt; mydict.get("foo")
u'bar'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To show non-ASCII characters, we can use ensure_ascii=False option, otherwise the output are escaped with \uXXXX sequences&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python26
&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; mystr = '{"foo":"ばぁ"}'
&amp;gt;&amp;gt;&amp;gt; mydict = json.loads(mystr)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(json.dumps(mydict))
{"foo": "\u3070\u3041"}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(json.dumps(mydict, ensure_ascii=False))
{"foo": "ばぁ"}
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If locale is not UTF-8, we will met UnicodeEncodeError when it prints UTF-8 strings to stdout.
In this case, we can use encode() to avoid the error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ LANG=C python26
&amp;gt;&amp;gt;&amp;gt; import json
&amp;gt;&amp;gt;&amp;gt; mystr = '{"foo":"ばぁ"}'
&amp;gt;&amp;gt;&amp;gt; mydict = json.loads(mystr)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(json.dumps(mydict))
{"foo": "\u3070\u3041"}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(json.dumps(mydict, ensure_ascii=False))
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
UnicodeEncodeError: 'ascii' codec can't encode characters in position 14-15: ordinal not in range(128)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(json.dumps(mydict, ensure_ascii=False).encode('utf-8'))
{"foo": "ばぁ"}
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;write json to a file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mystr = '{"foo":"ばぁ"}
mydict = json.loads(mystr)

with open('new.json', 'w') as f:
    json.dump(mydict, f)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;read json from a file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with open('new.json') as f:
    myjson = json.load(f)
    print(json.dumps(myjson, ensure_ascii=False).encode('utf-8'))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;sample script&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;using urllib2 library&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=urllib_sample.py"&gt;&lt;/script&gt;

&lt;p&gt;similar as above but using reauests library&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=requests_sample.py"&gt;&lt;/script&gt;</description><category>json</category><category>python</category><guid>https://mnod.github.io/posts/20200422.html</guid><pubDate>Wed, 22 Apr 2020 00:00:00 GMT</pubDate></item><item><title>aws</title><link>https://mnod.github.io/posts/20200125.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;query with JMESPath&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;projection&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[].VpcId'
$ aws ec2 describe-vpcs --query 'Vpcs[].{VpcId:VpcId, IsDefault:IsDefault}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;selection
(if the targe command has &lt;code&gt;filters&lt;/code&gt; option, it would be faster than &lt;code&gt;query&lt;/code&gt;.)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[?IsDefault == `true`]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true'

$ aws ec2 describe-vpcs --query 'Vpcs[?Tags[?Key == `Name` &amp;amp;&amp;amp; Value == `test`]]'
$ aws ec2 describe-vpcs --filters 'Name=tag:Name,Values=test'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;function&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --query 'Vpcs[?contains(VpcId, `vpc`)].VpcId'

$ aws ec2 describe-vpcs --query 'sort_by(Vpcs[?contains(VpcId, `vpc`)].VpcId, &amp;amp;VpcId)'
$ aws ec2 describe-images --filters "Name=owner-id,Values=&amp;lt;id&amp;gt;" --query "sort_by(Images[].{Name:Name, ImageId:ImageId}, &amp;amp;Name)"

$ aws ec2 describe-vpcs --query 'length(Vpcs[?contains(VpcId, `vpc`)])'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;generate-cli-skeleton output&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --generate-cli-skeleton output
$ aws ec2 describe-vpcs --generate-cli-skeleton output --query 'Vpcs[].{CidrBlock:CidrBlock, VpcId:VpcId}'
$ aws ec2 describe-vpcs --query 'Vpcs[].{CidrBlock:CidrBlock, VpcId:VpcId}'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;generate-cli-skeleton input&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --generate-cli-skeleton input | tee describe-vpcs.json
$ vi describe-vpcs.json
$ jq . describe-vpcs.json
{
  "Filters": [
    {
      "Name": "tag:Name",
      "Values": [
        "test"
      ]
    }
  ]
}
$ aws ec2 describe-vpcs --cli-input-json file://describe-vpcs.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;samples of filter&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ aws ec2 describe-vpcs --filters '["Name":"isDefault","Values":["true"]]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true'

$ aws ec2 describe-vpcs --filters '[{"Name":"tag-key","Values":["aws:cloudformation:stack-name"]}]'
$ aws ec2 describe-vpcs --filters 'Name=tag-key,Values=aws:cloudformation:stack-name'

$ aws ec2 describe-vpcs --filters '[{"Name":"tag:Name","Values":["terraform_test","mystack-VPC"]}]'
$ aws ec2 describe-vpcs --filters 'Name=tag:Name,Values=terraform_test,mystack-VPC'

$ aws ec2 describe-vpcs --filters '[{"Name":"isDefault","Values":["false"]}, {"Name":"state","Values":["available"]}]'
$ aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true','Name=state,Values=available'
&lt;/code&gt;&lt;/pre&gt;</description><category>aws</category><category>json</category><guid>https://mnod.github.io/posts/20200125.html</guid><pubDate>Sat, 25 Jan 2020 00:00:00 GMT</pubDate></item><item><title>json</title><link>https://mnod.github.io/posts/20181111.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;a href="https://www.json.org/json-en.html"&gt;json&lt;/a&gt;(JavaScript Object Notation)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;object is unordered set of name/value pair.&lt;/li&gt;
&lt;li&gt;array is ordered set of values&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;value can be number, string, boolean(true or false), null, object or array.&lt;/p&gt;
&lt;p&gt;{
  "number": 128,
  "string": "128",
  "boolean": true,
  "null": null,
  "object": {
    "key0": "value0"
  },
  "array": [
    128,
    "128",
    true,
    null,
    {
      "key1": "value1"
    }
  ]
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;jq&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;jq is command line json processor.
How to install jq in debian.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install jq
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we use result of below command as a sample json file.
Of cource I know awscli has convinience options like filter and query.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws ec2 describe-images \
--filters '[{"Name":"owner-id","Values":["136693071363"]},{"Name":"architecture","Values":["x86_64"]}]' &amp;gt; ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内容全てを整形して出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Images の子要素(配列)を全て出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[]' amis.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Images の子要素のうち Description が Test のものの内容を出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[] | select(.Description == "Test")' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Not condition&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[] | select(.Description == "Test" | not)' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Startswith&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[] | select(.Description | startswith("Debian 10"))' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;contains&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[] | select(.Description | contains("202005"))' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Images の子要素のうち Description が Test のもののNameの値を出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[] | select(.Description == "Test") | .Name' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Images の子要素のうち Description が Test のものの内容を整形して出力&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ jq '.Images[] | select(.Description == "Test") | {"MyName":.Name, "MyDate":.CreationDate}' ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;jqのコマンドをファイルから読み込むことができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ami.jq
.Images[] |
select(.Description == "Test") |
{
  "MyName":.Name,
  "MyDate":.CreationDate
}

$ jq -f ami.jq ami.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;シェバンを書けば、sed や awk のようにスクリプトとして実行することができる。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat ami.jq
#! /usr/bin/jq -f
.Images[] |
select(.Description == "Test") |
{
  "MyName":.Name,
  "MyDate":.CreationDate
}

$ chmod +x ami.jq

$ ./ami.jq ami.json
&lt;/code&gt;&lt;/pre&gt;</description><category>json</category><guid>https://mnod.github.io/posts/20181111.html</guid><pubDate>Sun, 11 Nov 2018 00:00:00 GMT</pubDate></item></channel></rss>