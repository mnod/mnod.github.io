<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about linux)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sun, 27 Sep 2020 00:03:18 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>kvm on raspberrypi</title><link>https://mnod.github.io/posts/20200927.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;kvm On Raspberry Pi OS (64bit) beta test version&lt;/p&gt;
&lt;p&gt;related packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install --no-install-recommends qemu-system-arm qemu-utils kpartx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;boot alpine linux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;get kernel and initra from the iso file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount -o loop alpine-standard-3.12.0-aarch64.iso /media/tmp
$ sudo cp /media/tmp/boot/initramfs-lts .
$ sudo cp /media/tmp/boot/vmlinuz-lts .
$ sudo umount /media/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -nographic -m 512 \
&amp;gt; -kernel vmlinuz-lts -initrd initramfs-lts \
&amp;gt; -drive if=none,id=image,file=alpine-standard-3.12.0-aarch64.iso -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;install debian10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;download kernel and initrd file and create an empty virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget -O linux http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/linux
$ wget -O initrd.gz http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/initrd.gz
$ qemu-img create -f qcow2 hda.qcow2 16G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot the installer with downloaded kernel and initrd file and install to the virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel linux -initrd initrd.gz \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -no-reboot -vnc :1

$ vncviewer xxx.xxx.xxx.xxx:5901
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get kernel and initrd file from qcow2 file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsmod | grep nbd
$ sudo modprobe nbd
$ sudo qemu-nbd -c /dev/nbd0 debian10.qcow2
$ sudo kpartx -av /dev/nbd0
$ sudo mount /dev/mapper/nbd0p1 /media/tmp

$ cp /media/tmp/initrd.img-4.19.0-11-arm64 .
$ cp /media/tmp/vmlinuz-4.19.0-11-arm64 .

$ sudo umount /media/tmp
$ sudo kpartx -dv /dev/nbd0
$ sudo qemu-nbd -d /dev/nbd0
$ sudo rmmod nbd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel vmlinuz-4.19.0-11-arm64 -initrd initrd.img-4.19.0-11-arm64 \
&amp;gt; -append 'root=/dev/vda2' \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -nographic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>kvm</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200927.html</guid><pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate></item><item><title>docker on raspberrypi</title><link>https://mnod.github.io/posts/20200926.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Install docker on &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=117&amp;amp;t=275370"&gt;Raspberry Pi OS (64bit) beta test version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/debian/"&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --dry-run
$ sudo sh get-docker.sh
$ systemctl is-active docker
$ systemctl is-enabled docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the docker root directory where we store the images and containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker info | grep Root
$ sudo systemctl stop docker
$ sudo mv /var/lib/docker /path/to/
$ sudo ln -s /path/to/docker /var/lib/docker
$ sudo systemctl start docker
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -it alpine
/ #
/ # uptime
 03:17:44 up 1 day,  2:47,  load average: 0.02, 0.05, 0.01
/ #
/ # uname -a
Linux 4db177a44a14 5.4.42-v8+ #1319 SMP PREEMPT Wed May 20 14:18:56 BST 2020 aarch64 Linux
/ #
/ # free -m
              total        used        free      shared  buff/cache   available
Mem:           7816         315        6339           2        1161        7460
Swap:          8191           0        8191
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200926.html</guid><pubDate>Sat, 26 Sep 2020 00:00:00 GMT</pubDate></item><item><title>vhd</title><link>https://mnod.github.io/posts/20200924.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Windows can mount vhd file as a virtual drive.
We can use it for application install space or document storage area.&lt;/p&gt;
&lt;p&gt;When we create a vhd file on a flash memory, the memory should be formatted with ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted /dev/sdb print
parted /dev/sdb rm 1
parted /dev/sdb mkpart primary ntfs 0% 100%
mkfs.ntfs -Q /dev/sdb1
mount /dev/sdb1 /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first a raw image file, make label, and make partition.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/zero of=file.img bs=1M count=0 seek=59000
losetup -f
losetup /dev/loop1 file.img
losetup -a
parted /dev/loop1 print
parted /dev/loop1 mklabel msdos
parted /dev/loop1 mkpart primary ntfs 0% 100%
losetup -d /dev/loop1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then format the partition in ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kpartx -a -v file.img
mkfs.ntfs -Q /dev/loop1p1
kpartx -d -v file.img
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vhd file must not be sparse file.
So after we convert it to vhd format, then we should convert it to normal file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp --sparse=never file.img file_new.img
qemu-img convert -O vpc -o subformat=fixed,force_size=on file.img output.vhd
cp -pi --sparse=never output.vhd.sparse file.vhd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;diskpart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In windows os, we can handle partition and filesystem with sub commands of diskpart command.&lt;/p&gt;
&lt;p&gt;format usb drive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
select volume=2
format fs=ntfs quick
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a vhd file and attach it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
create vdisk file="d:\image.vhd" maximum=1024
select vdisk file="d:\image.vhd"
attach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create partition in the vhd file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select disk 2
list disk
create partition primary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;format in ntfs and assign drive letter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
select volume=3
format fs=ntfs quick
assign letter=e:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;detach the vhd file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select vdisk file="d:\image.vhd"
detach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;next time, just attach it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select vdisk file="d:\image.vhd"
attach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>windows</category><guid>https://mnod.github.io/posts/20200924.html</guid><pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate></item><item><title>screen and tmux</title><link>https://mnod.github.io/posts/20200616.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;command&lt;/th&gt;&lt;th&gt;screen&lt;/th&gt;&lt;th&gt;tmux&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list&lt;/th&gt;&lt;td&gt;-ls&lt;/td&gt;&lt;td&gt;ls&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;with name&lt;/th&gt;&lt;td&gt;-S name&lt;/td&gt;&lt;td&gt;new -s name&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;attach&lt;/th&gt;&lt;td&gt;-r [title]&lt;/td&gt;&lt;td&gt;a [-t title]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;prefix&lt;/th&gt;&lt;td&gt;Ctrl+a&lt;/td&gt;&lt;td&gt;Ctrl+b&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;new&lt;/th&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;switch&lt;/th&gt;&lt;td&gt;prefix+num&lt;/td&gt;&lt;td&gt;prerix+num&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list screen&lt;/th&gt;&lt;td&gt;prefix+"&lt;/td&gt;&lt;td&gt;prerix+w&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;copy mode&lt;/th&gt;&lt;td&gt;prefix+esc&lt;/td&gt;&lt;td&gt;prefix+[&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;screen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;it can connect to serial port. default baud is 9600&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen /dev/ttyS0 [baud rate]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it can create a new window which executes a specific program&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen watch -n 5 ntpq -pn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200616.html</guid><pubDate>Tue, 16 Jun 2020 00:00:00 GMT</pubDate></item><item><title>chrony</title><link>https://mnod.github.io/posts/20200615.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;chrony is an implementation of Network Time Protocol&lt;/p&gt;
&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample config
specify ntp server at &lt;code&gt;server&lt;/code&gt; or ntp server pool for &lt;code&gt;pool&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/chrony/chrony.conf
server 192.168.xxx.xxx iburst minpoll 6 maxpoll 10
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reload configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status chronyd
journalctl -u chrony -f
systemctl force-reload chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show system track performance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc tracking
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show current time sources&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc sources
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show information about drift rate and offset estimation process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc sourcestats
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show the last valid measurement and other information&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc ntpdata
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For server settings, at least add a &lt;code&gt;allow&lt;/code&gt; line.
&lt;code&gt;cmdallow&lt;/code&gt; and &lt;code&gt;bindcmdaddress&lt;/code&gt; lines are optional which is for monitoring access&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/chrony/chrony.conf
server 192.168.xxx.xxx iburst minpoll 6 maxpoll 10
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
allow 192.168.xxx.0/24
cmdallow 192.168.xxx.0/24
bindcmdaddress 127.0.0.1
bindcmdaddress 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show list of clients&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc clients
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify a remote host to which chronyd is to be connected (using udp/323)
default is localhost&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cronyc -h 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200615.html</guid><pubDate>Mon, 15 Jun 2020 00:00:00 GMT</pubDate></item><item><title>ntpd</title><link>https://mnod.github.io/posts/20200614.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install ntp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample config
specify ntp server at &lt;code&gt;server&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 192.168.xxx.xxx iburst
restrict -4 default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict ::1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reload configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status ntp
journalctl -u ntp -f
systemctl force-reload ntp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntpq -pn
ntpq -c readlist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For server settings, at lease a &lt;code&gt;restrict &amp;lt;client address&amp;gt;&lt;/code&gt; line to allow ntp clients access.
If you don't add &lt;code&gt;noquery&lt;/code&gt;, you allow the client to query your ntpd status.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 192.168.xxx.xxx iburst
restrict -4 default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict ::1
restrict 192.168.xxx.xxx mask 255.255.255.0 nomodify notrap nopeer noquery
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntpq -pn &amp;lt;address&amp;gt;
ntpq -c readlist &amp;lt;address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200614.html</guid><pubDate>Sun, 14 Jun 2020 00:00:00 GMT</pubDate></item><item><title>journalctl</title><link>https://mnod.github.io/posts/20200613.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;show all messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show all messages from boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show messages with explanations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show kernel ring buffer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show messages of limitted time span&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl --since "2020-06-11"
journalctl --since "20 min ago"
journalctl --since "2020-06-11 00:00:00" --untill "2020-06-11 23:59:59"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show specific messages by unit, executable or process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -u networking
journalctl /usr/bin/sudo
journalctl _PID=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show specific messages by priority or syslog facility&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -p 5
journalctl -p 0..5
journalctl SYSLOG_FACILITY=10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;follow new messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;don't pipe output to a pager&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl --no-pager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically journal messages exist under /run/log/journal/ which is volatile directory.
Below commands move journal messages directory to directory under /var/log/journal/.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "Storage=persistent" | sudo tee -a /etc/systemd/journald.conf
systemctl force-reload systemd-journald
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can specify directory in which journal messages saved.
It would be convinient, for example, when you read other system's journal messages which is mounted on any mount point.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -D /mnt/var/log/journal -x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>systemd</category><guid>https://mnod.github.io/posts/20200613.html</guid><pubDate>Sat, 13 Jun 2020 00:00:00 GMT</pubDate></item><item><title>systemctl</title><link>https://mnod.github.io/posts/20200612.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;show system status&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show running or failed units&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl list-units
systemctl
systemctl --failed
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show installed unit files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl list-unit-files
ls -l /usr/lib/systemd/system /etc/systemd/system
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;start, stop, restart or reload a unit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl start unit
systemctl stop unit
systemctl restart unit
systemctl reload unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show status of a unit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;enable or disable a unit to be started on bootstrap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl enable unit
systemctl disable unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;check whether a unit is enabled or not&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl is-enabled unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mask or unmask a unit to make it impossible to start it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl mask unit
systemctl unmask unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reboot or poweroff the system&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl reboot
systemctl poweroff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>systemd</category><guid>https://mnod.github.io/posts/20200612.html</guid><pubDate>Fri, 12 Jun 2020 00:00:00 GMT</pubDate></item><item><title>postfix</title><link>https://mnod.github.io/posts/20200403.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;alias&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ postconf -n | grep alias
$ ls -l /etc/aliases*
$ postalias hash:/etc/aliases
$ newaliases
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;send mail or read mail of Maildir&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ apt install mailutils
$ echo "This is body message" | mail -s "My subject" pi
$ MAILDIR=$HOME/Maildir mail
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200403.html</guid><pubDate>Fri, 03 Apr 2020 00:00:00 GMT</pubDate></item><item><title>apt-cacher-ng</title><link>https://mnod.github.io/posts/20200315.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat Dockerfile
FROM debian:buster

RUN apt-get update \
&amp;amp;&amp;amp; apt-get install -y --no-install-recommends apt-cacher-ng \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/cache/apt-cacher-ng"]
EXPOSE 3142

CMD chmod 777 /var/cache/apt-cacher-ng \
&amp;amp;&amp;amp; /etc/init.d/apt-cacher-ng start \
&amp;amp;&amp;amp; tail -f /var/log/apt-cacher-ng/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build -t apt-cacher-ng:buster . | tee build.log
$ sudo docker tag apt-cacher-ng:buster apt-cacher-ng:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -d -p 3142:3142 -v /mnt/apt-cacher-ng:/var/cache/apt-cacher-ng apt-cacher-ng:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl 192.168.xxx.xxx:3142
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;how to use the cache server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;specify it in a config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; END | sudo tee /etc/apt/apt.conf.d/01proxy
&amp;gt; Acquire::http::Proxy "http://192.168.xxx.xxx:3142/";
&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify it in command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt-get install xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or
    $ sudo su -
    # http_proxy=http://192.168.xxx.xxx:3142/ apt-get install xxxx &lt;/p&gt;
&lt;p&gt;for docker build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t imagename:tagname . | tee build.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20200315.html</guid><pubDate>Sun, 15 Mar 2020 00:00:00 GMT</pubDate></item></channel></rss>