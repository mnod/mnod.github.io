<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about linux)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sun, 24 Oct 2021 01:14:58 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>rpm package management</title><link>https://mnod.github.io/posts/20211024.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;list installed packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -qa [package name]
# yum list [package name]
# dnf list [package name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install package / rpm file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -ivh &amp;lt;rpm file name&amp;gt;
# microdnf install &amp;lt;package name&amp;gt;
# dnf install &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list installed files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -ql &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list repositories&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum repolist [repository name] [-v]
# microdnf repolist
# dnf repolist [repository name] [-v]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show packages contained in the repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum repository-packages [repository name] list
# dnf repository-packages [repository name] list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;disable or enable repository with &lt;code&gt;config-manager&lt;/code&gt; module contained in &lt;code&gt;yum-utils&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum config-manager &amp;lt;--set-disabled|--set-enabled&amp;gt; epel
# dnf config-manager &amp;lt;--set-disabled|--set-enabled&amp;gt; epel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update installed packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum update
# microdnf update
# dnf update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;download rpm file with &lt;code&gt;yumdownloader&lt;/code&gt; which is a part of &lt;code&gt;yum-utils&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yumdownloder &amp;lt;package name&amp;gt;
# yumdownloder &amp;lt;package name&amp;gt;.&amp;lt;version&amp;gt;.&amp;lt;architecture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove package&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -e &amp;lt;pakcage name&amp;gt;
# yum remove &amp;lt;pakcage name&amp;gt;
# microdnf remove &amp;lt;pakcage name&amp;gt;
# dnf remove &amp;lt;pakcage name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove all cached data&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum clean all
# microdnf clean
# dnf clean all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show transaction history&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum history
# dnf history
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20211024.html</guid><pubDate>Sun, 24 Oct 2021 00:00:00 GMT</pubDate></item><item><title>squid bump</title><link>https://mnod.github.io/posts/20210610.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;On debian if you want to analyze or cache the content of the ssl traffic with squid, you have to buid your own squid.
This is a sample to build squid using apt source package.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

WORKDIR /tmp/buildwork
RUN echo 'deb-src http://deb.debian.org/debian buster main' &amp;gt;&amp;gt; /etc/apt/sources.list \
&amp;amp;&amp;amp; apt-get update \
&amp;amp;&amp;amp; apt install --no-install-recommends -y dpkg-dev devscripts build-essential fakeroot libssl-dev libldap2-dev libpam0g-dev libdb-dev cdbs libsasl2-dev debhelper libcppunit-dev libkrb5-dev comerr-dev libcap2-dev libecap3-dev libexpat1-dev libxml2-dev pkg-config libnetfilter-conntrack-dev nettle-dev libgnutls28-dev dh-apparmor ed libdbi-perl libltdl-dev lsb-release libpopt0 logrotate squid-langpack \
&amp;amp;&amp;amp; apt source squid \
&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

RUN sed -i.bak -e '/--with-gnutls$/ s/$/ --with-openssl --enable-ssl --enable-ssl-crtd/' squid-4.6/debian/rules \
&amp;amp;&amp;amp; squid-4.6/configure \
&amp;amp;&amp;amp; cd squid-4.6 \
&amp;amp;&amp;amp; debuild -us -uc -b \
&amp;amp;&amp;amp; dpkg -i ../squid_*.deb ../squid-common_*.deb \
&amp;amp;&amp;amp; mkdir -p /var/spool/squid /etc/squid/ssl_cert &amp;amp;&amp;amp; chown proxy:proxy /var/spool/squid \
&amp;amp;&amp;amp; cd /tmp &amp;amp;&amp;amp; rm -rf /tmp/buildwork

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf
COPY server.crt /etc/squid/ssl_cert/server.crt
COPY server.key /etc/squid/ssl_cert/server.key

CMD chmod 600 /etc/squid/ssl_cert/server.key \
&amp;amp;&amp;amp; if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; fi \
&amp;amp;&amp;amp; if [ ! -d /var/spool/squid/ssl_db ]; then /usr/lib/squid/security_file_certgen -c -s /var/spool/squid/ssl_db -M 20MB ; chown -R proxy. /var/spool/squid/ssl_db ; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
acl intermediate_fetching transaction_initiator certificate-fetching
http_access allow intermediate_fetching
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128 ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB cert=/etc/squid/ssl_cert/server.crt key=/etc/squid/ssl_cert/server.key
ssl_bump stare all
sslproxy_cert_error allow all
sslcrtd_children 3 startup=1 idle=1
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have a CA file and private key for it, you need create them.
When you already have them, I think you can use intermediate CA signed by your own CA.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout server.key -out server.crt -subj "/CN=192.168.xxx.xxx" -days 3650
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
'--with-openssl'
'--enable-ssl'
'--enable-ssl-crtd'
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
:
:
* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384
* ALPN, server did not agree to a protocol
* Server certificate:
*  subject: C=US; ST=California; L=Mountain View; O=Google LLC; CN=www.google.com
*  start date: May 10 04:04:06 2021 GMT
*  expire date: Aug  2 04:04:05 2021 GMT
*  issuer: CN=192.168.xxx.xxx
*  SSL certificate verify result: self signed certificate in certificate chain (19), continuing anyway.
} [5 bytes data]
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: www.google.com
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;gt; 
{ [5 bytes data]
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Wed, 09 Jun 2021 00:22:42 GMT
&amp;lt; Expires: -1
&amp;lt; Cache-Control: private, max-age=0
&amp;lt; Content-Type: text/html; charset=ISO-8859-1
&amp;lt; P3P: CP="This is not a P3P policy! See g.co/p3phelp for more info."
&amp;lt; Server: gws
&amp;lt; X-XSS-Protection: 0
&amp;lt; X-Frame-Options: SAMEORIGIN
&amp;lt; Set-Cookie: 1P_JAR=2021-06-09-00; expires=Fri, 09-Jul-2021 00:22:42 GMT; path=/; domain=.google.com; Secure
&amp;lt; Set-Cookie: NID=216=ptf-d_HIPGOAjnEf-gbmRDmIg3JnEfjqRRnQghOkyFHrdLy5fXGOhydj5jBHonqOlP5WCzPIKX3kIkdizOXCQ13t4moqXwr-UoOWiRXgYaAkx6gyqe03hjM_hwfin5plUuG3NClONGvvFJo5Mqvar7GFYrSFYOMVCXMXvTJ0d4M; expires=Thu, 09-Dec-2021 00:22:42 GMT; path=/; domain=.google.com; HttpOnly
&amp;lt; Alt-Svc: h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
&amp;lt; Accept-Ranges: none
&amp;lt; Vary: Accept-Encoding
&amp;lt; X-Cache: MISS from bd2e0fa8b95e
&amp;lt; X-Cache-Lookup: MISS from bd2e0fa8b95e:3128
&amp;lt; Transfer-Encoding: chunked
&amp;lt; Via: 1.1 bd2e0fa8b95e (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt; 
{ [5 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample log of other connections&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1622798061.167    833 192.168.xxx.xxx NONE/200 0 CONNECT dl.fedoraproject.org:443 - HIER_DIRECT/38.145.60.22 -
1622798061.539    260 192.168.xxx.xxx TCP_MISS/200 16108 GET https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm - HIER_DIRECT/38.145.60.22 application/x-rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1622798109.029    496 192.168.xxx.xxx NONE/200 0 CONNECT dl.fedoraproject.org:443 - HIER_DIRECT/38.145.60.22 -
1622798109.130      1 192.168.xxx.xxx TCP_MEM_HIT/200 16115 GET https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm - HIER_NONE/- application/x-rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210610.html</guid><pubDate>Thu, 10 Jun 2021 00:00:00 GMT</pubDate></item><item><title>squid nobump</title><link>https://mnod.github.io/posts/20210608.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;The squid packages of debian doesn not support &lt;a href="https://wiki.squid-cache.org/Features/SslBump"&gt;sslbump&lt;/a&gt;.
It only redirects ssl traffic. We can not analyze or cache the content of the ssl traffic.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

RUN apt-get update \
&amp;amp;&amp;amp; apt install -y squid \
s&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf

CMD if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; sleep 2; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
(result will be nothing)
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTP server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
*   Trying 2001:df0:25e:e100::3...
* TCP_NODELAY set
* Connected to ftp.yz.yamagata-u.ac.jp (2001:df0:25e:e100::3) port 80 (#0)
&amp;gt; GET /pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:59:01 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Upgrade: h2,h2c
&amp;lt; Connection: Upgrade
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt;
{ [331 bytes data]
* Connection #0 to host ftp.yz.yamagata-u.ac.jp left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3128/ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
* Uses proxy env variable http_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
&amp;gt; GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:58:26 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt; X-Cache: MISS from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: MISS from e3b21f81fdd2:3128
&amp;lt; Via: 1.1 e3b21f81fdd2 (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt;
{ [331 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when cache hit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; Age: 358
&amp;lt; X-Cache: HIT from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: HIT from e3b21f81fdd2:3128
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1623026732.001    265 192.168.xxx.xxx TCP_MISS/200 685 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_DIRECT/133.24.248.17 -
1623027089.025      0 192.168.xxx.xxx TCP_MEM_HIT/200 693 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_NONE/- -
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -k -s https://www.google.com/ -o /dev/null 
*   Trying 142.250.196.132...
* TCP_NODELAY set
* Connected to www.google.com (142.250.196.132) port 443 (#0)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null 
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port xxxxx (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log. The ssl connection is just tunneled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1622950724.481    170 192.168.xxx.xxx TCP_TUNNEL/200 18439 CONNECT www.google.com:443 - HIER_DIRECT/172.217.175.4 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210608.html</guid><pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate></item><item><title>kvm on raspberrypi</title><link>https://mnod.github.io/posts/20200927.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;kvm On Raspberry Pi OS (64bit) beta test version&lt;/p&gt;
&lt;p&gt;related packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install --no-install-recommends qemu-system-arm qemu-utils kpartx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;boot alpine linux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;get kernel and initra from the iso file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount -o loop alpine-standard-3.12.0-aarch64.iso /media/tmp
$ sudo cp /media/tmp/boot/initramfs-lts .
$ sudo cp /media/tmp/boot/vmlinuz-lts .
$ sudo umount /media/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -nographic -m 512 \
&amp;gt; -kernel vmlinuz-lts -initrd initramfs-lts \
&amp;gt; -drive if=none,id=image,file=alpine-standard-3.12.0-aarch64.iso -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;install debian10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;download kernel and initrd file and create an empty virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget -O linux http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/linux
$ wget -O initrd.gz http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/initrd.gz
$ qemu-img create -f qcow2 hda.qcow2 16G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot the installer with downloaded kernel and initrd file and install to the virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel linux -initrd initrd.gz \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -no-reboot -vnc :1

$ vncviewer xxx.xxx.xxx.xxx:5901
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get kernel and initrd file from qcow2 file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsmod | grep nbd
$ sudo modprobe nbd
$ sudo qemu-nbd -c /dev/nbd0 debian10.qcow2
$ sudo kpartx -av /dev/nbd0
$ sudo mount /dev/mapper/nbd0p1 /media/tmp

$ cp /media/tmp/initrd.img-4.19.0-11-arm64 .
$ cp /media/tmp/vmlinuz-4.19.0-11-arm64 .

$ sudo umount /media/tmp
$ sudo kpartx -dv /dev/nbd0
$ sudo qemu-nbd -d /dev/nbd0
$ sudo rmmod nbd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel vmlinuz-4.19.0-11-arm64 -initrd initrd.img-4.19.0-11-arm64 \
&amp;gt; -append 'root=/dev/vda2' \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -nographic
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>kvm</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200927.html</guid><pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate></item><item><title>docker on raspberrypi</title><link>https://mnod.github.io/posts/20200926.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Install docker on &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=117&amp;amp;t=275370"&gt;Raspberry Pi OS (64bit) beta test version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/debian/"&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --dry-run
$ sudo sh get-docker.sh
$ systemctl is-active docker
$ systemctl is-enabled docker
$ sudo docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the docker root directory where we store the images and containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker info | grep Root
$ sudo systemctl stop docker
$ sudo mv /var/lib/docker /path/to/
$ sudo ln -s /path/to/docker /var/lib/docker
$ sudo systemctl start docker
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -it alpine
/ #
/ # uptime
 03:17:44 up 1 day,  2:47,  load average: 0.02, 0.05, 0.01
/ #
/ # uname -a
Linux 4db177a44a14 5.4.42-v8+ #1319 SMP PREEMPT Wed May 20 14:18:56 BST 2020 aarch64 Linux
/ #
/ # free -m
              total        used        free      shared  buff/cache   available
Mem:           7816         315        6339           2        1161        7460
Swap:          8191           0        8191
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt install libffi-dev libssl-dev
$ sudo pip3 install docker-compose
$ pip3 show docker-compose
$ docker-compose version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;commands of docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config # Validate and view the Compose file
ps # List containers
images # List images
build # (Re)Build services
create # Create services
up # Create and start containers
start # Start services
stop # Stop services
rm -f # Remove stopped containers
down # Stop and remove containers
version # Show version information
help # Show help messages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When update docker-compose.yml, no need to rebuild the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When update Dockerfile or edit any source codes, need to rebuild the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200926.html</guid><pubDate>Sat, 26 Sep 2020 00:00:00 GMT</pubDate></item><item><title>vhd</title><link>https://mnod.github.io/posts/20200924.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Windows can mount vhd file as a virtual drive.
We can use it for application install space or document storage area.&lt;/p&gt;
&lt;p&gt;When we create a vhd file on a flash memory, the memory should be formatted with ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parted /dev/sdb print
parted /dev/sdb rm 1
parted /dev/sdb mkpart primary ntfs 0% 100%
mkfs.ntfs -Q /dev/sdb1
mount /dev/sdb1 /mnt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first a raw image file, make label, and make partition.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dd if=/dev/zero of=file.img bs=1M count=0 seek=59000
losetup -f
losetup /dev/loop1 file.img
losetup -a
parted /dev/loop1 print
parted /dev/loop1 mklabel msdos
parted /dev/loop1 mkpart primary ntfs 0% 100%
losetup -d /dev/loop1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then format the partition in ntfs format.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kpartx -a -v file.img
mkfs.ntfs -Q /dev/loop1p1
kpartx -d -v file.img
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The vhd file must not be sparse file.
So after we convert it to vhd format, then we should convert it to normal file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp --sparse=never file.img file_new.img
qemu-img convert -O vpc -o subformat=fixed,force_size=on file.img output.vhd
cp -pi --sparse=never output.vhd.sparse file.vhd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;diskpart&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In windows os, we can handle partition and filesystem with sub commands of diskpart command.&lt;/p&gt;
&lt;p&gt;format usb drive&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
select volume=2
format fs=ntfs quick
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create a vhd file and attach it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
create vdisk file="d:\image.vhd" maximum=1024
select vdisk file="d:\image.vhd"
attach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create partition in the vhd file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select disk 2
list disk
create partition primary
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;format in ntfs and assign drive letter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list volume
select volume=3
format fs=ntfs quick
assign letter=e:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;detach the vhd file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select vdisk file="d:\image.vhd"
detach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;next time, just attach it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select vdisk file="d:\image.vhd"
attach vdisk
list vdisk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>windows</category><guid>https://mnod.github.io/posts/20200924.html</guid><pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate></item><item><title>screen and tmux</title><link>https://mnod.github.io/posts/20200616.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;table&gt;
&lt;tr&gt;&lt;th&gt;command&lt;/th&gt;&lt;th&gt;screen&lt;/th&gt;&lt;th&gt;tmux&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list&lt;/th&gt;&lt;td&gt;-ls&lt;/td&gt;&lt;td&gt;ls&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;with name&lt;/th&gt;&lt;td&gt;-S name&lt;/td&gt;&lt;td&gt;new -s name&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;attach&lt;/th&gt;&lt;td&gt;-r [title]&lt;/td&gt;&lt;td&gt;a [-t title]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;prefix&lt;/th&gt;&lt;td&gt;Ctrl+a&lt;/td&gt;&lt;td&gt;Ctrl+b&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;new&lt;/th&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;td&gt;prefix+c&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;switch&lt;/th&gt;&lt;td&gt;prefix+num&lt;/td&gt;&lt;td&gt;prerix+num&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;list screen&lt;/th&gt;&lt;td&gt;prefix+"&lt;/td&gt;&lt;td&gt;prerix+w&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;th&gt;copy mode&lt;/th&gt;&lt;td&gt;prefix+esc&lt;/td&gt;&lt;td&gt;prefix+[&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;screen&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;it can connect to serial port. default baud is 9600&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen /dev/ttyS0 [baud rate]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it can create a new window which executes a specific program&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen watch -n 5 ntpq -pn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200616.html</guid><pubDate>Tue, 16 Jun 2020 00:00:00 GMT</pubDate></item><item><title>chrony</title><link>https://mnod.github.io/posts/20200615.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;chrony is an implementation of Network Time Protocol&lt;/p&gt;
&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample config
specify ntp server at &lt;code&gt;server&lt;/code&gt; or ntp server pool for &lt;code&gt;pool&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/chrony/chrony.conf
server 192.168.xxx.xxx iburst minpoll 6 maxpoll 10
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reload configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status chronyd
journalctl -u chrony -f
systemctl force-reload chrony
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show system track performance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc tracking
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show current time sources&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc sources
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show information about drift rate and offset estimation process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc sourcestats
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show the last valid measurement and other information&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc ntpdata
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For server settings, at least add a &lt;code&gt;allow&lt;/code&gt; line.
&lt;code&gt;cmdallow&lt;/code&gt; and &lt;code&gt;bindcmdaddress&lt;/code&gt; lines are optional which is for monitoring access&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/chrony/chrony.conf
server 192.168.xxx.xxx iburst minpoll 6 maxpoll 10
keyfile /etc/chrony/chrony.keys
driftfile /var/lib/chrony/chrony.drift
logdir /var/log/chrony
maxupdateskew 100.0
rtcsync
makestep 1 3
allow 192.168.xxx.0/24
cmdallow 192.168.xxx.0/24
bindcmdaddress 127.0.0.1
bindcmdaddress 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show list of clients&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chronyc clients
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify a remote host to which chronyd is to be connected (using udp/323)
default is localhost&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cronyc -h 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200615.html</guid><pubDate>Mon, 15 Jun 2020 00:00:00 GMT</pubDate></item><item><title>ntpd</title><link>https://mnod.github.io/posts/20200614.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;install&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt install ntp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample config
specify ntp server at &lt;code&gt;server&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 192.168.xxx.xxx iburst
restrict -4 default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict ::1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;reload configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl status ntp
journalctl -u ntp -f
systemctl force-reload ntp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntpq -pn
ntpq -c readlist
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For server settings, at lease a &lt;code&gt;restrict &amp;lt;client address&amp;gt;&lt;/code&gt; line to allow ntp clients access.
If you don't add &lt;code&gt;noquery&lt;/code&gt;, you allow the client to query your ntpd status.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ grep -E -v "^#|^$" /etc/ntp.conf
driftfile /var/lib/ntp/ntp.drift
leapfile /usr/share/zoneinfo/leap-seconds.list
statistics loopstats peerstats clockstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
server 192.168.xxx.xxx iburst
restrict -4 default ignore
restrict -6 default ignore
restrict 127.0.0.1
restrict ::1
restrict 192.168.xxx.xxx mask 255.255.255.0 nomodify notrap nopeer noquery
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm commands&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntpq -pn &amp;lt;address&amp;gt;
ntpq -c readlist &amp;lt;address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20200614.html</guid><pubDate>Sun, 14 Jun 2020 00:00:00 GMT</pubDate></item><item><title>journalctl</title><link>https://mnod.github.io/posts/20200613.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;show all messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show all messages from boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show messages with explanations&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show kernel ring buffer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show messages of limitted time span&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl --since "2020-06-11"
journalctl --since "20 min ago"
journalctl --since "2020-06-11 00:00:00" --untill "2020-06-11 23:59:59"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show specific messages by unit, executable or process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -u networking
journalctl /usr/bin/sudo
journalctl _PID=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show specific messages by priority or syslog facility&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -p 5
journalctl -p 0..5
journalctl SYSLOG_FACILITY=10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;follow new messages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;don't pipe output to a pager&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl --no-pager
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically journal messages exist under /run/log/journal/ which is volatile directory.
Below commands move journal messages directory to directory under /var/log/journal/.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo "Storage=persistent" | sudo tee -a /etc/systemd/journald.conf
systemctl force-reload systemd-journald
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can specify directory in which journal messages saved.
It would be convinient, for example, when you read other system's journal messages which is mounted on any mount point.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;journalctl -D /mnt/var/log/journal -x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>linux</category><category>systemd</category><guid>https://mnod.github.io/posts/20200613.html</guid><pubDate>Sat, 13 Jun 2020 00:00:00 GMT</pubDate></item></channel></rss>