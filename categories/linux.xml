<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about linux)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/linux.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2022 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sun, 03 Jul 2022 09:32:53 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>let's encrrypt</title><link>https://mnod.github.io/posts/20220627.html</link><dc:creator>mnod</dc:creator><description>&lt;pre&gt;&lt;code&gt;certbot certonly \
--dry-run \
-d www.example.net \
-m yourname@example.net \
--preferred-challenges dns-01  \
--server https://acme-v02.api.letsencrypt.org/directory \
--manual \
--manual-auth-hook /home/user/work/letsencrypt/dns01-auth.sh \
--manual-cleanup-hook /home/user/work/letsencrypt/dns01-clean.sh \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When you run certbot in non-root user, you have to specify --work-dir, --logs-dir, and --config-dir options.  These directories have to be writable with your user.&lt;/li&gt;
&lt;li&gt;You can only publish new certificate file via certbot. Your new certificate file will pushed under config-dir directory. Afterward, you can deploy it with your deploy tool which you like. &lt;/li&gt;
&lt;li&gt;The dns-01 challenge authentication only needs DNS validation and don't need to access via 80/tcp nor web server installation on your server.
When you use dns-01 challenge, you can use your script to update your dns resource to --manual-auth-hook (for authentication) and --manual-cleanup-hook (for cleanup entry).&lt;br&gt;
CERTBOT_DOMAIN varaible is used to show domain name which you want to use. CERTBOT_VALIDATION vaibale is used to show validation code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sample script which create validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-auth.sh"&gt;&lt;/script&gt;

&lt;p&gt;sample script which delete validtion entry for aws route53&lt;/p&gt;
&lt;script src="https://gist.github.com/mnod/0ed9ec48287d3a785a1e648911720b37.js?file=dns01-clean.sh"&gt;&lt;/script&gt;

&lt;pre&gt;&lt;code&gt;certbot renew \
--dry-run \
--post-hook /home/user/work/letsencrypt/post-hook.sh \
--work-dir /home/user/work/letsencrypt/work \
--logs-dir /home/user/work/letsencrypt/logs \
--config-dir /home/user/work/letsencrypt/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Once you get your new certificate, you have to update your certificate periodically.&lt;/li&gt;
&lt;/ul&gt;</description><category>aws</category><category>linux</category><category>openssl</category><guid>https://mnod.github.io/posts/20220627.html</guid><pubDate>Mon, 27 Jun 2022 00:00:00 GMT</pubDate></item><item><title>network time security</title><link>https://mnod.github.io/posts/20220615.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;a href="https://fedoramagazine.org/secure-ntp-with-nts/"&gt;Secure NTP with NTS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Chrony supports nts since version 4.0. I tried to build nts server and client.&lt;/p&gt;
&lt;h3&gt;server configuration&lt;/h3&gt;
&lt;p&gt;example of chrony 4.2 on ubuntu 22.04 LTS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server time.facebook.com iburst maxpoll 11
server time.google.com   iburst maxpoll 11
server time.apple.com    iburst maxpoll 11

ntsserverkey /etc/chrony/key.pem
ntsservercert /etc/chrony/crt.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;key.pem and crt.pem are openssl private key and certificate(with intermediate ca certificate) file pair.
The certificate needs to include your fqdn of your nts server.&lt;/p&gt;
&lt;p&gt;When I put key and crt files in a sub directory of /etc/ssl, below error occured.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not set credentials : Error while reading file.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In /var/log/syslog, I found audit log of apparmor which shows it denied for chronyd to open the key file.
When I put them in /etc/chrony, I successed to run it.&lt;/p&gt;
&lt;p&gt;Before test from client, you have to open not only 123/udp for NTP but also 4460/tcp for NTS-KE.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ chronyd -Q -t 8 'server mynts.example.com iburst nts'
$ sudo chronyc serverstats
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;client configuration&lt;/h3&gt;
&lt;p&gt;example of chrony 4.0 on Debian 11&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server mynts.example.com iburst nts
server ptbtime1.ptb.de   iburst nts
server nts.time.nl       iburst nts
server nts.ntp.se        iburst nts

ntstrustedcerts /etc/chrony/cacert.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use selfsigned CA to make your certificate in the nts server, you have to show your own ca certificate file to chrony.conf in ntstrustedcerts.&lt;/p&gt;</description><category>linux</category><category>ntp</category><guid>https://mnod.github.io/posts/20220615.html</guid><pubDate>Wed, 15 Jun 2022 00:00:00 GMT</pubDate></item><item><title>wireguard on raspberryrpi</title><link>https://mnod.github.io/posts/20220614.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;I tried to install wireguard with &lt;a href="https://docs.pivpn.io/install/"&gt;pivpn&lt;/a&gt; on 64bit Raspberry pi OS (buster, 4B), but it failed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; END &amp;gt; /tmp/pivpn_options.conf                                                                                                                                           
IPv4dev=xx
install_user=pi
VPN=wireguard
pivpnNET=10.x.x.0
subnetClass=24
ALLOWED_IPS="10.x.x.0/24, 192.168.y.0/24"
pivpnMTU=1420
pivpnPORT=51820
pivpnDNS1=1.1.1.1
pivpnHOST=myname.example.com
pivpnPERSISTENTKEEPALIVE=25
UNATTUPG=1
END

$ curl -L https://install.pivpn.io &amp;gt; /tmp/pivpn_install.sh
$ chmod +x /tmp/pivpn_install.sh
$ /tmp/pivpn_install.sh --noipv6 --unattended /tmp/pivpn_options.conf                                                                                                     


:: wireguard is not a supported VPN protocol on arm64 Debian, only 'openvpn' is
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was not able to select wireguard in intereractive interface. It select openvpn automatically.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ /tmp/pivpn_install.sh --noipv6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Though I successed it on 32bit Raspberry pi OS (bullseye, 3B+)
It needs NAPT settings to your pi to make a connection from outside wireguard peer.&lt;/p&gt;
&lt;p&gt;I'd like to try it on bookwarm 32bit/64bit when it will be released on the next version of the pi :)&lt;/p&gt;</description><category>failed</category><category>linux</category><category>raspberrypi</category><category>vpn</category><guid>https://mnod.github.io/posts/20220614.html</guid><pubDate>Tue, 14 Jun 2022 00:00:00 GMT</pubDate></item><item><title>copy partition of sd card</title><link>https://mnod.github.io/posts/20220328.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;dump partition of original sd card&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo parted /dev/sdx print
sudo dd if=/dev/sdx1 of=tablet_sdx1.img bs=4M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;restore to new sd card&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo parted /dev/sdx print
sudo dd if=tablet_sdx1.img of=/dev/sdx1 bs=4M
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the size of filesystem&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mount /dev/sdb1 /media/tmp
df
sudo umount /media/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extend the filesystem (if needed)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install --no-install-recommends fatresize
sudo fatresize -i /dev/sdb1
max=$(expr $(sudo fatresize -i /dev/sdb1 | awk -F: '$1~/Max size/{print $2}') / 1024)
sudo fatresize -s ${max}k /dev/sdb1
sudo fatresize -i /dev/sdb1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the size of filesystem&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo mount /dev/sdb1 /media/tmp
df
&lt;/code&gt;&lt;/pre&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20220328.html</guid><pubDate>Mon, 28 Mar 2022 00:00:00 GMT</pubDate></item><item><title>k3s using docker runtime</title><link>https://mnod.github.io/posts/20210629.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;em&gt;install single-node k3s cluster instead of containerd&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I can install with these commands on debian buster arm64 though can not on bullseye.&lt;/p&gt;
&lt;p&gt;at first intall docker&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install ca-certificates curl gnupg lsb-release
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
sudo apt-get update
sudo apt-get install docker-ce docker-ce-cli containerd.io
sudo docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then install k3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -sfL https://get.k3s.io | sh -s - --docker
systemctl status k3s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;uninstall&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/usr/local/bin/k3s-uninstall.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;!--
sudo kubectl get pods --all-namespaces
sudo kubectl get pods --all-namespaces -o wide

sudo kubectl get rs
sudo kubectl scale rs/&lt;rs name&gt; --replicas=0

sudo kubectl exec &lt;pod name&gt; -- &lt;command ...&gt;
sudo kubectl exec -it &lt;pod name&gt; -- /bin/sh
sudo kubectl delete pod &lt;pod name&gt;

sudo kubectl get nodes
sudo kubectl get nodes -o wide
--&gt;

&lt;p&gt;&lt;em&gt;create deployment&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;create yaml file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; nginx-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-test
        image: nginx-test:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 80
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create and confirm the deployment&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo kubectl create -f nginx-deployment.yaml
sudo kubectl get deploy
sudo kubectl get pod
sudo kubectl exec -it &amp;lt;pod name&amp;gt; -- curl localhost
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;create service&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;create yaml file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;EOF &amp;gt; nginx-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
  - protocol: TCP
    targetPort: 80
    port: 80
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create and confirm the service &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo kubectl create -f nginx-service.yaml
sudo kubectl get svc
curl x.x.x.x
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;modify service&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo kubectl apply -f nginx-deployment.yaml
sudo kubectl get svc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;delete srvice&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo kubectl delete svc &amp;lt;service name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;delete deployment&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo kubectl delete -f ./nginx-deployment.yaml
&lt;/code&gt;&lt;/pre&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210629.html</guid><pubDate>Wed, 29 Dec 2021 00:00:00 GMT</pubDate></item><item><title>Grandstream GXP1610</title><link>https://mnod.github.io/posts/20211030.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;&lt;a href="http://www.grandstream.com/products/ip-voice-telephony-gxp-series-ip-phones/gxp-series-basic-ip-phones/product/gxp1610/gxp1615"&gt;GXP1610&lt;/a&gt; ã¯ 1SIP å¯¾å¿ã® IPé»è©±æ©ã
æ¶²æ¶ããã¯ã©ã¤ããæ­è¼ãã¦ããã2SIPã«å¯¾å¿ãã¦ããããPoEå¯¾å¿ãGigabit Ethernetå¯¾å¿ãã¦ããããªä¸ç´æ©ãããä¸­ã®å¥éæ©ã&lt;/p&gt;
&lt;p&gt;ä»¥ä¸ãåå¿é²&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;èª¬ææ¸ã¯ãã©ãã©ãå¿è¦ãªæå ±ã¯&lt;a href="http://www.grandstream.com/support/resources?title=GXP1610/GXP1615&amp;amp;hsLang=en"&gt;èªãåãã«è¡ãå§¿å¢&lt;/a&gt;ãæ±ãããã&lt;/li&gt;
&lt;li&gt;ã¹ã¿ã³ãã®åãä»ãåãã«æ³¨æ&lt;/li&gt;
&lt;li&gt;ã¹ã¤ããããã®ã±ã¼ãã«ãLANã«ãPCã¸ã®ã±ã¼ãã«ãPCã¸æ¥ç¶ããã¨ããã(?)ã¨ãã¦åä½ãã¦ããã(10/100Mbps)&lt;/li&gt;
&lt;li&gt;DHCPãæå¹ãªãããã¯ã¼ã¯ã«æ¥ç¶ãã¦ã»ã©ãªãããã¨IPã¢ãã¬ã¹ãåãã&lt;/li&gt;
&lt;li&gt;ãã£ã¹ãã¬ã¤ã«IPã¢ãã¬ã¹ãè¡¨ç¤ºãããã®ã§ãPCããWebã¢ã¯ã»ã¹ããã¨ãç®¡çç»é¢ãè¡¨ç¤ºã§ãã&lt;/li&gt;
&lt;li&gt;ç®¡çç»é¢ã®åæãã¹ã¯ã¼ãã¯åæ¢±ã®èª¬ææ¸ã«è¨è¼ããã¦ãããåãã¦ã­ã°ã¤ã³ããã¨å¤æ´ãä¿ããããã­ã°ã¤ã³æã«5åééããã¨ãã°ã&lt;/li&gt;
&lt;li&gt;Web UIãç«¯æ«ã®æ¶²æ¶ã¨ããå¤è¨èªå¯¾å¿(æ¥æ¬èªè¡¨ç¤ºå¯è½)&lt;/li&gt;
&lt;li&gt;è©¦ãã¦ããªããIPã¢ãã¬ã¹ã¯éçã¢ãã¬ã¹ãè¨­å®å¯è½ãªããã &lt;/li&gt;
&lt;li&gt;è¨­å®æ¸ã¿ã®Asteriskã«åå®¹ããã ããªããWeb UI ã§ SIPãµã¼ããIDããã¹ã¯ã¼ãç­ãè¨­å®ããã ããªã®ã§ãç°¡å&lt;/li&gt;
&lt;li&gt;SIPã¢ã«ã¦ã³ãè¨­å®ã®ç»é¢ã§ãVoice Mail Access Number ãè¨­å®ããã¨ãã¡ã¼ã«ã¢ã¤ã³ã³ã®ãã¿ã³ãæ¼ããã¨ã§ãVoiceMail ã«æ¶é»ãããã¨ãã§ãã&lt;/li&gt;
&lt;li&gt;NTPãµã¼ããæå®ã§ãã&lt;/li&gt;
&lt;li&gt;Syslogè»¢éã§ãã(facility=user)&lt;/li&gt;
&lt;li&gt;è©¦ãã¦ããªããã©ãSNMPãµã¼ããæå®ã§ããããã &lt;/li&gt;
&lt;li&gt;è©¦ãã¦ããªããã©ãLDAPã®é»è©±å¸³ãä½¿ããããã &lt;/li&gt;
&lt;/ul&gt;</description><category>linux</category><category>voip</category><guid>https://mnod.github.io/posts/20211030.html</guid><pubDate>Sat, 30 Oct 2021 00:00:00 GMT</pubDate></item><item><title>rpm package management</title><link>https://mnod.github.io/posts/20211024.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;list installed packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -qa [package name]
# yum list [package name]
# dnf list [package name]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install package / rpm file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -ivh &amp;lt;rpm file name&amp;gt;
# microdnf install &amp;lt;package name&amp;gt;
# dnf install &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list installed files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -ql &amp;lt;package name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list repositories&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum repolist [repository name] [-v]
# microdnf repolist
# dnf repolist [repository name] [-v]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show packages contained in the repository&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum repository-packages [repository name] list
# dnf repository-packages [repository name] list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;disable or enable repository with &lt;code&gt;config-manager&lt;/code&gt; module contained in &lt;code&gt;yum-utils&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum config-manager &amp;lt;--set-disabled|--set-enabled&amp;gt; epel
# dnf config-manager &amp;lt;--set-disabled|--set-enabled&amp;gt; epel
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;update installed packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum update
# microdnf update
# dnf update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;download rpm file with &lt;code&gt;yumdownloader&lt;/code&gt; which is a part of &lt;code&gt;yum-utils&lt;/code&gt; package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yumdownloder &amp;lt;package name&amp;gt;
# yumdownloder &amp;lt;package name&amp;gt;.&amp;lt;version&amp;gt;.&amp;lt;architecture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;list files contained in a rpm file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm2cpio &amp;lt;rpm file&amp;gt; | cpio --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;extract a rpm file in the current directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm2cpio &amp;lt;rpm file&amp;gt; | cpio -id
# find . -type f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove installed package&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rpm -e &amp;lt;pakcage name&amp;gt;
# yum remove &amp;lt;pakcage name&amp;gt;
# microdnf remove &amp;lt;pakcage name&amp;gt;
# dnf remove &amp;lt;pakcage name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;remove all cached data&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum clean all
# microdnf clean
# dnf clean all
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;show transaction history&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum history
# dnf history
&lt;/code&gt;&lt;/pre&gt;</description><category>linux</category><guid>https://mnod.github.io/posts/20211024.html</guid><pubDate>Sun, 24 Oct 2021 00:00:00 GMT</pubDate></item><item><title>squid bump</title><link>https://mnod.github.io/posts/20210610.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;On debian if you want to analyze or cache the content of the ssl traffic with squid, you have to buid your own squid.
This is a sample to build squid using apt source package.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

WORKDIR /tmp/buildwork
RUN echo 'deb-src http://deb.debian.org/debian buster main' &amp;gt;&amp;gt; /etc/apt/sources.list \
&amp;amp;&amp;amp; apt-get update \
&amp;amp;&amp;amp; apt install --no-install-recommends -y dpkg-dev devscripts build-essential fakeroot libssl-dev libldap2-dev libpam0g-dev libdb-dev cdbs libsasl2-dev debhelper libcppunit-dev libkrb5-dev comerr-dev libcap2-dev libecap3-dev libexpat1-dev libxml2-dev pkg-config libnetfilter-conntrack-dev nettle-dev libgnutls28-dev dh-apparmor ed libdbi-perl libltdl-dev lsb-release libpopt0 logrotate squid-langpack \
&amp;amp;&amp;amp; apt source squid \
&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

RUN sed -i.bak -e '/--with-gnutls$/ s/$/ --with-openssl --enable-ssl --enable-ssl-crtd/' squid-4.6/debian/rules \
&amp;amp;&amp;amp; squid-4.6/configure \
&amp;amp;&amp;amp; cd squid-4.6 \
&amp;amp;&amp;amp; debuild -us -uc -b \
&amp;amp;&amp;amp; dpkg -i ../squid_*.deb ../squid-common_*.deb \
&amp;amp;&amp;amp; mkdir -p /var/spool/squid /etc/squid/ssl_cert &amp;amp;&amp;amp; chown proxy:proxy /var/spool/squid \
&amp;amp;&amp;amp; cd /tmp &amp;amp;&amp;amp; rm -rf /tmp/buildwork

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf
COPY server.crt /etc/squid/ssl_cert/server.crt
COPY server.key /etc/squid/ssl_cert/server.key

CMD chmod 600 /etc/squid/ssl_cert/server.key \
&amp;amp;&amp;amp; if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; fi \
&amp;amp;&amp;amp; if [ ! -d /var/spool/squid/ssl_db ]; then /usr/lib/squid/security_file_certgen -c -s /var/spool/squid/ssl_db -M 20MB ; chown -R proxy. /var/spool/squid/ssl_db ; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
acl intermediate_fetching transaction_initiator certificate-fetching
http_access allow intermediate_fetching
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128 ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB cert=/etc/squid/ssl_cert/server.crt key=/etc/squid/ssl_cert/server.key
ssl_bump stare all
sslproxy_cert_error allow all
sslcrtd_children 3 startup=1 idle=1
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you don't have a CA file and private key for it, you need create them.
When you already have them, I think you can use intermediate CA signed by your own CA.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ openssl req -x509 -newkey rsa:4096 -sha256 -nodes -keyout server.key -out server.crt -subj "/CN=192.168.xxx.xxx" -days 3650
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
'--with-openssl'
'--enable-ssl'
'--enable-ssl-crtd'
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
:
:
* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384
* ALPN, server did not agree to a protocol
* Server certificate:
*  subject: C=US; ST=California; L=Mountain View; O=Google LLC; CN=www.google.com
*  start date: May 10 04:04:06 2021 GMT
*  expire date: Aug  2 04:04:05 2021 GMT
*  issuer: CN=192.168.xxx.xxx
*  SSL certificate verify result: self signed certificate in certificate chain (19), continuing anyway.
} [5 bytes data]
&amp;gt; GET / HTTP/1.1
&amp;gt; Host: www.google.com
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Accept: */*
&amp;gt; 
{ [5 bytes data]
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Wed, 09 Jun 2021 00:22:42 GMT
&amp;lt; Expires: -1
&amp;lt; Cache-Control: private, max-age=0
&amp;lt; Content-Type: text/html; charset=ISO-8859-1
&amp;lt; P3P: CP="This is not a P3P policy! See g.co/p3phelp for more info."
&amp;lt; Server: gws
&amp;lt; X-XSS-Protection: 0
&amp;lt; X-Frame-Options: SAMEORIGIN
&amp;lt; Set-Cookie: 1P_JAR=2021-06-09-00; expires=Fri, 09-Jul-2021 00:22:42 GMT; path=/; domain=.google.com; Secure
&amp;lt; Set-Cookie: NID=216=ptf-d_HIPGOAjnEf-gbmRDmIg3JnEfjqRRnQghOkyFHrdLy5fXGOhydj5jBHonqOlP5WCzPIKX3kIkdizOXCQ13t4moqXwr-UoOWiRXgYaAkx6gyqe03hjM_hwfin5plUuG3NClONGvvFJo5Mqvar7GFYrSFYOMVCXMXvTJ0d4M; expires=Thu, 09-Dec-2021 00:22:42 GMT; path=/; domain=.google.com; HttpOnly
&amp;lt; Alt-Svc: h3-29=":443"; ma=2592000,h3-T051=":443"; ma=2592000,h3-Q050=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000,quic=":443"; ma=2592000; v="46,43"
&amp;lt; Accept-Ranges: none
&amp;lt; Vary: Accept-Encoding
&amp;lt; X-Cache: MISS from bd2e0fa8b95e
&amp;lt; X-Cache-Lookup: MISS from bd2e0fa8b95e:3128
&amp;lt; Transfer-Encoding: chunked
&amp;lt; Via: 1.1 bd2e0fa8b95e (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt; 
{ [5 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample log of other connections&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1622798061.167    833 192.168.xxx.xxx NONE/200 0 CONNECT dl.fedoraproject.org:443 - HIER_DIRECT/38.145.60.22 -
1622798061.539    260 192.168.xxx.xxx TCP_MISS/200 16108 GET https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm - HIER_DIRECT/38.145.60.22 application/x-rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1622798109.029    496 192.168.xxx.xxx NONE/200 0 CONNECT dl.fedoraproject.org:443 - HIER_DIRECT/38.145.60.22 -
1622798109.130      1 192.168.xxx.xxx TCP_MEM_HIT/200 16115 GET https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm - HIER_NONE/- application/x-rpm
&lt;/code&gt;&lt;/pre&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210610.html</guid><pubDate>Thu, 10 Jun 2021 00:00:00 GMT</pubDate></item><item><title>squid nobump</title><link>https://mnod.github.io/posts/20210608.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;The squid packages of debian doesn not support &lt;a href="https://wiki.squid-cache.org/Features/SslBump"&gt;sslbump&lt;/a&gt;.
It only redirects ssl traffic. We can not analyze or cache the content of the ssl traffic.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

RUN apt-get update \
&amp;amp;&amp;amp; apt install -y squid \
s&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf

CMD if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; sleep 2; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
(result will be nothing)
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTP server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
*   Trying 2001:df0:25e:e100::3...
* TCP_NODELAY set
* Connected to ftp.yz.yamagata-u.ac.jp (2001:df0:25e:e100::3) port 80 (#0)
&amp;gt; GET /pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:59:01 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Upgrade: h2,h2c
&amp;lt; Connection: Upgrade
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt;
{ [331 bytes data]
* Connection #0 to host ftp.yz.yamagata-u.ac.jp left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3128/ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
* Uses proxy env variable http_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
&amp;gt; GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:58:26 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt; X-Cache: MISS from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: MISS from e3b21f81fdd2:3128
&amp;lt; Via: 1.1 e3b21f81fdd2 (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt;
{ [331 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when cache hit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; Age: 358
&amp;lt; X-Cache: HIT from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: HIT from e3b21f81fdd2:3128
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1623026732.001    265 192.168.xxx.xxx TCP_MISS/200 685 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_DIRECT/133.24.248.17 -
1623027089.025      0 192.168.xxx.xxx TCP_MEM_HIT/200 693 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_NONE/- -
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -k -s https://www.google.com/ -o /dev/null 
*   Trying 142.250.196.132...
* TCP_NODELAY set
* Connected to www.google.com (142.250.196.132) port 443 (#0)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null 
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port xxxxx (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log. The ssl connection is just tunneled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1622950724.481    170 192.168.xxx.xxx TCP_TUNNEL/200 18439 CONNECT www.google.com:443 - HIER_DIRECT/172.217.175.4 -
&lt;/code&gt;&lt;/pre&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210608.html</guid><pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate></item><item><title>kvm on raspberrypi</title><link>https://mnod.github.io/posts/20200927.html</link><dc:creator>mnod</dc:creator><description>&lt;p&gt;kvm On Raspberry Pi OS (64bit) beta test version&lt;/p&gt;
&lt;p&gt;related packages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt install --no-install-recommends qemu-system-arm qemu-utils kpartx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;boot alpine linux&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;get kernel and initra from the iso file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mount -o loop alpine-standard-3.12.0-aarch64.iso /media/tmp
$ sudo cp /media/tmp/boot/initramfs-lts .
$ sudo cp /media/tmp/boot/vmlinuz-lts .
$ sudo umount /media/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -nographic -m 512 \
&amp;gt; -kernel vmlinuz-lts -initrd initramfs-lts \
&amp;gt; -drive if=none,id=image,file=alpine-standard-3.12.0-aarch64.iso -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;install debian10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;download kernel and initrd file and create an empty virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ wget -O linux http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/linux
$ wget -O initrd.gz http://ftp.jp.debian.org/debian/dists/buster/main/installer-arm64/current/images/netboot/debian-installer/arm64/initrd.gz
$ qemu-img create -f qcow2 hda.qcow2 16G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot the installer with downloaded kernel and initrd file and install to the virtual image file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel linux -initrd initrd.gz \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -no-reboot -vnc :1

$ vncviewer xxx.xxx.xxx.xxx:5901
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;get kernel and initrd file from qcow2 file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ lsmod | grep nbd
$ sudo modprobe nbd
$ sudo qemu-nbd -c /dev/nbd0 debian10.qcow2
$ sudo kpartx -av /dev/nbd0
$ sudo mount /dev/mapper/nbd0p1 /media/tmp

$ cp /media/tmp/initrd.img-4.19.0-11-arm64 .
$ cp /media/tmp/vmlinuz-4.19.0-11-arm64 .

$ sudo umount /media/tmp
$ sudo kpartx -dv /dev/nbd0
$ sudo qemu-nbd -d /dev/nbd0
$ sudo rmmod nbd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;boot&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo qemu-system-aarch64 -cpu host -enable-kvm -machine virt -m 512 \
&amp;gt; -kernel vmlinuz-4.19.0-11-arm64 -initrd initrd.img-4.19.0-11-arm64 \
&amp;gt; -append 'root=/dev/vda2' \
&amp;gt; -drive if=none,id=image,file=debian10.qcow2 -device virtio-blk-device,drive=image \
&amp;gt; -netdev user,id=user0 -device virtio-net-device,netdev=user0 \
&amp;gt; -monitor telnet:localhost:10025,server,nowait \
&amp;gt; -nographic
&lt;/code&gt;&lt;/pre&gt;</description><category>kvm</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200927.html</guid><pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate></item></channel></rss>