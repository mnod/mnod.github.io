<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about docker)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Sat, 10 Oct 2020 02:16:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>docker on raspberrypi</title><link>https://mnod.github.io/posts/20200926.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Install docker on &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=117&amp;amp;t=275370"&gt;Raspberry Pi OS (64bit) beta test version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/debian/"&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --dry-run
$ sudo sh get-docker.sh
$ systemctl is-active docker
$ systemctl is-enabled docker
$ sudo docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the docker root directory where we store the images and containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker info | grep Root
$ sudo systemctl stop docker
$ sudo mv /var/lib/docker /path/to/
$ sudo ln -s /path/to/docker /var/lib/docker
$ sudo systemctl start docker
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -it alpine
/ #
/ # uptime
 03:17:44 up 1 day,  2:47,  load average: 0.02, 0.05, 0.01
/ #
/ # uname -a
Linux 4db177a44a14 5.4.42-v8+ #1319 SMP PREEMPT Wed May 20 14:18:56 BST 2020 aarch64 Linux
/ #
/ # free -m
              total        used        free      shared  buff/cache   available
Mem:           7816         315        6339           2        1161        7460
Swap:          8191           0        8191
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt install libffi-dev libssl-dev
$ sudo pip3 install docker-compose
$ pip3 show docker-compose
$ docker-compose version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200926.html</guid><pubDate>Sat, 26 Sep 2020 00:00:00 GMT</pubDate></item><item><title>terraform docker container</title><link>https://mnod.github.io/posts/20200516.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From centos:centos8

ARG VERSION=0.12.25
RUN yum install -y unzip python2-pip openssh-clients &amp;amp;&amp;amp; \
    yum clean all &amp;amp;&amp;amp; \
    curl -s https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_amd64.zip -o terraform.zip &amp;amp;&amp;amp; \
    unzip terraform.zip &amp;amp;&amp;amp; \
    rm terraform.zip &amp;amp;&amp;amp; \
    mv terraform /usr/local/bin &amp;amp;&amp;amp; \
    pip2 install ansible boto boto3 awscli &amp;amp;&amp;amp; \
    ln -s /usr/bin/python2.7 /usr/bin/python &amp;amp;&amp;amp; \
    mkdir /tmp/terraform &amp;amp;&amp;amp; \
    useradd -m docker

VOLUME ["/tmp/terraform"]
USER "docker"
WORKDIR "/tmp/terraform"
CMD ["/bin/bash"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg VERSION=0.12.25 -t terraform:0.12.25 .
$ sudo docker tag terraform:0.12.25 terraform:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest terraform --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest ansible --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create variable file /mydir/credentials &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=xxxx
AWS_SECRET_ACCESS_KEY=xxxx
AWS_DEFAULT_REGION=xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create wrapper script infradeploy.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v /mylocal/terraform:/tmp/terraform --env-file /mydir/credentials --rm -it terraform:latest $*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test terraform and ansible work&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo sh infradeploy.sh terraform show
$ sudo sh infradeploy.sh ./ec2.py --list
$ sudo sh infradeploy.sh ansible -i ec2.py -u admin ec2 -m ping --private-key id_rsa.mykey
$ sudo sh infradeploy.sh ansible-playbook --check -e @extravars.json playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As described at &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html"&gt;this site&lt;/a&gt; we can use ec2.py and ec2.ini(optional) for dynamic inventory
When I ran ec2.py I got &lt;code&gt;ImportError: No module named ansible.module_utils&lt;/code&gt; in the case I installed ansible from ubuntu repository.
It seems ansible should be installed with pip if you want to use ec2.py&lt;/p&gt;
&lt;p&gt;playbook sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: test playbook
  hosts: tag_Name_tagname
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_private_key_file: "./id_rsa.mykey"
  tasks:
    - name: install some packages
      apt:
        name: ['make','screen']
        state: present
        install_recommends: no
      when: ansible_pkg_mgr == 'apt'
      tags: packages

    - name: create a directory
      file:
        path: /my/direcoty
        state: directory
        owner: admin
        mode: '0755'

$ sudo sh infradeploy.sh ansible-playbook --check --diff -i ec2.py playbook.yml
$ sudo sh infradeploy.sh ansible-playbook --diff -i ec2.py playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>ansible</category><category>docker</category><category>terraform</category><guid>https://mnod.github.io/posts/20200516.html</guid><pubDate>Sat, 16 May 2020 00:00:00 GMT</pubDate></item><item><title>apt-cacher-ng</title><link>https://mnod.github.io/posts/20200315.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat Dockerfile
FROM debian:buster

RUN apt-get update \
&amp;amp;&amp;amp; apt-get install -y --no-install-recommends apt-cacher-ng \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/cache/apt-cacher-ng"]
EXPOSE 3142

CMD chmod 777 /var/cache/apt-cacher-ng \
&amp;amp;&amp;amp; /etc/init.d/apt-cacher-ng start \
&amp;amp;&amp;amp; tail -f /var/log/apt-cacher-ng/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build -t apt-cacher-ng:buster . | tee build.log
$ sudo docker tag apt-cacher-ng:buster apt-cacher-ng:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -d -p 3142:3142 -v /mnt/apt-cacher-ng:/var/cache/apt-cacher-ng apt-cacher-ng:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl 192.168.xxx.xxx:3142
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;how to use the cache server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;specify it in a config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; END | sudo tee /etc/apt/apt.conf.d/01proxy
&amp;gt; Acquire::http::Proxy "http://192.168.xxx.xxx:3142/";
&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify it in command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt-get install xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or
    $ sudo su -
    # http_proxy=http://192.168.xxx.xxx:3142/ apt-get install xxxx &lt;/p&gt;
&lt;p&gt;for docker build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t imagename:tagname . | tee build.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20200315.html</guid><pubDate>Sun, 15 Mar 2020 00:00:00 GMT</pubDate></item><item><title>docker life cycle</title><link>https://mnod.github.io/posts/20161001.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;ライフサイクルをざっと。&lt;/p&gt;
&lt;p&gt;dockerデーモンの起動と動作確認。ubuntuの場合。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo service docker status
$ sudo service docker start
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;リポジトリに登録されているイメージを取得する。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker pull debian:latest
Pulling repository debian
6845b83c79fb: Download complete
575489a51992: Download complete
Status: Downloaded newer image for debian:latest
$ 
$ sudo docker images debian
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
debian              latest              6845b83c79fb        13 days ago         125.1 MB
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナを作成して実行。コンソール接続してbashを実行する例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -it debian:latest /bin/bash
root@06e1a850e923:/# 
root@06e1a850e923:/# w
 22:20:47 up 29 days, 14:32,  0 users,  load average: 0.36, 0.29, 0.24
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root@06e1a850e923:/#
root@06e1a850e923:/# uname -a
Linux 06e1a850e923 3.13.0-63-generic #103-Ubuntu SMP Fri Aug 14 21:42:59 UTC 2015 x86_64 GNU/Linux
root@06e1a850e923:/#
root@06e1a850e923:/# cat /etc/os-release
PRETTY_NAME="Debian GNU/Linux 8 (jessie)"
NAME="Debian GNU/Linux"
VERSION_ID="8"
VERSION="8 (jessie)"
ID=debian
HOME_URL="http://www.debian.org/"
SUPPORT_URL="http://www.debian.org/support/"
BUG_REPORT_URL="https://bugs.debian.org/"
root@06e1a850e923:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンソール接続したコンテナから一旦切断する例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@xxxxxxxxxxxx:/# [Ctl+p]-[Ctl+q]
$ 
$ sudo docker ps | grep debian
xxxxxxxxxxxx        debian:latest       "/bin/bash"         About a minute ago   Up About a minute                       berserk_mayer
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再接続する例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker attach xxxxxxxxxxxx
root@xxxxxxxxxxxx:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナを終了する例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@06e1a850e923:/# exit
exit
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;終了したコンテナを再起動する例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker ps -a | grep debian
xxxxxxxxxxxx        debian:latest            "/bin/bash"            13 minutes ago      Exited (0) 13 seconds ago                                          berserk_mayer
$
$ sudo docker start -i xxxxxxxxxxxx
root@xxxxxxxxxxxx:/# 
root@xxxxxxxxxxxx:/# exit
exit
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナの状態確認。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
$ 
$ sudo docker ps -a | grep debian
06e1a850e923        debian:latest            "/bin/bash"            2 minutes ago       Exited (0) 47 seconds ago                                      evil_kowalevski

$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy file from/to docker container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker cp xxxxxxxxxxxx:/dirname/filename destination
$ sudo docker cp source xxxxxxxxxxxx:/dirname/filename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンテナの削除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker rm 06e1a850e923
06e1a850e923
$ 
$ sudo docker ps -a | grep debian
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;イメージの削除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker rmi debian:latest
Untagged: debian:latest
Deleted: 6845b83c79fb642ed6af06cceaca042e155717ca8eb0b5cffa9c43f1f7f70348
Deleted: 575489a51992d5d30976ff5ba7f7eabdc134acfb51c79ff48883089009594e64
$
$ sudo docker images debian
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dockerイメージの作成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir project &amp;amp;&amp;amp; cd project
$ 
$ vi Dockerfile
$ 
$ sudo docker build -t imagename:tagname . | tee build.log
$ 
$ sudo docker images imagename
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you want to use proxy, use --build-arg option like bellow&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t imagename:tagname . | tee build.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When new image name is &lt;none&gt;, then rename it as below&lt;/none&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker tag xxxxxxxxxxxx imagename:tagname
$ 
$ sudo docker images imagename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不要なイメージの一括削除&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo docker images | awk '$1~/&amp;lt;none&amp;gt;/ {print}'
sudo docker images | awk '$1~/&amp;lt;none&amp;gt;/ {print $3}' | xargs sudo docker rmi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用するdockerfileの簡単な例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From debian:latest
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    screen \
    openssl \
    vim \
   make \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>container</category><category>docker</category><category>linux</category><category>ubuntu</category><guid>https://mnod.github.io/posts/20161001.html</guid><pubDate>Sat, 01 Oct 2016 00:00:00 GMT</pubDate></item><item><title>arukas</title><link>https://mnod.github.io/posts/20160925.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;2019/10追記&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arukas.io/updates/20190930-terminate-of-service/"&gt;2020/1/31でのサービス終了&lt;/a&gt;が発表されました。すでに新規アカウントの申し込みは終了しています。
無料で使える範囲での活用方法を自分の中で見いだしたところでしたので、とても残念です。
大手サービスプロバイダなのに、2018/03 から始まったサービスが 2020/01 で終了してしまうというのは、あまりに早すぎると感じます。利用者が相当少なかったのでしょうか。&lt;/p&gt;
&lt;p&gt;2018/04追記&lt;/p&gt;
&lt;p&gt;2018/03下旬からサービスインとなっています。βテストの時との違いや気づいた点を記載します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用するには、アカウント作成(招待制)とクレジット情報の登録が必要です。
(無料のプランしか使う予定が無くてもクレジット情報が必要なようです。)&lt;/li&gt;
&lt;li&gt;転送量は無料。当初の予告どおり、無料で使えるFreeプランもあります。
(Freeプランでは0.1vcpu、メインメモリ128MB、同時に作成しておけるコンテナは一つだけ、実行できるのも一つだけ。)&lt;/li&gt;
&lt;li&gt;ドメイン名にtokyoと入っていますが、自分が試したときはIPアドレスは大阪方面のものと判定されました。
(βを使い始めた頃は東京方面のアドレスと判定されましたが、以後どうなったのか確認してません)&lt;/li&gt;
&lt;li&gt;コントロールパネルのコンテナ作成画面は、利用するプランの選択肢がある以外は、βの時と同じに見えます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自分にとって「東京(のアドレス)で(無料で)使えるサーバ」というのが、非常に価値が大きかったので、ちょっと残念な感じもあります。
いずれにせよ無料で使えるプランがあるのはありがたいですので、
いろいろ制限がある中、どんなことがどこまでできるのか、試してみたいと思ってます。&lt;/p&gt;
&lt;p&gt;2017/08追記&lt;/p&gt;
&lt;p&gt;2017/07末をもってβテストが終わりました。そのまま正式サービスに移行するのではなく、一旦サービスを止めたようです。
正式サービスの開始時期は今のところ未定とのことです。&lt;/p&gt;
&lt;p&gt;追記ここまで。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arukas.io/"&gt;arukas&lt;/a&gt;は、コンテナ技術の&lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt;を利用したホスティングサービスです。&lt;/p&gt;
&lt;p&gt;逆から読むと、sakura。&lt;a href="http://vps.sakura.ad.jp/sp/"&gt;さくらのVPS&lt;/a&gt;でおなじみの、&lt;a href="https://www.sakura.ad.jp"&gt;さくらインターネット&lt;/a&gt;のサービスです。
無料で利用することができるオープンβテストが4月末ごろから9月末までの予定で行われており、間もなく正式リリースとなるものと思われます。
正式リリースした後も無料で利用できるプランが設定されるようです。&lt;/p&gt;
&lt;p&gt;arukasでは、&lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;の&lt;a href="https://hub.docker.com/explore/"&gt;パブリックレポジトリ&lt;/a&gt;にアップロードされたコンテナを登録して、起動することができます。
Docker Hubには沢山のレポジトリが登録されていますが、自分で作成・登録することもできます。
無いものは自分で作ってしまえばいいので、実際には、どんなコンテナでも動かすことができます。&lt;/p&gt;
&lt;p&gt;dockerの利点は、コンテナの作成・起動・終了・削除が迅速にできることで、これはそのままarukasにも当てはまります。
ベータテストのためなのか、以下の制限があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;データ永続化の仕組みがないので、再起動するとデータが消える。&lt;/li&gt;
&lt;li&gt;定期的(週に一度くらい?)に再起動される。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;そのため永続的に使いたいデータは、外部に置く必要があります。
正式リリース後には変更される可能性もあるかもしれません。&lt;/p&gt;
&lt;p&gt;URLとポートを指定すれば、起動したコンテナに外部から接続することができます。この場合は通信プロトコルはhttp(s)に限りません。&lt;/p&gt;
&lt;p&gt;同じ内容のものを複数のコンテナで動かすことができますが、この場合、エンドポイントという与えられたurlにhttps接続することで、各コンテナにロードバランスして接続させることができます。(バランスさせるアルゴリズムなどは公開されていないようです。)
この時、tlsにより通信内容は暗号化されます。自分で証明書を準備する必要がありません。ただし、プロトコルはhttpに限られます。&lt;/p&gt;&lt;/div&gt;</description><category>container</category><category>docker</category><category>hosting</category><guid>https://mnod.github.io/posts/20160925.html</guid><pubDate>Sun, 25 Sep 2016 00:00:00 GMT</pubDate></item></channel></rss>