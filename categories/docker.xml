<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech log (Posts about docker)</title><link>https://mnod.github.io/</link><description></description><atom:link href="https://mnod.github.io/categories/docker.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:mnod@example.com"&gt;mnod&lt;/a&gt; </copyright><lastBuildDate>Tue, 08 Jun 2021 00:54:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>squid nobump</title><link>https://mnod.github.io/posts/20210608.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;The squid packages of debian doesn not support &lt;a href="https://wiki.squid-cache.org/Features/SslBump"&gt;sslbump&lt;/a&gt;.
It only redirects ssl traffic. We can not analyze or cache the content of the ssl traffic.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

RUN apt-get update \
&amp;amp;&amp;amp; apt install -y squid \
s&amp;amp;&amp;amp; apt clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/spool/squid"]
EXPOSE 3128

WORKDIR /var/spool/squid
COPY squid.conf /etc/squid/squid.conf

CMD if [ ! -f /var/spool/squid/swap.state ]; then squid -z ; sleep 2; fi \
&amp;amp;&amp;amp; squid -N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sample configure file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl localnet src 192.168.xxx.0/24
acl SSL_ports port 443
acl Safe_ports port 80
acl Safe_ports port 21
acl Safe_ports port 443
acl CONNECT method CONNECT
http_access deny !Safe_ports
http_access deny CONNECT !SSL_ports
http_access allow localhost manager
http_access deny manager
include /etc/squid/conf.d/*
http_access allow localnet
http_access allow localhost
http_access deny all
http_port 3128
cache_dir ufs /var/spool/squid 100 16 256
coredump_dir /var/spool/squid
refresh_pattern .               129600  33%     525600
dns_nameservers 192.168.xxx.xxx 192.168.xxx.xxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t squid:test .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm squid:test squid --version | awk -F: '$1~/options/{print $2}' | sed -e 's/ /\n/g' | grep ssl
(result will be nothing)
$ docker run --rm -p 3128:3128 -v /mnt/squid:/var/spool/squid -d squid:test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -D - -s http://192.168.xxx.xxx:3128/ -o /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTP server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
*   Trying 2001:df0:25e:e100::3...
* TCP_NODELAY set
* Connected to ftp.yz.yamagata-u.ac.jp (2001:df0:25e:e100::3) port 80 (#0)
&amp;gt; GET /pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:59:01 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Upgrade: h2,h2c
&amp;lt; Connection: Upgrade
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt;
{ [331 bytes data]
* Connection #0 to host ftp.yz.yamagata-u.ac.jp left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3128/ curl -v -s http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme -o /dev/null
* Uses proxy env variable http_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port 3128 (#0)
&amp;gt; GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme HTTP/1.1
&amp;gt; Host: ftp.yz.yamagata-u.ac.jp
&amp;gt; User-Agent: curl/7.64.0
&amp;gt; Accept: */*
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Date: Mon, 07 Jun 2021 00:58:26 GMT
&amp;lt; Server: Apache/2.4.46 (Unix) OpenSSL/1.1.1k
&amp;lt; Last-Modified: Mon, 03 Apr 2017 11:34:28 GMT
&amp;lt; ETag: "14b-54c418ac05900"
&amp;lt; Accept-Ranges: bytes
&amp;lt; Content-Length: 331
&amp;lt; X-Cache: MISS from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: MISS from e3b21f81fdd2:3128
&amp;lt; Via: 1.1 e3b21f81fdd2 (squid/4.6)
&amp;lt; Connection: keep-alive
&amp;lt;
{ [331 bytes data]
* Connection #0 to host 192.168.xxx.xxx left intact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when cache hit&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt; Age: 358
&amp;lt; X-Cache: HIT from e3b21f81fdd2
&amp;lt; X-Cache-Lookup: HIT from e3b21f81fdd2:3128
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1623026732.001    265 192.168.xxx.xxx TCP_MISS/200 685 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_DIRECT/133.24.248.17 -
1623027089.025      0 192.168.xxx.xxx TCP_MEM_HIT/200 693 GET http://ftp.yz.yamagata-u.ac.jp/pub/linux/centos/5.11/readme - HIER_NONE/- -
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;connecting to HTTPS server&lt;/h3&gt;
&lt;p&gt;without proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -v -k -s https://www.google.com/ -o /dev/null 
*   Trying 142.250.196.132...
* TCP_NODELAY set
* Connected to www.google.com (142.250.196.132) port 443 (#0)
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;with proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ https_proxy=http://192.168.xxx.xxx:3128/ curl -v -k -s https://www.google.com/ -o /dev/null 
* Uses proxy env variable https_proxy == 'http://192.168.xxx.xxx:3128/'
*   Trying 192.168.xxx.xxx...
* TCP_NODELAY set
* Connected to 192.168.xxx.xxx (192.168.xxx.xxx) port xxxxx (#0)
* allocate connect buffer!
* Establish HTTP proxy tunnel to www.google.com:443
&amp;gt; CONNECT www.google.com:443 HTTP/1.1
&amp;gt; Host: www.google.com:443
&amp;gt; User-Agent: curl/7.61.1
&amp;gt; Proxy-Connection: Keep-Alive
&amp;gt; 
&amp;lt; HTTP/1.1 200 Connection established
&amp;lt; 
* Proxy replied 200 to CONNECT request
* CONNECT phase completed!
:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;squid log. The ssl connection is just tunneled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker exec xxxxxxxxxxxx tail /var/log/squid/access.log
:
1622950724.481    170 192.168.xxx.xxx TCP_TUNNEL/200 18439 CONNECT www.google.com:443 - HIER_DIRECT/172.217.175.4 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20210608.html</guid><pubDate>Tue, 08 Jun 2021 00:00:00 GMT</pubDate></item><item><title>devpi-server</title><link>https://mnod.github.io/posts/20210605.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://pypi.org/project/devpi-server/"&gt;devpi-server&lt;/a&gt; is a server for private package indexes and PyPI caching.&lt;/p&gt;
&lt;h3&gt;build a docker container&lt;/h3&gt;
&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debian:buster-slim

ENV DEBIAN_FRONTEND noninteractive
RUN apt update &amp;amp;&amp;amp; \
    apt install --no-install-recommends -y \
    python3-pip python3-pip python3-setuptools python3-dev build-essential libffi-dev &amp;amp;&amp;amp; \
    pip3 install devpi-server

EXPOSE 3141
VOLUME ["/var/cache/devpi"]

CMD chmod 777 /var/cache/devpi &amp;amp;&amp;amp; \
    devpi-server \
        --serverdir /var/cache/devpi \
        --host 0.0.0.0 --port 3141
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t devpi-server:buster-slim .
$ sudo docker tag devpi-server:buster-slim devpi-server:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -d -p 3141:3141 -v /mnt/devpi:/var/cache/devpi devpi-server:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://192.168.xxx.xxx:3141/
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;how to use devpi-server&lt;/h3&gt;
&lt;p&gt;specify it in a command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pip3 install --trusted-host 192.168.xxx.xxx --index-url http://192.168.xxx.xxx:3141/root/pypi matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ PIP_TRUSTED_HOST=192.168.xxx.xxx PIP_INDEX_URL=http://192.168.xxx.xxx:3141/root/pypi pip3 install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for docker build, write below in a Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ARG PIP_TRUSTED_HOST
ARG PIP_INDEX_URL
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then specify devpi-server at build-arg parameter in docker run command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker build --build-arg PIP_TRUSTED_HOST=192.168.xxx.xxx --build-arg PIP_INDEX_URL=http://192.168.xxx.xxx:3141/root/pypi -t imagename .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>python</category><guid>https://mnod.github.io/posts/20210605.html</guid><pubDate>Sat, 05 Jun 2021 00:00:00 GMT</pubDate></item><item><title>docker on raspberrypi</title><link>https://mnod.github.io/posts/20200926.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Install docker on &lt;a href="https://www.raspberrypi.org/forums/viewtopic.php?f=117&amp;amp;t=275370"&gt;Raspberry Pi OS (64bit) beta test version&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/debian/"&gt;How to install&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --dry-run
$ sudo sh get-docker.sh
$ systemctl is-active docker
$ systemctl is-enabled docker
$ sudo docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;change the docker root directory where we store the images and containers.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker info | grep Root
$ sudo systemctl stop docker
$ sudo mv /var/lib/docker /path/to/
$ sudo ln -s /path/to/docker /var/lib/docker
$ sudo systemctl start docker
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;confirm the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -it alpine
/ #
/ # uptime
 03:17:44 up 1 day,  2:47,  load average: 0.02, 0.05, 0.01
/ #
/ # uname -a
Linux 4db177a44a14 5.4.42-v8+ #1319 SMP PREEMPT Wed May 20 14:18:56 BST 2020 aarch64 Linux
/ #
/ # free -m
              total        used        free      shared  buff/cache   available
Mem:           7816         315        6339           2        1161        7460
Swap:          8191           0        8191
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;install docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt install libffi-dev libssl-dev
$ sudo pip3 install docker-compose
$ pip3 show docker-compose
$ docker-compose version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;commands of docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config # Validate and view the Compose file
ps # List containers
images # List images
build # (Re)Build services
create # Create services
up # Create and start containers
start # Start services
stop # Stop services
rm -f # Remove stopped containers
down # Stop and remove containers
version # Show version information
help # Show help messages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When update docker-compose.yml, no need to rebuild the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When update Dockerfile or edit any source codes, need to rebuild the image.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose build
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><category>raspberrypi</category><guid>https://mnod.github.io/posts/20200926.html</guid><pubDate>Sat, 26 Sep 2020 00:00:00 GMT</pubDate></item><item><title>terraform docker container</title><link>https://mnod.github.io/posts/20200516.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From centos:centos8

ARG VERSION=0.12.25
RUN yum install -y unzip python2-pip openssh-clients &amp;amp;&amp;amp; \
    yum clean all &amp;amp;&amp;amp; \
    curl -s https://releases.hashicorp.com/terraform/${VERSION}/terraform_${VERSION}_linux_amd64.zip -o terraform.zip &amp;amp;&amp;amp; \
    unzip terraform.zip &amp;amp;&amp;amp; \
    rm terraform.zip &amp;amp;&amp;amp; \
    mv terraform /usr/local/bin &amp;amp;&amp;amp; \
    pip2 install ansible boto boto3 awscli &amp;amp;&amp;amp; \
    ln -s /usr/bin/python2.7 /usr/bin/python &amp;amp;&amp;amp; \
    mkdir /tmp/terraform &amp;amp;&amp;amp; \
    useradd -m docker

VOLUME ["/tmp/terraform"]
USER "docker"
WORKDIR "/tmp/terraform"
CMD ["/bin/bash"]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg VERSION=0.12.25 -t terraform:0.12.25 .
$ sudo docker tag terraform:0.12.25 terraform:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest terraform --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest ansible --version
$ sudo docker run -v /mylocal/terraform:/tmp/terraform --rm -it terraform:latest bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create variable file /mydir/credentials &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=xxxx
AWS_SECRET_ACCESS_KEY=xxxx
AWS_DEFAULT_REGION=xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;create wrapper script infradeploy.sh&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -v /mylocal/terraform:/tmp/terraform --env-file /mydir/credentials --rm -it terraform:latest $*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test terraform and ansible work&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo sh infradeploy.sh terraform show
$ sudo sh infradeploy.sh ./ec2.py --list
$ sudo sh infradeploy.sh ansible -i ec2.py -u admin ec2 -m ping --private-key id_rsa.mykey
$ sudo sh infradeploy.sh ansible-playbook --check -e @extravars.json playbook.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As described at &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html"&gt;this site&lt;/a&gt; we can use ec2.py and ec2.ini(optional) for dynamic inventory
When I ran ec2.py I got &lt;code&gt;ImportError: No module named ansible.module_utils&lt;/code&gt; in the case I installed ansible from ubuntu repository.
It seems ansible should be installed with pip if you want to use ec2.py&lt;/p&gt;
&lt;p&gt;playbook sample&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- name: test playbook
  hosts: tag_Name_tagname
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_private_key_file: "./id_rsa.mykey"
  tasks:
    - name: install some packages
      apt:
        name: ['make','screen']
        state: present
        install_recommends: no
      when: ansible_pkg_mgr == 'apt'
      tags: packages

    - name: create a directory
      file:
        path: /my/direcoty
        state: directory
        owner: admin
        mode: '0755'

$ sudo sh infradeploy.sh ansible-playbook --check --diff -i ec2.py playbook.yml
$ sudo sh infradeploy.sh ansible-playbook --diff -i ec2.py playbook.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>ansible</category><category>docker</category><category>terraform</category><guid>https://mnod.github.io/posts/20200516.html</guid><pubDate>Sat, 16 May 2020 00:00:00 GMT</pubDate></item><item><title>apt-cacher-ng</title><link>https://mnod.github.io/posts/20200315.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;make a dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat Dockerfile
FROM debian:buster

RUN apt-get update \
&amp;amp;&amp;amp; apt-get install -y --no-install-recommends apt-cacher-ng \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*

VOLUME ["/var/cache/apt-cacher-ng"]
EXPOSE 3142

CMD chmod 777 /var/cache/apt-cacher-ng \
&amp;amp;&amp;amp; /etc/init.d/apt-cacher-ng start \
&amp;amp;&amp;amp; tail -f /var/log/apt-cacher-ng/*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;build an image&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build -t apt-cacher-ng:buster . | tee build.log
$ sudo docker tag apt-cacher-ng:buster apt-cacher-ng:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run a container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run --rm -d -p 3142:3142 -v /mnt/apt-cacher-ng:/var/cache/apt-cacher-ng apt-cacher-ng:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test the address and port &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl 192.168.xxx.xxx:3142
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;how to use the cache server&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;specify it in a config file&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;lt;&amp;lt; END | sudo tee /etc/apt/apt.conf.d/01proxy
&amp;gt; Acquire::http::Proxy "http://192.168.xxx.xxx:3142/";
&amp;gt; END
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;specify it in command line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ http_proxy=http://192.168.xxx.xxx:3142/ sudo -E apt-get install xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo su -
# http_proxy=http://192.168.xxx.xxx:3142/ apt-get install xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for docker build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t imagename:tagname . | tee build.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>docker</category><category>linux</category><guid>https://mnod.github.io/posts/20200315.html</guid><pubDate>Sun, 15 Mar 2020 00:00:00 GMT</pubDate></item><item><title>docker life cycle</title><link>https://mnod.github.io/posts/20161001.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;ã©ã¤ããµã¤ã¯ã«ããã£ã¨ã&lt;/p&gt;
&lt;p&gt;dockerãã¼ã¢ã³ã®èµ·åã¨åä½ç¢ºèªãubuntuã®å ´åã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo service docker status
$ sudo service docker start
$ sudo docker run --rm hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ãªãã¸ããªã«ç»é²ããã¦ããã¤ã¡ã¼ã¸ãåå¾ããã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker pull debian:latest
Pulling repository debian
6845b83c79fb: Download complete
575489a51992: Download complete
Status: Downloaded newer image for debian:latest
$ 
$ sudo docker images debian
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
debian              latest              6845b83c79fb        13 days ago         125.1 MB
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ã³ã³ãããä½æãã¦å®è¡ãã³ã³ã½ã¼ã«æ¥ç¶ãã¦bashãå®è¡ããä¾ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker run -it debian:latest /bin/bash
root@06e1a850e923:/# 
root@06e1a850e923:/# w
 22:20:47 up 29 days, 14:32,  0 users,  load average: 0.36, 0.29, 0.24
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
root@06e1a850e923:/#
root@06e1a850e923:/# uname -a
Linux 06e1a850e923 3.13.0-63-generic #103-Ubuntu SMP Fri Aug 14 21:42:59 UTC 2015 x86_64 GNU/Linux
root@06e1a850e923:/#
root@06e1a850e923:/# cat /etc/os-release
PRETTY_NAME="Debian GNU/Linux 8 (jessie)"
NAME="Debian GNU/Linux"
VERSION_ID="8"
VERSION="8 (jessie)"
ID=debian
HOME_URL="http://www.debian.org/"
SUPPORT_URL="http://www.debian.org/support/"
BUG_REPORT_URL="https://bugs.debian.org/"
root@06e1a850e923:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ã³ã³ã½ã¼ã«æ¥ç¶ããã³ã³ããããä¸æ¦åæ­ããä¾ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@xxxxxxxxxxxx:/# [Ctl+p]-[Ctl+q]
$ 
$ sudo docker ps | grep debian
xxxxxxxxxxxx        debian:latest       "/bin/bash"         About a minute ago   Up About a minute                       berserk_mayer
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;åæ¥ç¶ããä¾ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker attach xxxxxxxxxxxx
root@xxxxxxxxxxxx:/#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ã³ã³ãããçµäºããä¾ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@06e1a850e923:/# exit
exit
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;çµäºããã³ã³ãããåèµ·åããä¾ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker ps -a | grep debian
xxxxxxxxxxxx        debian:latest            "/bin/bash"            13 minutes ago      Exited (0) 13 seconds ago                                          berserk_mayer
$
$ sudo docker start -i xxxxxxxxxxxx
root@xxxxxxxxxxxx:/# 
root@xxxxxxxxxxxx:/# exit
exit
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ã³ã³ããã®ç¶æç¢ºèªã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
$ 
$ sudo docker ps -a | grep debian
06e1a850e923        debian:latest            "/bin/bash"            2 minutes ago       Exited (0) 47 seconds ago                                      evil_kowalevski

$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy file from/to docker container&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker cp xxxxxxxxxxxx:/dirname/filename destination
$ sudo docker cp source xxxxxxxxxxxx:/dirname/filename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ã³ã³ããã®åé¤ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker rm 06e1a850e923
06e1a850e923
$ 
$ sudo docker ps -a | grep debian
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ã¤ã¡ã¼ã¸ã®åé¤ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker rmi debian:latest
Untagged: debian:latest
Deleted: 6845b83c79fb642ed6af06cceaca042e155717ca8eb0b5cffa9c43f1f7f70348
Deleted: 575489a51992d5d30976ff5ba7f7eabdc134acfb51c79ff48883089009594e64
$
$ sudo docker images debian
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;dockerã¤ã¡ã¼ã¸ã®ä½æ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir project &amp;amp;&amp;amp; cd project
$ 
$ vi Dockerfile
$ 
$ sudo docker build -t imagename:tagname . | tee build.log
$ 
$ sudo docker images imagename
$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you want to use proxy, use --build-arg option like bellow&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker build --build-arg http_proxy=http://192.168.xxx.xxx:3142/ -t imagename:tagname . | tee build.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When new image name is &lt;none&gt;, then rename it as below&lt;/none&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo docker tag xxxxxxxxxxxx imagename:tagname
$ 
$ sudo docker images imagename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ä¸è¦ãªã¤ã¡ã¼ã¸ã®ä¸æ¬åé¤&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo docker images | awk '$1~/&amp;lt;none&amp;gt;/ {print}'
sudo docker images | awk '$1~/&amp;lt;none&amp;gt;/ {print $3}' | xargs sudo docker rmi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ä½¿ç¨ããdockerfileã®ç°¡åãªä¾ã&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;From debian:latest
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    screen \
    openssl \
    vim \
   make \
&amp;amp;&amp;amp; apt-get clean \
&amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>container</category><category>docker</category><category>linux</category><category>ubuntu</category><guid>https://mnod.github.io/posts/20161001.html</guid><pubDate>Sat, 01 Oct 2016 00:00:00 GMT</pubDate></item><item><title>arukas</title><link>https://mnod.github.io/posts/20160925.html</link><dc:creator>mnod</dc:creator><description>&lt;div&gt;&lt;p&gt;2019/10è¿½è¨&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arukas.io/updates/20190930-terminate-of-service/"&gt;2020/1/31ã§ã®ãµã¼ãã¹çµäº&lt;/a&gt;ãçºè¡¨ããã¾ããããã§ã«æ°è¦ã¢ã«ã¦ã³ãã®ç³ãè¾¼ã¿ã¯çµäºãã¦ãã¾ãã
ç¡æã§ä½¿ããç¯å²ã§ã®æ´»ç¨æ¹æ³ãèªåã®ä¸­ã§è¦ãã ããã¨ããã§ããã®ã§ãã¨ã¦ãæ®å¿µã§ãã
å¤§æãµã¼ãã¹ãã­ãã¤ããªã®ã«ã2018/03 ããå§ã¾ã£ããµã¼ãã¹ã 2020/01 ã§çµäºãã¦ãã¾ãã¨ããã®ã¯ããã¾ãã«æ©ãããã¨æãã¾ããå©ç¨èãç¸å½å°ãªãã£ãã®ã§ããããã&lt;/p&gt;
&lt;p&gt;2018/04è¿½è¨&lt;/p&gt;
&lt;p&gt;2018/03ä¸æ¬ãããµã¼ãã¹ã¤ã³ã¨ãªã£ã¦ãã¾ããÎ²ãã¹ãã®æã¨ã®éããæ°ã¥ããç¹ãè¨è¼ãã¾ãã&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;å©ç¨ããã«ã¯ãã¢ã«ã¦ã³ãä½æ(æå¾å¶)ã¨ã¯ã¬ã¸ããæå ±ã®ç»é²ãå¿è¦ã§ãã
(ç¡æã®ãã©ã³ããä½¿ãäºå®ãç¡ãã¦ãã¯ã¬ã¸ããæå ±ãå¿è¦ãªããã§ãã)&lt;/li&gt;
&lt;li&gt;è»¢ééã¯ç¡æãå½åã®äºåã©ãããç¡æã§ä½¿ããFreeãã©ã³ãããã¾ãã
(Freeãã©ã³ã§ã¯0.1vcpuãã¡ã¤ã³ã¡ã¢ãª128MBãåæã«ä½æãã¦ãããã³ã³ããã¯ä¸ã¤ã ããå®è¡ã§ããã®ãä¸ã¤ã ãã)&lt;/li&gt;
&lt;li&gt;ãã¡ã¤ã³åã«tokyoã¨å¥ã£ã¦ãã¾ãããèªåãè©¦ããã¨ãã¯IPã¢ãã¬ã¹ã¯å¤§éªæ¹é¢ã®ãã®ã¨å¤å®ããã¾ããã
(Î²ãä½¿ãå§ããé ã¯æ±äº¬æ¹é¢ã®ã¢ãã¬ã¹ã¨å¤å®ããã¾ããããä»¥å¾ã©ããªã£ãã®ãç¢ºèªãã¦ã¾ãã)&lt;/li&gt;
&lt;li&gt;ã³ã³ãã­ã¼ã«ããã«ã®ã³ã³ããä½æç»é¢ã¯ãå©ç¨ãããã©ã³ã®é¸æè¢ãããä»¥å¤ã¯ãÎ²ã®æã¨åãã«è¦ãã¾ãã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;èªåã«ã¨ã£ã¦ãæ±äº¬(ã®ã¢ãã¬ã¹)ã§(ç¡æã§)ä½¿ãããµã¼ããã¨ããã®ããéå¸¸ã«ä¾¡å¤ãå¤§ããã£ãã®ã§ãã¡ãã£ã¨æ®å¿µãªæããããã¾ãã
ãããã«ããç¡æã§ä½¿ãããã©ã³ãããã®ã¯ãããããã§ãã®ã§ã
ããããå¶éãããä¸­ãã©ããªãã¨ãã©ãã¾ã§ã§ããã®ããè©¦ãã¦ã¿ããã¨æã£ã¦ã¾ãã&lt;/p&gt;
&lt;p&gt;2017/08è¿½è¨&lt;/p&gt;
&lt;p&gt;2017/07æ«ããã£ã¦Î²ãã¹ããçµããã¾ããããã®ã¾ã¾æ­£å¼ãµã¼ãã¹ã«ç§»è¡ããã®ã§ã¯ãªããä¸æ¦ãµã¼ãã¹ãæ­¢ããããã§ãã
æ­£å¼ãµã¼ãã¹ã®éå§ææã¯ä»ã®ã¨ããæªå®ã¨ã®ãã¨ã§ãã&lt;/p&gt;
&lt;p&gt;è¿½è¨ããã¾ã§ã&lt;/p&gt;
&lt;p&gt;&lt;a href="https://arukas.io/"&gt;arukas&lt;/a&gt;ã¯ãã³ã³ããæè¡ã®&lt;a href="https://www.docker.com/"&gt;docker&lt;/a&gt;ãå©ç¨ãããã¹ãã£ã³ã°ãµã¼ãã¹ã§ãã&lt;/p&gt;
&lt;p&gt;éããèª­ãã¨ãsakuraã&lt;a href="http://vps.sakura.ad.jp/sp/"&gt;ãããã®VPS&lt;/a&gt;ã§ããªãã¿ã®ã&lt;a href="https://www.sakura.ad.jp"&gt;ãããã¤ã³ã¿ã¼ããã&lt;/a&gt;ã®ãµã¼ãã¹ã§ãã
ç¡æã§å©ç¨ãããã¨ãã§ãããªã¼ãã³Î²ãã¹ãã4ææ«ãããã9ææ«ã¾ã§ã®äºå®ã§è¡ããã¦ãããéããªãæ­£å¼ãªãªã¼ã¹ã¨ãªããã®ã¨æããã¾ãã
æ­£å¼ãªãªã¼ã¹ããå¾ãç¡æã§å©ç¨ã§ãããã©ã³ãè¨­å®ãããããã§ãã&lt;/p&gt;
&lt;p&gt;arukasã§ã¯ã&lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;ã®&lt;a href="https://hub.docker.com/explore/"&gt;ãããªãã¯ã¬ãã¸ããª&lt;/a&gt;ã«ã¢ããã­ã¼ããããã³ã³ãããç»é²ãã¦ãèµ·åãããã¨ãã§ãã¾ãã
Docker Hubã«ã¯æ²¢å±±ã®ã¬ãã¸ããªãç»é²ããã¦ãã¾ãããèªåã§ä½æã»ç»é²ãããã¨ãã§ãã¾ãã
ç¡ããã®ã¯èªåã§ä½ã£ã¦ãã¾ãã°ããã®ã§ãå®éã«ã¯ãã©ããªã³ã³ããã§ãåãããã¨ãã§ãã¾ãã&lt;/p&gt;
&lt;p&gt;dockerã®å©ç¹ã¯ãã³ã³ããã®ä½æã»èµ·åã»çµäºã»åé¤ãè¿éã«ã§ãããã¨ã§ãããã¯ãã®ã¾ã¾arukasã«ãå½ã¦ã¯ã¾ãã¾ãã
ãã¼ã¿ãã¹ãã®ãããªã®ããä»¥ä¸ã®å¶éãããã¾ãã&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ãã¼ã¿æ°¸ç¶åã®ä»çµã¿ããªãã®ã§ãåèµ·åããã¨ãã¼ã¿ãæ¶ããã&lt;/li&gt;
&lt;li&gt;å®æç(é±ã«ä¸åº¦ããã?)ã«åèµ·åãããã&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ãã®ããæ°¸ç¶çã«ä½¿ããããã¼ã¿ã¯ãå¤é¨ã«ç½®ãå¿è¦ãããã¾ãã
æ­£å¼ãªãªã¼ã¹å¾ã«ã¯å¤æ´ãããå¯è½æ§ãããããããã¾ããã&lt;/p&gt;
&lt;p&gt;URLã¨ãã¼ããæå®ããã°ãèµ·åããã³ã³ããã«å¤é¨ããæ¥ç¶ãããã¨ãã§ãã¾ãããã®å ´åã¯éä¿¡ãã­ãã³ã«ã¯http(s)ã«éãã¾ããã&lt;/p&gt;
&lt;p&gt;åãåå®¹ã®ãã®ãè¤æ°ã®ã³ã³ããã§åãããã¨ãã§ãã¾ããããã®å ´åãã¨ã³ããã¤ã³ãã¨ããä¸ããããurlã«httpsæ¥ç¶ãããã¨ã§ãåã³ã³ããã«ã­ã¼ããã©ã³ã¹ãã¦æ¥ç¶ããããã¨ãã§ãã¾ãã(ãã©ã³ã¹ãããã¢ã«ã´ãªãºã ãªã©ã¯å¬éããã¦ããªãããã§ãã)
ãã®æãtlsã«ããéä¿¡åå®¹ã¯æå·åããã¾ããèªåã§è¨¼ææ¸ãæºåããå¿è¦ãããã¾ããããã ãããã­ãã³ã«ã¯httpã«éããã¾ãã&lt;/p&gt;&lt;/div&gt;</description><category>container</category><category>docker</category><category>hosting</category><guid>https://mnod.github.io/posts/20160925.html</guid><pubDate>Sun, 25 Sep 2016 00:00:00 GMT</pubDate></item></channel></rss>